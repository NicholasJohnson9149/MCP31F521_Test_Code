
/Users/nicholas/Documents/Particle/I2C-MCP32F521/target/1.5.0/argon/I2C-MCP32F521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d60  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6d80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e350  000d6d84  0001e350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000438  2003e3b8  2003e3b8  0002e3b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6dec  000d6dec  00026dec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6e14  000d6e14  00026e14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000eb8a7  00000000  00000000  00026e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011f3d  00000000  00000000  001126bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f597  00000000  00000000  001245fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025f0  00000000  00000000  00143b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000048a8  00000000  00000000  00146183  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036841  00000000  00000000  0014aa2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ab1f  00000000  00000000  0018126c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107d23  00000000  00000000  001abd8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d078  00000000  00000000  002b3ab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fba7 	bl	d6784 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fbac 	bl	d679a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e350 	.word	0x2003e350
   d404c:	000d6d84 	.word	0x000d6d84
   d4050:	2003e3b8 	.word	0x2003e3b8
   d4054:	2003e3b8 	.word	0x2003e3b8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fc41 	bl	d58e4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6d78 	.word	0x000d6d78
   d4084:	000d6d3c 	.word	0x000d6d3c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b98a 	b.w	d43a0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa89 	bl	d45a4 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bbe7 	b.w	d5868 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bd21 	b.w	d4ae0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bd1f 	b.w	d4ae0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z18tinkerDigitalWrite6String>:
    Serial.print("Data byte transfer succeeded, busy timeout immediately after = "); Serial.println(i2c_bus_Status);
  }
}

int tinkerDigitalWrite(String command)
{
   d40b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool value = 0;
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
   d40b6:	2101      	movs	r1, #1
    Serial.print("Data byte transfer succeeded, busy timeout immediately after = "); Serial.println(i2c_bus_Status);
  }
}

int tinkerDigitalWrite(String command)
{
   d40b8:	b085      	sub	sp, #20
   d40ba:	4606      	mov	r6, r0
    bool value = 0;
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
   d40bc:	f001 fa27 	bl	d550e <_ZNK6String6charAtEj>
   d40c0:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
   d40c4:	2c07      	cmp	r4, #7
   d40c6:	d845      	bhi.n	d4154 <_Z18tinkerDigitalWrite6String+0xa0>

    if(command.substring(3,7) == "HIGH") value = 1;
   d40c8:	2307      	movs	r3, #7
   d40ca:	2203      	movs	r2, #3
   d40cc:	4631      	mov	r1, r6
   d40ce:	4668      	mov	r0, sp
   d40d0:	f001 fa20 	bl	d5514 <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40d4:	4924      	ldr	r1, [pc, #144]	; (d4168 <_Z18tinkerDigitalWrite6String+0xb4>)
   d40d6:	4668      	mov	r0, sp
   d40d8:	f001 f9df 	bl	d549a <_ZNK6String6equalsEPKc>
   d40dc:	4605      	mov	r5, r0
   d40de:	4668      	mov	r0, sp
   d40e0:	f001 f967 	bl	d53b2 <_ZN6StringD1Ev>
   d40e4:	b97d      	cbnz	r5, d4106 <_Z18tinkerDigitalWrite6String+0x52>
    else if(command.substring(3,6) == "LOW") value = 0;
   d40e6:	2306      	movs	r3, #6
   d40e8:	2203      	movs	r2, #3
   d40ea:	4631      	mov	r1, r6
   d40ec:	4668      	mov	r0, sp
   d40ee:	f001 fa11 	bl	d5514 <_ZNK6String9substringEjj>
   d40f2:	491e      	ldr	r1, [pc, #120]	; (d416c <_Z18tinkerDigitalWrite6String+0xb8>)
   d40f4:	4668      	mov	r0, sp
   d40f6:	f001 f9d0 	bl	d549a <_ZNK6String6equalsEPKc>
   d40fa:	4607      	mov	r7, r0
   d40fc:	4668      	mov	r0, sp
   d40fe:	f001 f958 	bl	d53b2 <_ZN6StringD1Ev>
   d4102:	b90f      	cbnz	r7, d4108 <_Z18tinkerDigitalWrite6String+0x54>
   d4104:	e029      	b.n	d415a <_Z18tinkerDigitalWrite6String+0xa6>
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;

    if(command.substring(3,7) == "HIGH") value = 1;
   d4106:	2501      	movs	r5, #1
    else if(command.substring(3,6) == "LOW") value = 0;
    else return -2;

    if(command.startsWith("D"))
   d4108:	4919      	ldr	r1, [pc, #100]	; (d4170 <_Z18tinkerDigitalWrite6String+0xbc>)
   d410a:	4668      	mov	r0, sp
   d410c:	f001 f998 	bl	d5440 <_ZN6StringC1EPK19__FlashStringHelper>
   d4110:	4669      	mov	r1, sp
   d4112:	4630      	mov	r0, r6
   d4114:	f001 f9e9 	bl	d54ea <_ZNK6String10startsWithERKS_>
   d4118:	4607      	mov	r7, r0
   d411a:	4668      	mov	r0, sp
   d411c:	f001 f949 	bl	d53b2 <_ZN6StringD1Ev>
   d4120:	b96f      	cbnz	r7, d413e <_Z18tinkerDigitalWrite6String+0x8a>
    {
        pinMode(pinNumber, OUTPUT);
        digitalWrite(pinNumber, value);
        return 1;
    }
    else if(command.startsWith("A"))
   d4122:	4914      	ldr	r1, [pc, #80]	; (d4174 <_Z18tinkerDigitalWrite6String+0xc0>)
   d4124:	4668      	mov	r0, sp
   d4126:	f001 f98b 	bl	d5440 <_ZN6StringC1EPK19__FlashStringHelper>
   d412a:	4630      	mov	r0, r6
   d412c:	4669      	mov	r1, sp
   d412e:	f001 f9dc 	bl	d54ea <_ZNK6String10startsWithERKS_>
   d4132:	4606      	mov	r6, r0
   d4134:	4668      	mov	r0, sp
   d4136:	f001 f93c 	bl	d53b2 <_ZN6StringD1Ev>
   d413a:	b18e      	cbz	r6, d4160 <_Z18tinkerDigitalWrite6String+0xac>
    {
        pinMode(pinNumber+10, OUTPUT);
   d413c:	340a      	adds	r4, #10
   d413e:	b2a4      	uxth	r4, r4
   d4140:	2101      	movs	r1, #1
   d4142:	4620      	mov	r0, r4
   d4144:	f001 fc1c 	bl	d5980 <pinMode>
        digitalWrite(pinNumber+10, value);
   d4148:	4620      	mov	r0, r4
   d414a:	4629      	mov	r1, r5
   d414c:	f001 fc29 	bl	d59a2 <digitalWrite>
        return 1;
   d4150:	2001      	movs	r0, #1
   d4152:	e007      	b.n	d4164 <_Z18tinkerDigitalWrite6String+0xb0>
{
    bool value = 0;
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
   d4154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4158:	e004      	b.n	d4164 <_Z18tinkerDigitalWrite6String+0xb0>

    if(command.substring(3,7) == "HIGH") value = 1;
    else if(command.substring(3,6) == "LOW") value = 0;
    else return -2;
   d415a:	f06f 0001 	mvn.w	r0, #1
   d415e:	e001      	b.n	d4164 <_Z18tinkerDigitalWrite6String+0xb0>
        pinMode(pinNumber+30, OUTPUT);
        digitalWrite(pinNumber+30, value);
        return 1;
    }
#endif
    else return -3;
   d4160:	f06f 0002 	mvn.w	r0, #2
}
   d4164:	b005      	add	sp, #20
   d4166:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4168:	000d6860 	.word	0x000d6860
   d416c:	000d6865 	.word	0x000d6865
   d4170:	000d6869 	.word	0x000d6869
   d4174:	000d686b 	.word	0x000d686b

000d4178 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4178:	b510      	push	{r4, lr}
   d417a:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d417c:	6800      	ldr	r0, [r0, #0]
   d417e:	b108      	cbz	r0, d4184 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4180:	f000 fcae 	bl	d4ae0 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4184:	4620      	mov	r0, r4
   d4186:	bd10      	pop	{r4, pc}

000d4188 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData>:

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
   d4188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fData->voltageRMS = data->voltageRMS/10.0f;
   d418c:	8883      	ldrh	r3, [r0, #4]
   d418e:	ee07 3a90 	vmov	s15, r3
   d4192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4196:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d419a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
#endif
    else return -3;
}

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
   d419e:	4605      	mov	r5, r0
   d41a0:	460c      	mov	r4, r1
  // analogInputVoltage = RegData/1023.0 * 3.3;
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
   d41a2:	260e      	movs	r6, #14
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d41a4:	f04f 0a01 	mov.w	sl, #1
}

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
  fData->currentRMS = data->currentRMS/10000.0f;
   d41a8:	eddf 6a3f 	vldr	s13, [pc, #252]	; d42a8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x120>
    else return -3;
}

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
   d41ac:	ed81 7a01 	vstr	s14, [r1, #4]
  fData->currentRMS = data->currentRMS/10000.0f;
   d41b0:	edd0 7a03 	vldr	s15, [r0, #12]
   d41b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d41b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  fData->lineFrequency = data->lineFrequency/1000.0f;
   d41bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; d42ac <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x124>
}

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
  fData->currentRMS = data->currentRMS/10000.0f;
   d41c0:	ed81 7a05 	vstr	s14, [r1, #20]
  fData->lineFrequency = data->lineFrequency/1000.0f;
   d41c4:	88c3      	ldrh	r3, [r0, #6]
   d41c6:	ee07 3a90 	vmov	s15, r3
   d41ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d41ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d41d2:	ed81 7a02 	vstr	s14, [r1, #8]
  // Analog Input Voltage represents ADC data for 10 bit ADC
  // By trial, it's been found that it has a ref voltage of 3.3v
  // So the register value/1023 * 3.3v will give the analog input voltage in volts.
  // analogInputVoltage = RegData/1023.0 * 3.3;
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
   d41d6:	8903      	ldrh	r3, [r0, #8]
   d41d8:	ed9f 7a35 	vldr	s14, [pc, #212]	; d42b0 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x128>
   d41dc:	ee07 3a90 	vmov	s15, r3
   d41e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d41e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d41e8:	ee16 0a90 	vmov	r0, s13
   d41ec:	f001 ff20 	bl	d6030 <__aeabi_f2d>
   d41f0:	a32b      	add	r3, pc, #172	; (adr r3, d42a0 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x118>)
   d41f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41f6:	f001 ff6f 	bl	d60d8 <__aeabi_dmul>
   d41fa:	f002 fa65 	bl	d66c8 <__aeabi_d2f>
   d41fe:	60e0      	str	r0, [r4, #12]
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
   d4200:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
   d4204:	ea4f 70db 	mov.w	r0, fp, lsr #31
   d4208:	f001 ff00 	bl	d600c <__aeabi_i2d>
   d420c:	f002 fa5c 	bl	d66c8 <__aeabi_d2f>
   d4210:	f080 4700 	eor.w	r7, r0, #2147483648	; 0x80000000
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d4214:	fa0a f006 	lsl.w	r0, sl, r6
   d4218:	ea00 000b 	and.w	r0, r0, fp
   d421c:	4130      	asrs	r0, r6
   d421e:	f001 fef5 	bl	d600c <__aeabi_i2d>
   d4222:	4680      	mov	r8, r0
   d4224:	f1c6 000f 	rsb	r0, r6, #15
   d4228:	fa0a f000 	lsl.w	r0, sl, r0
   d422c:	4689      	mov	r9, r1
   d422e:	f001 feed 	bl	d600c <__aeabi_i2d>
   d4232:	4602      	mov	r2, r0
   d4234:	460b      	mov	r3, r1
   d4236:	4640      	mov	r0, r8
   d4238:	4649      	mov	r1, r9
   d423a:	f002 f877 	bl	d632c <__aeabi_ddiv>
   d423e:	4680      	mov	r8, r0
   d4240:	4638      	mov	r0, r7
   d4242:	4689      	mov	r9, r1
   d4244:	f001 fef4 	bl	d6030 <__aeabi_f2d>
   d4248:	4602      	mov	r2, r0
   d424a:	460b      	mov	r3, r1
   d424c:	4640      	mov	r0, r8
   d424e:	4649      	mov	r1, r9
   d4250:	f001 fd90 	bl	d5d74 <__adddf3>
   d4254:	f002 fa38 	bl	d66c8 <__aeabi_d2f>
   d4258:	3e01      	subs	r6, #1
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  for(ch=14; ch > 3; ch--)
   d425a:	2e03      	cmp	r6, #3
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d425c:	4607      	mov	r7, r0
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  for(ch=14; ch > 3; ch--)
   d425e:	d1d9      	bne.n	d4214 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x8c>
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
  fData->powerFactor = f;
   d4260:	6120      	str	r0, [r4, #16]
  fData->activePower = data->activePower/100.0f;
   d4262:	edd5 7a04 	vldr	s15, [r5, #16]
   d4266:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   d426a:	eddf 7a12 	vldr	s15, [pc, #72]	; d42b4 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x12c>
   d426e:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4272:	edc4 6a06 	vstr	s13, [r4, #24]
  fData->reactivePower = data->reactivePower/100.0f;
   d4276:	ed95 7a05 	vldr	s14, [r5, #20]
   d427a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d427e:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4282:	edc4 6a07 	vstr	s13, [r4, #28]
  fData->apparentPower = data->apparentPower/100.0f;
   d4286:	ed95 7a06 	vldr	s14, [r5, #24]
   d428a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d428e:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4292:	edc4 6a08 	vstr	s13, [r4, #32]
   d4296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d429a:	bf00      	nop
   d429c:	f3af 8000 	nop.w
   d42a0:	66666666 	.word	0x66666666
   d42a4:	400a6666 	.word	0x400a6666
   d42a8:	461c4000 	.word	0x461c4000
   d42ac:	447a0000 	.word	0x447a0000
   d42b0:	447fc000 	.word	0x447fc000
   d42b4:	42c80000 	.word	0x42c80000

000d42b8 <_Z18printMCP39F521DataP23MCP39F521_FormattedData>:
}

void printMCP39F521Data(MCP39F521_FormattedData *data)
{
   d42b8:	b510      	push	{r4, lr}
   d42ba:	4604      	mov	r4, r0
  Serial.print(F("Voltage = ")); Serial.println(data->voltageRMS, 4);
   d42bc:	f001 fa52 	bl	d5764 <_Z16_fetch_usbserialv>
   d42c0:	492f      	ldr	r1, [pc, #188]	; (d4380 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xc8>)
   d42c2:	f000 ff40 	bl	d5146 <_ZN5Print5printEPK19__FlashStringHelper>
   d42c6:	f001 fa4d 	bl	d5764 <_Z16_fetch_usbserialv>
   d42ca:	ed94 0a01 	vldr	s0, [r4, #4]
   d42ce:	2104      	movs	r1, #4
   d42d0:	f001 f833 	bl	d533a <_ZN5Print7printlnEfi>
  Serial.print(F("Current = ")); Serial.println(data->currentRMS, 4);
   d42d4:	f001 fa46 	bl	d5764 <_Z16_fetch_usbserialv>
   d42d8:	492a      	ldr	r1, [pc, #168]	; (d4384 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xcc>)
   d42da:	f000 ff34 	bl	d5146 <_ZN5Print5printEPK19__FlashStringHelper>
   d42de:	f001 fa41 	bl	d5764 <_Z16_fetch_usbserialv>
   d42e2:	ed94 0a05 	vldr	s0, [r4, #20]
   d42e6:	2104      	movs	r1, #4
   d42e8:	f001 f827 	bl	d533a <_ZN5Print7printlnEfi>
  Serial.print(F("Line Frequency = ")); Serial.println(data->lineFrequency, 4);
   d42ec:	f001 fa3a 	bl	d5764 <_Z16_fetch_usbserialv>
   d42f0:	4925      	ldr	r1, [pc, #148]	; (d4388 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xd0>)
   d42f2:	f000 ff28 	bl	d5146 <_ZN5Print5printEPK19__FlashStringHelper>
   d42f6:	f001 fa35 	bl	d5764 <_Z16_fetch_usbserialv>
   d42fa:	ed94 0a02 	vldr	s0, [r4, #8]
   d42fe:	2104      	movs	r1, #4
   d4300:	f001 f81b 	bl	d533a <_ZN5Print7printlnEfi>
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
   d4304:	f001 fa2e 	bl	d5764 <_Z16_fetch_usbserialv>
   d4308:	4920      	ldr	r1, [pc, #128]	; (d438c <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xd4>)
   d430a:	f000 ff15 	bl	d5138 <_ZN5Print5printEPKc>
   d430e:	f001 fa29 	bl	d5764 <_Z16_fetch_usbserialv>
   d4312:	ed94 0a03 	vldr	s0, [r4, #12]
   d4316:	2104      	movs	r1, #4
   d4318:	f001 f80f 	bl	d533a <_ZN5Print7printlnEfi>
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
   d431c:	f001 fa22 	bl	d5764 <_Z16_fetch_usbserialv>
   d4320:	491b      	ldr	r1, [pc, #108]	; (d4390 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xd8>)
   d4322:	f000 ff10 	bl	d5146 <_ZN5Print5printEPK19__FlashStringHelper>
   d4326:	f001 fa1d 	bl	d5764 <_Z16_fetch_usbserialv>
   d432a:	ed94 0a04 	vldr	s0, [r4, #16]
   d432e:	2104      	movs	r1, #4
   d4330:	f001 f803 	bl	d533a <_ZN5Print7printlnEfi>
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
   d4334:	f001 fa16 	bl	d5764 <_Z16_fetch_usbserialv>
   d4338:	4916      	ldr	r1, [pc, #88]	; (d4394 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xdc>)
   d433a:	f000 ff04 	bl	d5146 <_ZN5Print5printEPK19__FlashStringHelper>
   d433e:	f001 fa11 	bl	d5764 <_Z16_fetch_usbserialv>
   d4342:	ed94 0a06 	vldr	s0, [r4, #24]
   d4346:	2104      	movs	r1, #4
   d4348:	f000 fff7 	bl	d533a <_ZN5Print7printlnEfi>
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
   d434c:	f001 fa0a 	bl	d5764 <_Z16_fetch_usbserialv>
   d4350:	4911      	ldr	r1, [pc, #68]	; (d4398 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xe0>)
   d4352:	f000 fef8 	bl	d5146 <_ZN5Print5printEPK19__FlashStringHelper>
   d4356:	f001 fa05 	bl	d5764 <_Z16_fetch_usbserialv>
   d435a:	ed94 0a07 	vldr	s0, [r4, #28]
   d435e:	2104      	movs	r1, #4
   d4360:	f000 ffeb 	bl	d533a <_ZN5Print7printlnEfi>
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d4364:	f001 f9fe 	bl	d5764 <_Z16_fetch_usbserialv>
   d4368:	490c      	ldr	r1, [pc, #48]	; (d439c <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xe4>)
   d436a:	f000 feec 	bl	d5146 <_ZN5Print5printEPK19__FlashStringHelper>
   d436e:	f001 f9f9 	bl	d5764 <_Z16_fetch_usbserialv>
   d4372:	ed94 0a08 	vldr	s0, [r4, #32]
   d4376:	2104      	movs	r1, #4
}
   d4378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.print(F("Line Frequency = ")); Serial.println(data->lineFrequency, 4);
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d437c:	f000 bfdd 	b.w	d533a <_ZN5Print7printlnEfi>
   d4380:	000d6897 	.word	0x000d6897
   d4384:	000d686d 	.word	0x000d686d
   d4388:	000d6878 	.word	0x000d6878
   d438c:	000d688a 	.word	0x000d688a
   d4390:	000d68a2 	.word	0x000d68a2
   d4394:	000d68b2 	.word	0x000d68b2
   d4398:	000d68c2 	.word	0x000d68c2
   d439c:	000d68d4 	.word	0x000d68d4

000d43a0 <setup>:
    Serial.println(" fahrenheit)");
  }
}


void setup() {
   d43a0:	b508      	push	{r3, lr}
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d43a2:	4815      	ldr	r0, [pc, #84]	; (d43f8 <setup+0x58>)
   d43a4:	2300      	movs	r3, #0
   d43a6:	461a      	mov	r2, r3
   d43a8:	4619      	mov	r1, r3
   d43aa:	6840      	ldr	r0, [r0, #4]
   d43ac:	f000 fb68 	bl	d4a80 <network_off>
  WiFi.off();
  Serial.begin(115200);
   d43b0:	f001 f9d8 	bl	d5764 <_Z16_fetch_usbserialv>
   d43b4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d43b8:	f001 f9c8 	bl	d574c <_ZN9USBSerial5beginEl>
  pinMode(D7, OUTPUT);
   d43bc:	2101      	movs	r1, #1
   d43be:	2007      	movs	r0, #7
   d43c0:	f001 fade 	bl	d5980 <pinMode>
  digitalWrite(D7, HIGH);
   d43c4:	2101      	movs	r1, #1
   d43c6:	2007      	movs	r0, #7
   d43c8:	f001 faeb 	bl	d59a2 <digitalWrite>
  Wire.setSpeed(CLOCK_SPEED_100KHZ);
   d43cc:	f001 fb1c 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d43d0:	490a      	ldr	r1, [pc, #40]	; (d43fc <setup+0x5c>)
   d43d2:	f000 fc67 	bl	d4ca4 <_ZN7TwoWire8setSpeedEm>
  //Wire.stretchClock(true);
  Wire.begin();
   d43d6:	f001 fb17 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d43da:	f000 fc67 	bl	d4cac <_ZN7TwoWire5beginEv>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d43de:	4a08      	ldr	r2, [pc, #32]	; (d4400 <setup+0x60>)
   d43e0:	4908      	ldr	r1, [pc, #32]	; (d4404 <setup+0x64>)
   d43e2:	4809      	ldr	r0, [pc, #36]	; (d4408 <setup+0x68>)
   d43e4:	f000 fbcb 	bl	d4b7e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43e8:	f000 fb12 	bl	d4a10 <spark_cloud_flag_connected>
  Particle.function("digitalwrite", tinkerDigitalWrite);
  if (Particle.connected() == false) {
   d43ec:	b918      	cbnz	r0, d43f6 <setup+0x56>
    Particle.connect();
  }
}
   d43ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d43f2:	f000 bb05 	b.w	d4a00 <spark_cloud_flag_connect>
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	2003e710 	.word	0x2003e710
   d43fc:	000186a0 	.word	0x000186a0
   d4400:	000d692c 	.word	0x000d692c
   d4404:	000d40b5 	.word	0x000d40b5
   d4408:	000d4b53 	.word	0x000d4b53

000d440c <_ZN5Print7printlnIhLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d440c:	b538      	push	{r3, r4, r5, lr}
   d440e:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4410:	b91a      	cbnz	r2, d441a <_ZN5Print7printlnIhLi0EEEjT_i+0xe>
        return write(n);
   d4412:	6803      	ldr	r3, [r0, #0]
   d4414:	689b      	ldr	r3, [r3, #8]
   d4416:	4798      	blx	r3
   d4418:	e002      	b.n	d4420 <_ZN5Print7printlnIhLi0EEEjT_i+0x14>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d441a:	b2d2      	uxtb	r2, r2
   d441c:	f000 fea3 	bl	d5166 <_ZN5Print11printNumberEmh>
   d4420:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4422:	4628      	mov	r0, r5
   d4424:	f000 fe93 	bl	d514e <_ZN5Print7printlnEv>
        return n;
    }
   d4428:	4420      	add	r0, r4
   d442a:	bd38      	pop	{r3, r4, r5, pc}

000d442c <_Z10wireErrorsh>:
  }
  }
  return 0;
}

void wireErrors(uint8_t i2c_bus_Status){
   d442c:	b510      	push	{r4, lr}
  if(i2c_bus_Status == 0){
   d442e:	4604      	mov	r4, r0
   d4430:	b918      	cbnz	r0, d443a <_Z10wireErrorsh+0xe>
    Serial.print("I2C bus Status Success = "); Serial.println(i2c_bus_Status);
   d4432:	f001 f997 	bl	d5764 <_Z16_fetch_usbserialv>
   d4436:	4914      	ldr	r1, [pc, #80]	; (d4488 <_Z10wireErrorsh+0x5c>)
   d4438:	e01c      	b.n	d4474 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 1){
   d443a:	2801      	cmp	r0, #1
   d443c:	d103      	bne.n	d4446 <_Z10wireErrorsh+0x1a>
    Serial.print("Busy timeout upon entering endTransmission() = "); Serial.println(i2c_bus_Status);
   d443e:	f001 f991 	bl	d5764 <_Z16_fetch_usbserialv>
   d4442:	4912      	ldr	r1, [pc, #72]	; (d448c <_Z10wireErrorsh+0x60>)
   d4444:	e016      	b.n	d4474 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 2){
   d4446:	2802      	cmp	r0, #2
   d4448:	d103      	bne.n	d4452 <_Z10wireErrorsh+0x26>
    Serial.print("Start bit generation timeout = "); Serial.println(i2c_bus_Status);
   d444a:	f001 f98b 	bl	d5764 <_Z16_fetch_usbserialv>
   d444e:	4910      	ldr	r1, [pc, #64]	; (d4490 <_Z10wireErrorsh+0x64>)
   d4450:	e010      	b.n	d4474 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 3){
   d4452:	2803      	cmp	r0, #3
   d4454:	d103      	bne.n	d445e <_Z10wireErrorsh+0x32>
    Serial.print("end of address transmission timeout = "); Serial.println(i2c_bus_Status);
   d4456:	f001 f985 	bl	d5764 <_Z16_fetch_usbserialv>
   d445a:	490e      	ldr	r1, [pc, #56]	; (d4494 <_Z10wireErrorsh+0x68>)
   d445c:	e00a      	b.n	d4474 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 4){
   d445e:	2804      	cmp	r0, #4
   d4460:	d103      	bne.n	d446a <_Z10wireErrorsh+0x3e>
    Serial.print("Data byte transfer timeout = "); Serial.println(i2c_bus_Status);
   d4462:	f001 f97f 	bl	d5764 <_Z16_fetch_usbserialv>
   d4466:	490c      	ldr	r1, [pc, #48]	; (d4498 <_Z10wireErrorsh+0x6c>)
   d4468:	e004      	b.n	d4474 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 5){
   d446a:	2805      	cmp	r0, #5
   d446c:	d10a      	bne.n	d4484 <_Z10wireErrorsh+0x58>
    Serial.print("Data byte transfer succeeded, busy timeout immediately after = "); Serial.println(i2c_bus_Status);
   d446e:	f001 f979 	bl	d5764 <_Z16_fetch_usbserialv>
   d4472:	490a      	ldr	r1, [pc, #40]	; (d449c <_Z10wireErrorsh+0x70>)
   d4474:	f000 fe60 	bl	d5138 <_ZN5Print5printEPKc>
   d4478:	f001 f974 	bl	d5764 <_Z16_fetch_usbserialv>
   d447c:	220a      	movs	r2, #10
   d447e:	4621      	mov	r1, r4
   d4480:	f7ff ffc4 	bl	d440c <_ZN5Print7printlnIhLi0EEEjT_i>
   d4484:	bd10      	pop	{r4, pc}
   d4486:	bf00      	nop
   d4488:	000d6939 	.word	0x000d6939
   d448c:	000d6953 	.word	0x000d6953
   d4490:	000d6983 	.word	0x000d6983
   d4494:	000d69a3 	.word	0x000d69a3
   d4498:	000d69ca 	.word	0x000d69ca
   d449c:	000d69e8 	.word	0x000d69e8

000d44a0 <_Z13readMCP32f521iiiPhi>:
	float reactivePower;
	float apparentPower;
} MCP39F521_FormattedData;

int readMCP32f521(int addressHigh, int addressLow, int numBytesToRead, uint8_t *byteArray, int byteArraySize)
{
   d44a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d44a2:	461d      	mov	r5, r3
  uint8_t I2C_ADDRESS = 0x74;
  uint32_t checksumTotal = 0;
  uint8_t i2c_bus_Status = 0;
  uint8_t ReadDataBuf[8];
  int i;
  ReadDataBuf[0] = 0xA5; // Header
   d44a4:	23a5      	movs	r3, #165	; 0xa5
   d44a6:	f88d 3000 	strb.w	r3, [sp]
  ReadDataBuf[1] = 0x08; // Num bytes
   d44aa:	2308      	movs	r3, #8
   d44ac:	f88d 3001 	strb.w	r3, [sp, #1]
  ReadDataBuf[2] = 0x41; // Command - set address pointer
   d44b0:	2341      	movs	r3, #65	; 0x41
   d44b2:	f88d 3002 	strb.w	r3, [sp, #2]
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
   d44b6:	234e      	movs	r3, #78	; 0x4e
   d44b8:	f88d 3005 	strb.w	r3, [sp, #5]
  ReadDataBuf[6] = 0x20; 
   d44bc:	2320      	movs	r3, #32
   d44be:	f88d 3006 	strb.w	r3, [sp, #6]
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
   d44c2:	235e      	movs	r3, #94	; 0x5e
   d44c4:	f88d 3007 	strb.w	r3, [sp, #7]
  for(i = 0; i < 7; i++) {
   d44c8:	2300      	movs	r3, #0
  int i;
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
   d44ca:	f88d 1004 	strb.w	r1, [sp, #4]
	float reactivePower;
	float apparentPower;
} MCP39F521_FormattedData;

int readMCP32f521(int addressHigh, int addressLow, int numBytesToRead, uint8_t *byteArray, int byteArraySize)
{
   d44ce:	4617      	mov	r7, r2
  uint8_t ReadDataBuf[8];
  int i;
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = addressHigh;
   d44d0:	f88d 0003 	strb.w	r0, [sp, #3]

int readMCP32f521(int addressHigh, int addressLow, int numBytesToRead, uint8_t *byteArray, int byteArraySize)
{
  constexpr size_t I2C_BUFFER_SIZE = 32;
  uint8_t I2C_ADDRESS = 0x74;
  uint32_t checksumTotal = 0;
   d44d4:	4619      	mov	r1, r3
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
    checksumTotal += ReadDataBuf[i];
   d44d6:	f81d 2003 	ldrb.w	r2, [sp, r3]
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
   d44da:	3301      	adds	r3, #1
   d44dc:	2b07      	cmp	r3, #7
    checksumTotal += ReadDataBuf[i];
   d44de:	4411      	add	r1, r2
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
   d44e0:	d1f9      	bne.n	d44d6 <_Z13readMCP32f521iiiPhi+0x36>
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
   d44e2:	b2cc      	uxtb	r4, r1
   d44e4:	f88d 4007 	strb.w	r4, [sp, #7]
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7]);
   d44e8:	f001 f93c 	bl	d5764 <_Z16_fetch_usbserialv>
   d44ec:	492b      	ldr	r1, [pc, #172]	; (d459c <_Z13readMCP32f521iiiPhi+0xfc>)
   d44ee:	f000 fe23 	bl	d5138 <_ZN5Print5printEPKc>
   d44f2:	f001 f937 	bl	d5764 <_Z16_fetch_usbserialv>
   d44f6:	4621      	mov	r1, r4
   d44f8:	220a      	movs	r2, #10
   d44fa:	f7ff ff87 	bl	d440c <_ZN5Print7printlnIhLi0EEEjT_i>
  Wire.beginTransmission(I2C_ADDRESS);
   d44fe:	f001 fa83 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d4502:	2174      	movs	r1, #116	; 0x74
   d4504:	f000 fc09 	bl	d4d1a <_ZN7TwoWire17beginTransmissionEh>
  for(i= 0; i < 8; i++) {
   d4508:	2400      	movs	r4, #0
    Wire.write(ReadDataBuf[i]);
   d450a:	f001 fa7d 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d450e:	6803      	ldr	r3, [r0, #0]
   d4510:	f81d 1004 	ldrb.w	r1, [sp, r4]
   d4514:	689b      	ldr	r3, [r3, #8]
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7]);
  Wire.beginTransmission(I2C_ADDRESS);
  for(i= 0; i < 8; i++) {
   d4516:	3401      	adds	r4, #1
    Wire.write(ReadDataBuf[i]);
   d4518:	4798      	blx	r3
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7]);
  Wire.beginTransmission(I2C_ADDRESS);
  for(i= 0; i < 8; i++) {
   d451a:	2c08      	cmp	r4, #8
   d451c:	d1f5      	bne.n	d450a <_Z13readMCP32f521iiiPhi+0x6a>
    Wire.write(ReadDataBuf[i]);
  }
  i2c_bus_Status = Wire.endTransmission(true);
   d451e:	f001 fa73 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d4522:	2101      	movs	r1, #1
   d4524:	f000 fbfd 	bl	d4d22 <_ZN7TwoWire15endTransmissionEh>
  wireErrors(i2c_bus_Status);
   d4528:	f7ff ff80 	bl	d442c <_Z10wireErrorsh>
  delay(5);
   d452c:	2005      	movs	r0, #5
   d452e:	f000 fae7 	bl	d4b00 <delay>

  Wire.requestFrom(I2C_ADDRESS, (uint8_t)32); // request the bytes
   d4532:	f001 fa69 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d4536:	2220      	movs	r2, #32
   d4538:	2174      	movs	r1, #116	; 0x74
   d453a:	f000 fbeb 	bl	d4d14 <_ZN7TwoWire11requestFromEhj>
  size_t bytes_read = Wire.requestFrom(I2C_ADDRESS, I2C_BUFFER_SIZE);
   d453e:	f001 fa63 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d4542:	2220      	movs	r2, #32
   d4544:	2174      	movs	r1, #116	; 0x74
   d4546:	f000 fbe5 	bl	d4d14 <_ZN7TwoWire11requestFromEhj>
  //uint8_t baseline[I2C_BUFFER_SIZE];
  if ( bytes_read == I2C_BUFFER_SIZE ) {
   d454a:	2820      	cmp	r0, #32
   d454c:	d121      	bne.n	d4592 <_Z13readMCP32f521iiiPhi+0xf2>
    int requestDataLength = Wire.available();
   d454e:	f001 fa5b 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d4552:	6803      	ldr	r3, [r0, #0]
   d4554:	691b      	ldr	r3, [r3, #16]
   d4556:	4798      	blx	r3
    if (requestDataLength==(numBytesToRead + 3)) {
   d4558:	3703      	adds	r7, #3
   d455a:	42b8      	cmp	r0, r7

  Wire.requestFrom(I2C_ADDRESS, (uint8_t)32); // request the bytes
  size_t bytes_read = Wire.requestFrom(I2C_ADDRESS, I2C_BUFFER_SIZE);
  //uint8_t baseline[I2C_BUFFER_SIZE];
  if ( bytes_read == I2C_BUFFER_SIZE ) {
    int requestDataLength = Wire.available();
   d455c:	4606      	mov	r6, r0
    if (requestDataLength==(numBytesToRead + 3)) {
   d455e:	d11a      	bne.n	d4596 <_Z13readMCP32f521iiiPhi+0xf6>
   d4560:	182c      	adds	r4, r5, r0
   d4562:	2500      	movs	r5, #0
      for (i = 0; i < requestDataLength ; i++) {
   d4564:	42b5      	cmp	r5, r6
   d4566:	da14      	bge.n	d4592 <_Z13readMCP32f521iiiPhi+0xf2>
        byteArray[requestDataLength - i] = Wire.read();
   d4568:	f001 fa4e 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d456c:	6803      	ldr	r3, [r0, #0]
   d456e:	695b      	ldr	r3, [r3, #20]
   d4570:	4798      	blx	r3
   d4572:	4627      	mov	r7, r4
   d4574:	f804 0901 	strb.w	r0, [r4], #-1
        Serial.print(byteArray[requestDataLength - i], HEX); Serial.print(" ");
   d4578:	f001 f8f4 	bl	d5764 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d457c:	2210      	movs	r2, #16
   d457e:	7839      	ldrb	r1, [r7, #0]
   d4580:	f000 fdf1 	bl	d5166 <_ZN5Print11printNumberEmh>
   d4584:	f001 f8ee 	bl	d5764 <_Z16_fetch_usbserialv>
   d4588:	4905      	ldr	r1, [pc, #20]	; (d45a0 <_Z13readMCP32f521iiiPhi+0x100>)
   d458a:	f000 fdd5 	bl	d5138 <_ZN5Print5printEPKc>
  size_t bytes_read = Wire.requestFrom(I2C_ADDRESS, I2C_BUFFER_SIZE);
  //uint8_t baseline[I2C_BUFFER_SIZE];
  if ( bytes_read == I2C_BUFFER_SIZE ) {
    int requestDataLength = Wire.available();
    if (requestDataLength==(numBytesToRead + 3)) {
      for (i = 0; i < requestDataLength ; i++) {
   d458e:	3501      	adds	r5, #1
   d4590:	e7e8      	b.n	d4564 <_Z13readMCP32f521iiiPhi+0xc4>
    }else {
    // Unexpected. Handle error  
    return 5; 
  }
  }
  return 0;
   d4592:	2000      	movs	r0, #0
   d4594:	e000      	b.n	d4598 <_Z13readMCP32f521iiiPhi+0xf8>
        byteArray[requestDataLength - i] = Wire.read();
        Serial.print(byteArray[requestDataLength - i], HEX); Serial.print(" ");
      }
    }else {
    // Unexpected. Handle error  
    return 5; 
   d4596:	2005      	movs	r0, #5
  }
  }
  return 0;
}
   d4598:	b003      	add	sp, #12
   d459a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d459c:	000d6a28 	.word	0x000d6a28
   d45a0:	000d6b31 	.word	0x000d6b31

000d45a4 <loop>:
    Particle.connect();
  }
}

void loop() 
{ 
   d45a4:	b530      	push	{r4, r5, lr}
   d45a6:	b09d      	sub	sp, #116	; 0x74
  MCP39F521_Data data;
  MCP39F521_FormattedData fData;
  uint8_t byteArray[35];
  int reVal = readMCP32f521(0x00, 0x02, 28, byteArray, 35);
   d45a8:	2323      	movs	r3, #35	; 0x23
   d45aa:	221c      	movs	r2, #28
   d45ac:	2102      	movs	r1, #2
   d45ae:	9300      	str	r3, [sp, #0]
   d45b0:	2000      	movs	r0, #0
   d45b2:	ab0a      	add	r3, sp, #40	; 0x28
   d45b4:	f7ff ff74 	bl	d44a0 <_Z13readMCP32f521iiiPhi>
   d45b8:	4604      	mov	r4, r0
  Serial.print("reVal:"); Serial.println(reVal); 
   d45ba:	f001 f8d3 	bl	d5764 <_Z16_fetch_usbserialv>
   d45be:	492f      	ldr	r1, [pc, #188]	; (d467c <loop+0xd8>)
   d45c0:	f000 fdba 	bl	d5138 <_ZN5Print5printEPKc>
   d45c4:	f001 f8ce 	bl	d5764 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d45c8:	2c00      	cmp	r4, #0
   d45ca:	4605      	mov	r5, r0
   d45cc:	da04      	bge.n	d45d8 <loop+0x34>
            t = print('-');
   d45ce:	212d      	movs	r1, #45	; 0x2d
   d45d0:	f000 fdb6 	bl	d5140 <_ZN5Print5printEc>
            val = -n;
   d45d4:	4261      	negs	r1, r4
   d45d6:	e000      	b.n	d45da <loop+0x36>
        } else {
            val = n;
   d45d8:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d45da:	220a      	movs	r2, #10
   d45dc:	4628      	mov	r0, r5
   d45de:	f000 fdc2 	bl	d5166 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d45e2:	4628      	mov	r0, r5
   d45e4:	f000 fdb3 	bl	d514e <_ZN5Print7printlnEv>
  data.systemStatus = ((byteArray[3] << 8) | byteArray[2]);
   d45e8:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
   d45ec:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   d45f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d45f4:	f8ad 300c 	strh.w	r3, [sp, #12]
  data.systemVersion = ((byteArray[5] << 8) | byteArray[4]);
   d45f8:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   d45fc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   d4600:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4604:	f8ad 300e 	strh.w	r3, [sp, #14]
  data.voltageRMS = ((byteArray[7] << 8) | byteArray[6]);
   d4608:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   d460c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   d4610:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4614:	f8ad 3010 	strh.w	r3, [sp, #16]
  data.lineFrequency = ((byteArray[9] << 8) | byteArray[8]);
   d4618:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   d461c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d4620:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4624:	f8ad 3012 	strh.w	r3, [sp, #18]
  data.analogInputVoltage = ((byteArray[11] << 8) | byteArray[10]);
   d4628:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
   d462c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   d4630:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4634:	f8ad 3014 	strh.w	r3, [sp, #20]
  data.powerFactor = (((signed char)byteArray[13] << 8) +
                          (unsigned char)byteArray[12]);
   d4638:	f99d 2035 	ldrsb.w	r2, [sp, #53]	; 0x35
   d463c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   d4640:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4644:	f8ad 3016 	strh.w	r3, [sp, #22]
  data.currentRMS =      ((uint32_t)(byteArray[17]) << 24 |
                            (uint32_t)(byteArray[16]) << 16 |
                            (uint32_t)(byteArray[15]) << 8 |
   d4648:	f8dd 3036 	ldr.w	r3, [sp, #54]	; 0x36
                            byteArray[14]);
   d464c:	9306      	str	r3, [sp, #24]
  data.activePower =     ((uint32_t)(byteArray[21]) << 24 |
                            (uint32_t)(byteArray[20]) << 16 |
                            (uint32_t)(byteArray[19]) << 8 |
   d464e:	f8dd 303a 	ldr.w	r3, [sp, #58]	; 0x3a
                            byteArray[18]);
   d4652:	9307      	str	r3, [sp, #28]
  data.reactivePower =   ((uint32_t)(byteArray[25]) << 24 |
                            (uint32_t)(byteArray[24]) << 16 |
                            (uint32_t)(byteArray[23]) << 8 |
   d4654:	f8dd 303e 	ldr.w	r3, [sp, #62]	; 0x3e
                            byteArray[22]);
   d4658:	9308      	str	r3, [sp, #32]
  data.apparentPower =   ((uint32_t)(byteArray[29]) << 24 |
                            (uint32_t)(byteArray[28]) << 16 |
                            (uint32_t)(byteArray[27]) << 8 |
                            byteArray[26]);
  convertdata(&data, &fData);
   d465a:	a913      	add	r1, sp, #76	; 0x4c
                            (uint32_t)(byteArray[24]) << 16 |
                            (uint32_t)(byteArray[23]) << 8 |
                            byteArray[22]);
  data.apparentPower =   ((uint32_t)(byteArray[29]) << 24 |
                            (uint32_t)(byteArray[28]) << 16 |
                            (uint32_t)(byteArray[27]) << 8 |
   d465c:	f8dd 3042 	ldr.w	r3, [sp, #66]	; 0x42
                            byteArray[26]);
   d4660:	9309      	str	r3, [sp, #36]	; 0x24
  convertdata(&data, &fData);
   d4662:	a803      	add	r0, sp, #12
   d4664:	f7ff fd90 	bl	d4188 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData>
  printMCP39F521Data(&fData);
   d4668:	a813      	add	r0, sp, #76	; 0x4c
   d466a:	f7ff fe25 	bl	d42b8 <_Z18printMCP39F521DataP23MCP39F521_FormattedData>
  //LM75A_TEMP_READING();
  delay(1000);
   d466e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4672:	f000 fa45 	bl	d4b00 <delay>
   d4676:	b01d      	add	sp, #116	; 0x74
   d4678:	bd30      	pop	{r4, r5, pc}
   d467a:	bf00      	nop
   d467c:	000d6a34 	.word	0x000d6a34

000d4680 <_GLOBAL__sub_I_SystemMode>:
   d4680:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4682:	4c0d      	ldr	r4, [pc, #52]	; (d46b8 <_GLOBAL__sub_I_SystemMode+0x38>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4684:	f000 f870 	bl	d4768 <HAL_Pin_Map>
   d4688:	2500      	movs	r5, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d468a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d468e:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4690:	8163      	strh	r3, [r4, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4692:	6025      	str	r5, [r4, #0]
   d4694:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4696:	71a5      	strb	r5, [r4, #6]
   d4698:	8125      	strh	r5, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d469a:	f000 f985 	bl	d49a8 <set_system_mode>

#include "Wire.h"
#include "particle.h"
#include <LM75A.h>

SYSTEM_MODE(SEMI_AUTOMATIC)
   d469e:	4a07      	ldr	r2, [pc, #28]	; (d46bc <_GLOBAL__sub_I_SystemMode+0x3c>)
   d46a0:	4907      	ldr	r1, [pc, #28]	; (d46c0 <_GLOBAL__sub_I_SystemMode+0x40>)
   d46a2:	4620      	mov	r0, r4
   d46a4:	f001 f9f6 	bl	d5a94 <__aeabi_atexit>

int tinkerDigitalWrite(String command);

// Create I2C LM75A instance
LM75A lm75a_sensor(false, false, false); //A1, A2, A3 LM75A pin state for I2C address 
   d46a8:	462b      	mov	r3, r5
   d46aa:	462a      	mov	r2, r5
   d46ac:	4629      	mov	r1, r5
   d46ae:	4805      	ldr	r0, [pc, #20]	; (d46c4 <_GLOBAL__sub_I_SystemMode+0x44>)
                            byteArray[26]);
  convertdata(&data, &fData);
  printMCP39F521Data(&fData);
  //LM75A_TEMP_READING();
  delay(1000);
   d46b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_MODE(SEMI_AUTOMATIC)

int tinkerDigitalWrite(String command);

// Create I2C LM75A instance
LM75A lm75a_sensor(false, false, false); //A1, A2, A3 LM75A pin state for I2C address 
   d46b4:	f000 b808 	b.w	d46c8 <_ZN5LM75AC1Ebbb>
   d46b8:	2003e3bc 	.word	0x2003e3bc
   d46bc:	2003e3b8 	.word	0x2003e3b8
   d46c0:	000d4179 	.word	0x000d4179
   d46c4:	2003e3c8 	.word	0x2003e3c8

000d46c8 <_ZN5LM75AC1Ebbb>:

}

using namespace LM75AConstValues;

LM75A::LM75A(bool A0_value, bool A1_value, bool A2_value)
   d46c8:	b510      	push	{r4, lr}
   d46ca:	4604      	mov	r4, r0
{
  _i2c_device_address = LM75A_BASE_ADDRESS;

  if (A0_value) {
   d46cc:	b909      	cbnz	r1, d46d2 <_ZN5LM75AC1Ebbb+0xa>

using namespace LM75AConstValues;

LM75A::LM75A(bool A0_value, bool A1_value, bool A2_value)
{
  _i2c_device_address = LM75A_BASE_ADDRESS;
   d46ce:	2148      	movs	r1, #72	; 0x48
   d46d0:	e000      	b.n	d46d4 <_ZN5LM75AC1Ebbb+0xc>

  if (A0_value) {
    _i2c_device_address += 1;
   d46d2:	2149      	movs	r1, #73	; 0x49
   d46d4:	6021      	str	r1, [r4, #0]
  }

  if (A1_value) {
   d46d6:	b112      	cbz	r2, d46de <_ZN5LM75AC1Ebbb+0x16>
    _i2c_device_address += 2;
   d46d8:	6822      	ldr	r2, [r4, #0]
   d46da:	3202      	adds	r2, #2
   d46dc:	6022      	str	r2, [r4, #0]
  }

  if (A2_value) {
   d46de:	b113      	cbz	r3, d46e6 <_ZN5LM75AC1Ebbb+0x1e>
    _i2c_device_address += 4;
   d46e0:	6823      	ldr	r3, [r4, #0]
   d46e2:	3304      	adds	r3, #4
   d46e4:	6023      	str	r3, [r4, #0]
  }

  Wire.begin();
   d46e6:	f001 f98f 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d46ea:	f000 fadf 	bl	d4cac <_ZN7TwoWire5beginEv>
}
   d46ee:	4620      	mov	r0, r4
   d46f0:	bd10      	pop	{r4, pc}

000d46f2 <_GLOBAL__sub_I__ZN5LM75AC2Ebbb>:
   d46f2:	f000 b839 	b.w	d4768 <HAL_Pin_Map>
	...

000d46f8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <os_thread_is_current+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	689b      	ldr	r3, [r3, #8]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030248 	.word	0x00030248

000d4708 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <os_thread_join+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	691b      	ldr	r3, [r3, #16]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030248 	.word	0x00030248

000d4718 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <os_thread_cleanup+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	695b      	ldr	r3, [r3, #20]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030248 	.word	0x00030248

000d4728 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <os_mutex_recursive_create+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030248 	.word	0x00030248

000d4738 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <os_mutex_recursive_destroy+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030248 	.word	0x00030248

000d4748 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <HAL_RNG_GetRandomNumber+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	685b      	ldr	r3, [r3, #4]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030218 	.word	0x00030218

000d4758 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	695b      	ldr	r3, [r3, #20]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030218 	.word	0x00030218

000d4768 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <HAL_Pin_Map+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	681b      	ldr	r3, [r3, #0]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003022c 	.word	0x0003022c

000d4778 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <HAL_Pin_Mode+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	689b      	ldr	r3, [r3, #8]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003022c 	.word	0x0003022c

000d4788 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <HAL_Get_Pin_Mode+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	68db      	ldr	r3, [r3, #12]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	0003022c 	.word	0x0003022c

000d4798 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <HAL_GPIO_Write+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	691b      	ldr	r3, [r3, #16]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	0003022c 	.word	0x0003022c

000d47a8 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_I2C_Set_Speed+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	681b      	ldr	r3, [r3, #0]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030228 	.word	0x00030228

000d47b8 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_I2C_Begin+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	68db      	ldr	r3, [r3, #12]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030228 	.word	0x00030228

000d47c8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_I2C_Begin_Transmission+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	699b      	ldr	r3, [r3, #24]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030228 	.word	0x00030228

000d47d8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_I2C_End_Transmission+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	69db      	ldr	r3, [r3, #28]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030228 	.word	0x00030228

000d47e8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <HAL_I2C_Write_Data+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	6a1b      	ldr	r3, [r3, #32]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030228 	.word	0x00030228

000d47f8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <HAL_I2C_Available_Data+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030228 	.word	0x00030228

000d4808 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_I2C_Read_Data+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030228 	.word	0x00030228

000d4818 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_I2C_Peek_Data+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030228 	.word	0x00030228

000d4828 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_I2C_Flush_Data+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030228 	.word	0x00030228

000d4838 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_I2C_Is_Enabled+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030228 	.word	0x00030228

000d4848 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_I2C_Init+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030228 	.word	0x00030228

000d4858 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_I2C_Request_Data_Ex+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030228 	.word	0x00030228

000d4868 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <inet_inet_ntop+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	695b      	ldr	r3, [r3, #20]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030264 	.word	0x00030264

000d4878 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <netdb_freeaddrinfo+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	689b      	ldr	r3, [r3, #8]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030268 	.word	0x00030268

000d4888 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <netdb_getaddrinfo+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	68db      	ldr	r3, [r3, #12]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030268 	.word	0x00030268

000d4898 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_SPI_Init+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	69db      	ldr	r3, [r3, #28]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030230 	.word	0x00030230

000d48a8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_SPI_Is_Enabled+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	6a1b      	ldr	r3, [r3, #32]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030230 	.word	0x00030230

000d48b8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_USART_Init+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	681b      	ldr	r3, [r3, #0]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	0003023c 	.word	0x0003023c

000d48c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_USART_Write_Data+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	68db      	ldr	r3, [r3, #12]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	0003023c 	.word	0x0003023c

000d48d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_USART_Available_Data+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	691b      	ldr	r3, [r3, #16]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	0003023c 	.word	0x0003023c

000d48e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_USART_Read_Data+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	695b      	ldr	r3, [r3, #20]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	0003023c 	.word	0x0003023c

000d48f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_USART_Peek_Data+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	699b      	ldr	r3, [r3, #24]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	0003023c 	.word	0x0003023c

000d4908 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <HAL_USART_Flush_Data+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	69db      	ldr	r3, [r3, #28]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	0003023c 	.word	0x0003023c

000d4918 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_USART_Is_Enabled+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6a1b      	ldr	r3, [r3, #32]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	0003023c 	.word	0x0003023c

000d4928 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_USART_Available_Data_For_Write+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	0003023c 	.word	0x0003023c

000d4938 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_USB_USART_Init+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	681b      	ldr	r3, [r3, #0]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	0003024c 	.word	0x0003024c

000d4948 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_USB_USART_Begin+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	685b      	ldr	r3, [r3, #4]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	0003024c 	.word	0x0003024c

000d4958 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <HAL_USB_USART_Available_Data+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	691b      	ldr	r3, [r3, #16]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	0003024c 	.word	0x0003024c

000d4968 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	695b      	ldr	r3, [r3, #20]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	0003024c 	.word	0x0003024c

000d4978 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <HAL_USB_USART_Receive_Data+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	699b      	ldr	r3, [r3, #24]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003024c 	.word	0x0003024c

000d4988 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_USB_USART_Send_Data+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	69db      	ldr	r3, [r3, #28]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003024c 	.word	0x0003024c

000d4998 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_USB_USART_Flush_Data+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6a1b      	ldr	r3, [r3, #32]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003024c 	.word	0x0003024c

000d49a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <set_system_mode+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	685b      	ldr	r3, [r3, #4]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030220 	.word	0x00030220

000d49b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <system_delay_ms+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	695b      	ldr	r3, [r3, #20]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030220 	.word	0x00030220

000d49c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b03      	ldr	r3, [pc, #12]	; (d49d8 <system_ctrl_set_app_request_handler+0x10>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d49d2:	9301      	str	r3, [sp, #4]
   d49d4:	bd08      	pop	{r3, pc}
   d49d6:	0000      	.short	0x0000
   d49d8:	00030220 	.word	0x00030220

000d49dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b03      	ldr	r3, [pc, #12]	; (d49ec <system_ctrl_set_result+0x10>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49e6:	9301      	str	r3, [sp, #4]
   d49e8:	bd08      	pop	{r3, pc}
   d49ea:	0000      	.short	0x0000
   d49ec:	00030220 	.word	0x00030220

000d49f0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <spark_function+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	685b      	ldr	r3, [r3, #4]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030244 	.word	0x00030244

000d4a00 <spark_cloud_flag_connect>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <spark_cloud_flag_connect+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	68db      	ldr	r3, [r3, #12]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030244 	.word	0x00030244

000d4a10 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <spark_cloud_flag_connected+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	695b      	ldr	r3, [r3, #20]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030244 	.word	0x00030244

000d4a20 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030244 	.word	0x00030244

000d4a30 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <network_connect+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	685b      	ldr	r3, [r3, #4]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030240 	.word	0x00030240

000d4a40 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_connecting+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	689b      	ldr	r3, [r3, #8]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <network_disconnect+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	68db      	ldr	r3, [r3, #12]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030240 	.word	0x00030240

000d4a60 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <network_ready+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	691b      	ldr	r3, [r3, #16]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030240 	.word	0x00030240

000d4a70 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <network_on+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	695b      	ldr	r3, [r3, #20]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030240 	.word	0x00030240

000d4a80 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <network_off+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	699b      	ldr	r3, [r3, #24]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030240 	.word	0x00030240

000d4a90 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <network_listen+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	69db      	ldr	r3, [r3, #28]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030240 	.word	0x00030240

000d4aa0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <network_listening+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6a1b      	ldr	r3, [r3, #32]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030240 	.word	0x00030240

000d4ab0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <network_set_listen_timeout+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030240 	.word	0x00030240

000d4ac0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <network_get_listen_timeout+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030240 	.word	0x00030240

000d4ad0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <malloc+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	681b      	ldr	r3, [r3, #0]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003021c 	.word	0x0003021c

000d4ae0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <free+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	685b      	ldr	r3, [r3, #4]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003021c 	.word	0x0003021c

000d4af0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <realloc+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	689b      	ldr	r3, [r3, #8]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003021c 	.word	0x0003021c

000d4b00 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b00:	2100      	movs	r1, #0
   d4b02:	f7ff bf59 	b.w	d49b8 <system_delay_ms>

000d4b06 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4b06:	b510      	push	{r4, lr}
   d4b08:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b0a:	6800      	ldr	r0, [r0, #0]
   d4b0c:	b108      	cbz	r0, d4b12 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4b0e:	f7ff fe13 	bl	d4738 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4b12:	4620      	mov	r0, r4
   d4b14:	bd10      	pop	{r4, pc}
	...

000d4b18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b18:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b1a:	4c06      	ldr	r4, [pc, #24]	; (d4b34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4b1c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4b1e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b20:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4b22:	f7ff fe01 	bl	d4728 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4b26:	4620      	mov	r0, r4
   d4b28:	4a03      	ldr	r2, [pc, #12]	; (d4b38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4b2a:	4904      	ldr	r1, [pc, #16]	; (d4b3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4b30:	f000 bfb0 	b.w	d5a94 <__aeabi_atexit>
   d4b34:	2003e3cc 	.word	0x2003e3cc
   d4b38:	2003e3b8 	.word	0x2003e3b8
   d4b3c:	000d4b07 	.word	0x000d4b07

000d4b40 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b40:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b42:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b44:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4b46:	b113      	cbz	r3, d4b4e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b48:	2203      	movs	r2, #3
   d4b4a:	4601      	mov	r1, r0
   d4b4c:	4798      	blx	r3
    }
   d4b4e:	4620      	mov	r0, r4
   d4b50:	bd10      	pop	{r4, pc}

000d4b52 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4b52:	b510      	push	{r4, lr}
   d4b54:	b088      	sub	sp, #32
   d4b56:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4b58:	4668      	mov	r0, sp
   d4b5a:	f000 fc71 	bl	d5440 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4b5e:	4669      	mov	r1, sp
   d4b60:	a804      	add	r0, sp, #16
   d4b62:	f000 fc8f 	bl	d5484 <_ZN6StringC1ERKS_>
   d4b66:	a804      	add	r0, sp, #16
   d4b68:	47a0      	blx	r4
   d4b6a:	4604      	mov	r4, r0
   d4b6c:	a804      	add	r0, sp, #16
   d4b6e:	f000 fc20 	bl	d53b2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4b72:	4668      	mov	r0, sp
   d4b74:	f000 fc1d 	bl	d53b2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4b78:	4620      	mov	r0, r4
   d4b7a:	b008      	add	sp, #32
   d4b7c:	bd10      	pop	{r4, pc}

000d4b7e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4b80:	2410      	movs	r4, #16
   d4b82:	b085      	sub	sp, #20
   d4b84:	4607      	mov	r7, r0
   d4b86:	460e      	mov	r6, r1
   d4b88:	4615      	mov	r5, r2
   d4b8a:	2100      	movs	r1, #0
   d4b8c:	4622      	mov	r2, r4
   d4b8e:	4668      	mov	r0, sp
   d4b90:	f001 fe03 	bl	d679a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4b94:	2200      	movs	r2, #0
   d4b96:	4669      	mov	r1, sp
   d4b98:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4b9a:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4b9e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4ba0:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4ba2:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4ba4:	f7ff ff24 	bl	d49f0 <spark_function>
}
   d4ba8:	b005      	add	sp, #20
   d4baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4bac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4bac:	2200      	movs	r2, #0
   d4bae:	4611      	mov	r1, r2
   d4bb0:	6840      	ldr	r0, [r0, #4]
   d4bb2:	f7ff bf75 	b.w	d4aa0 <network_listening>

000d4bb6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4bb6:	2200      	movs	r2, #0
   d4bb8:	4611      	mov	r1, r2
   d4bba:	6840      	ldr	r0, [r0, #4]
   d4bbc:	f7ff bf80 	b.w	d4ac0 <network_get_listen_timeout>

000d4bc0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4bc0:	2200      	movs	r2, #0
   d4bc2:	6840      	ldr	r0, [r0, #4]
   d4bc4:	f7ff bf74 	b.w	d4ab0 <network_set_listen_timeout>

000d4bc8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4bc8:	2200      	movs	r2, #0
   d4bca:	f081 0101 	eor.w	r1, r1, #1
   d4bce:	6840      	ldr	r0, [r0, #4]
   d4bd0:	f7ff bf5e 	b.w	d4a90 <network_listen>

000d4bd4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4bd4:	2300      	movs	r3, #0
   d4bd6:	461a      	mov	r2, r3
   d4bd8:	4619      	mov	r1, r3
   d4bda:	6840      	ldr	r0, [r0, #4]
   d4bdc:	f7ff bf50 	b.w	d4a80 <network_off>

000d4be0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4be0:	2300      	movs	r3, #0
   d4be2:	461a      	mov	r2, r3
   d4be4:	4619      	mov	r1, r3
   d4be6:	6840      	ldr	r0, [r0, #4]
   d4be8:	f7ff bf42 	b.w	d4a70 <network_on>

000d4bec <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4bec:	2200      	movs	r2, #0
   d4bee:	4611      	mov	r1, r2
   d4bf0:	6840      	ldr	r0, [r0, #4]
   d4bf2:	f7ff bf35 	b.w	d4a60 <network_ready>

000d4bf6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4bf6:	2200      	movs	r2, #0
   d4bf8:	4611      	mov	r1, r2
   d4bfa:	6840      	ldr	r0, [r0, #4]
   d4bfc:	f7ff bf20 	b.w	d4a40 <network_connecting>

000d4c00 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c00:	2200      	movs	r2, #0
   d4c02:	2102      	movs	r1, #2
   d4c04:	6840      	ldr	r0, [r0, #4]
   d4c06:	f7ff bf23 	b.w	d4a50 <network_disconnect>

000d4c0a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c0a:	2300      	movs	r3, #0
   d4c0c:	461a      	mov	r2, r3
   d4c0e:	6840      	ldr	r0, [r0, #4]
   d4c10:	f7ff bf0e 	b.w	d4a30 <network_connect>

000d4c14 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4c14:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4c16:	2203      	movs	r2, #3
   d4c18:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4c1a:	4a02      	ldr	r2, [pc, #8]	; (d4c24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4c1c:	601a      	str	r2, [r3, #0]
   d4c1e:	4770      	bx	lr
   d4c20:	2003e3d0 	.word	0x2003e3d0
   d4c24:	000d6a44 	.word	0x000d6a44

000d4c28 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4c28:	4770      	bx	lr

000d4c2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c2c:	4606      	mov	r6, r0
   d4c2e:	4615      	mov	r5, r2
   d4c30:	460c      	mov	r4, r1
   d4c32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c34:	42bc      	cmp	r4, r7
   d4c36:	d006      	beq.n	d4c46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4c38:	6833      	ldr	r3, [r6, #0]
   d4c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4c3e:	689b      	ldr	r3, [r3, #8]
   d4c40:	4630      	mov	r0, r6
   d4c42:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c44:	e7f6      	b.n	d4c34 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4c46:	4628      	mov	r0, r5
   d4c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c4a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4c4a:	2200      	movs	r2, #0
   d4c4c:	7c00      	ldrb	r0, [r0, #16]
   d4c4e:	f7ff bdcb 	b.w	d47e8 <HAL_I2C_Write_Data>

000d4c52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4c52:	2100      	movs	r1, #0
   d4c54:	7c00      	ldrb	r0, [r0, #16]
   d4c56:	f7ff bdcf 	b.w	d47f8 <HAL_I2C_Available_Data>

000d4c5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4c5a:	2100      	movs	r1, #0
   d4c5c:	7c00      	ldrb	r0, [r0, #16]
   d4c5e:	f7ff bdd3 	b.w	d4808 <HAL_I2C_Read_Data>

000d4c62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4c62:	2100      	movs	r1, #0
   d4c64:	7c00      	ldrb	r0, [r0, #16]
   d4c66:	f7ff bdd7 	b.w	d4818 <HAL_I2C_Peek_Data>

000d4c6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4c6a:	2100      	movs	r1, #0
   d4c6c:	7c00      	ldrb	r0, [r0, #16]
   d4c6e:	f7ff bddb 	b.w	d4828 <HAL_I2C_Flush_Data>

000d4c72 <_ZN7TwoWireD0Ev>:
   d4c72:	b510      	push	{r4, lr}
   d4c74:	2114      	movs	r1, #20
   d4c76:	4604      	mov	r4, r0
   d4c78:	f000 ff11 	bl	d5a9e <_ZdlPvj>
   d4c7c:	4620      	mov	r0, r4
   d4c7e:	bd10      	pop	{r4, pc}

000d4c80 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4c80:	b510      	push	{r4, lr}
   d4c82:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c84:	2300      	movs	r3, #0
   d4c86:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c8c:	60a3      	str	r3, [r4, #8]
   d4c8e:	4b04      	ldr	r3, [pc, #16]	; (d4ca0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4c90:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4c92:	4608      	mov	r0, r1
   d4c94:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4c96:	4611      	mov	r1, r2
   d4c98:	f7ff fdd6 	bl	d4848 <HAL_I2C_Init>
}
   d4c9c:	4620      	mov	r0, r4
   d4c9e:	bd10      	pop	{r4, pc}
   d4ca0:	000d6a78 	.word	0x000d6a78

000d4ca4 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d4ca4:	2200      	movs	r2, #0
   d4ca6:	7c00      	ldrb	r0, [r0, #16]
   d4ca8:	f7ff bd7e 	b.w	d47a8 <HAL_I2C_Set_Speed>

000d4cac <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4cac:	2300      	movs	r3, #0
   d4cae:	461a      	mov	r2, r3
   d4cb0:	4619      	mov	r1, r3
   d4cb2:	7c00      	ldrb	r0, [r0, #16]
   d4cb4:	f7ff bd80 	b.w	d47b8 <HAL_I2C_Begin>

000d4cb8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4cb8:	b570      	push	{r4, r5, r6, lr}
   d4cba:	460c      	mov	r4, r1
   d4cbc:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d4cbe:	2514      	movs	r5, #20
   d4cc0:	4606      	mov	r6, r0
   d4cc2:	462a      	mov	r2, r5
   d4cc4:	2100      	movs	r1, #0
   d4cc6:	a801      	add	r0, sp, #4
   d4cc8:	f001 fd67 	bl	d679a <memset>
   d4ccc:	7823      	ldrb	r3, [r4, #0]
   d4cce:	f88d 3008 	strb.w	r3, [sp, #8]
   d4cd2:	6863      	ldr	r3, [r4, #4]
   d4cd4:	9303      	str	r3, [sp, #12]
   d4cd6:	68e3      	ldr	r3, [r4, #12]
   d4cd8:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d4cda:	2200      	movs	r2, #0
   d4cdc:	7a23      	ldrb	r3, [r4, #8]
   d4cde:	7c30      	ldrb	r0, [r6, #16]
   d4ce0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4ce4:	a901      	add	r1, sp, #4
   d4ce6:	9305      	str	r3, [sp, #20]
   d4ce8:	f7ff fdb6 	bl	d4858 <HAL_I2C_Request_Data_Ex>
}
   d4cec:	b006      	add	sp, #24
   d4cee:	bd70      	pop	{r4, r5, r6, pc}

000d4cf0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d4cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4cf2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4cf4:	f88d 1000 	strb.w	r1, [sp]
   d4cf8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4cfc:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4cfe:	bf18      	it	ne
   d4d00:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4d02:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d4d04:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4d06:	f88d 3008 	strb.w	r3, [sp, #8]
   d4d0a:	f7ff ffd5 	bl	d4cb8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4d0e:	b005      	add	sp, #20
   d4d10:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d14 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d4d14:	2301      	movs	r3, #1
   d4d16:	f7ff bfeb 	b.w	d4cf0 <_ZN7TwoWire11requestFromEhjh>

000d4d1a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4d1a:	2200      	movs	r2, #0
   d4d1c:	7c00      	ldrb	r0, [r0, #16]
   d4d1e:	f7ff bd53 	b.w	d47c8 <HAL_I2C_Begin_Transmission>

000d4d22 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4d22:	2200      	movs	r2, #0
   d4d24:	7c00      	ldrb	r0, [r0, #16]
   d4d26:	f7ff bd57 	b.w	d47d8 <HAL_I2C_End_Transmission>

000d4d2a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4d2a:	2100      	movs	r1, #0
   d4d2c:	7c00      	ldrb	r0, [r0, #16]
   d4d2e:	f7ff bd83 	b.w	d4838 <HAL_I2C_Is_Enabled>

000d4d32 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4d32:	4770      	bx	lr

000d4d34 <_ZN9IPAddressD0Ev>:
   d4d34:	b510      	push	{r4, lr}
   d4d36:	2118      	movs	r1, #24
   d4d38:	4604      	mov	r4, r0
   d4d3a:	f000 feb0 	bl	d5a9e <_ZdlPvj>
   d4d3e:	4620      	mov	r0, r4
   d4d40:	bd10      	pop	{r4, pc}

000d4d42 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d42:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d44:	7d03      	ldrb	r3, [r0, #20]
   d4d46:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d48:	b08d      	sub	sp, #52	; 0x34
   d4d4a:	460e      	mov	r6, r1
   d4d4c:	f100 0704 	add.w	r7, r0, #4
   d4d50:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d54:	d002      	beq.n	d4d5c <_ZNK9IPAddress7printToER5Print+0x1a>
   d4d56:	f100 0508 	add.w	r5, r0, #8
   d4d5a:	e018      	b.n	d4d8e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d5c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d5e:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d60:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d64:	232f      	movs	r3, #47	; 0x2f
   d4d66:	462a      	mov	r2, r5
   d4d68:	200a      	movs	r0, #10
   d4d6a:	f7ff fd7d 	bl	d4868 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d6e:	4628      	mov	r0, r5
   d4d70:	f001 fd4e 	bl	d6810 <strlen>
   d4d74:	6833      	ldr	r3, [r6, #0]
   d4d76:	4602      	mov	r2, r0
   d4d78:	68db      	ldr	r3, [r3, #12]
   d4d7a:	4629      	mov	r1, r5
   d4d7c:	4630      	mov	r0, r6
   d4d7e:	4798      	blx	r3
   d4d80:	e00f      	b.n	d4da2 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4d82:	b124      	cbz	r4, d4d8e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4d84:	212e      	movs	r1, #46	; 0x2e
   d4d86:	4630      	mov	r0, r6
   d4d88:	f000 f9da 	bl	d5140 <_ZN5Print5printEc>
   d4d8c:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4d8e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4d92:	220a      	movs	r2, #10
   d4d94:	4630      	mov	r0, r6
   d4d96:	f000 f9e6 	bl	d5166 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4d9a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4d9c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4d9e:	d1f0      	bne.n	d4d82 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4da0:	4620      	mov	r0, r4
    }
    return n;
}
   d4da2:	b00d      	add	sp, #52	; 0x34
   d4da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4da8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4da8:	b510      	push	{r4, lr}
   d4daa:	4b05      	ldr	r3, [pc, #20]	; (d4dc0 <_ZN9IPAddressC1Ev+0x18>)
   d4dac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4dae:	2211      	movs	r2, #17
   d4db0:	f840 3b04 	str.w	r3, [r0], #4
   d4db4:	2100      	movs	r1, #0
   d4db6:	f001 fcf0 	bl	d679a <memset>
{
    clear();
}
   d4dba:	4620      	mov	r0, r4
   d4dbc:	bd10      	pop	{r4, pc}
   d4dbe:	bf00      	nop
   d4dc0:	000d6aa0 	.word	0x000d6aa0

000d4dc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4dc4:	4603      	mov	r3, r0
   d4dc6:	4a07      	ldr	r2, [pc, #28]	; (d4de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4dc8:	b510      	push	{r4, lr}
   d4dca:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4dce:	f101 0210 	add.w	r2, r1, #16
   d4dd2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4dd6:	f843 4b04 	str.w	r4, [r3], #4
   d4dda:	4291      	cmp	r1, r2
   d4ddc:	d1f9      	bne.n	d4dd2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4dde:	780a      	ldrb	r2, [r1, #0]
   d4de0:	701a      	strb	r2, [r3, #0]
}
   d4de2:	bd10      	pop	{r4, pc}
   d4de4:	000d6aa0 	.word	0x000d6aa0

000d4de8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4de8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4dea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4dee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4df2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4df6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4dfa:	2304      	movs	r3, #4
   d4dfc:	6041      	str	r1, [r0, #4]
   d4dfe:	7503      	strb	r3, [r0, #20]
   d4e00:	bd10      	pop	{r4, pc}

000d4e02 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4e02:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4e04:	780d      	ldrb	r5, [r1, #0]
   d4e06:	788b      	ldrb	r3, [r1, #2]
   d4e08:	784a      	ldrb	r2, [r1, #1]
   d4e0a:	78c9      	ldrb	r1, [r1, #3]
   d4e0c:	9100      	str	r1, [sp, #0]
   d4e0e:	4629      	mov	r1, r5
   d4e10:	f7ff ffea 	bl	d4de8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4e14:	b003      	add	sp, #12
   d4e16:	bd30      	pop	{r4, r5, pc}

000d4e18 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e18:	4b01      	ldr	r3, [pc, #4]	; (d4e20 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e1a:	4a02      	ldr	r2, [pc, #8]	; (d4e24 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e1c:	601a      	str	r2, [r3, #0]
   d4e1e:	4770      	bx	lr
   d4e20:	2003e3d8 	.word	0x2003e3d8
   d4e24:	000d6b1f 	.word	0x000d6b1f

000d4e28 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e28:	2200      	movs	r2, #0
   d4e2a:	4611      	mov	r1, r2
   d4e2c:	6840      	ldr	r0, [r0, #4]
   d4e2e:	f7ff be37 	b.w	d4aa0 <network_listening>

000d4e32 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e32:	2200      	movs	r2, #0
   d4e34:	4611      	mov	r1, r2
   d4e36:	6840      	ldr	r0, [r0, #4]
   d4e38:	f7ff be42 	b.w	d4ac0 <network_get_listen_timeout>

000d4e3c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e3c:	2200      	movs	r2, #0
   d4e3e:	6840      	ldr	r0, [r0, #4]
   d4e40:	f7ff be36 	b.w	d4ab0 <network_set_listen_timeout>

000d4e44 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e44:	2200      	movs	r2, #0
   d4e46:	f081 0101 	eor.w	r1, r1, #1
   d4e4a:	6840      	ldr	r0, [r0, #4]
   d4e4c:	f7ff be20 	b.w	d4a90 <network_listen>

000d4e50 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4e50:	2300      	movs	r3, #0
   d4e52:	461a      	mov	r2, r3
   d4e54:	2101      	movs	r1, #1
   d4e56:	6840      	ldr	r0, [r0, #4]
   d4e58:	f7ff be12 	b.w	d4a80 <network_off>

000d4e5c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e5c:	2300      	movs	r3, #0
   d4e5e:	461a      	mov	r2, r3
   d4e60:	4619      	mov	r1, r3
   d4e62:	6840      	ldr	r0, [r0, #4]
   d4e64:	f7ff be04 	b.w	d4a70 <network_on>

000d4e68 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e68:	2200      	movs	r2, #0
   d4e6a:	4611      	mov	r1, r2
   d4e6c:	6840      	ldr	r0, [r0, #4]
   d4e6e:	f7ff bdf7 	b.w	d4a60 <network_ready>

000d4e72 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e72:	2200      	movs	r2, #0
   d4e74:	4611      	mov	r1, r2
   d4e76:	6840      	ldr	r0, [r0, #4]
   d4e78:	f7ff bde2 	b.w	d4a40 <network_connecting>

000d4e7c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e7c:	2200      	movs	r2, #0
   d4e7e:	2102      	movs	r1, #2
   d4e80:	6840      	ldr	r0, [r0, #4]
   d4e82:	f7ff bde5 	b.w	d4a50 <network_disconnect>

000d4e86 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e86:	2300      	movs	r3, #0
   d4e88:	461a      	mov	r2, r3
   d4e8a:	6840      	ldr	r0, [r0, #4]
   d4e8c:	f7ff bdd0 	b.w	d4a30 <network_connect>

000d4e90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4e90:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e92:	4605      	mov	r5, r0
   d4e94:	b188      	cbz	r0, d4eba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e96:	6804      	ldr	r4, [r0, #0]
   d4e98:	b14c      	cbz	r4, d4eae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4e9a:	68a3      	ldr	r3, [r4, #8]
   d4e9c:	b11b      	cbz	r3, d4ea6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e9e:	2203      	movs	r2, #3
   d4ea0:	4621      	mov	r1, r4
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ea6:	2110      	movs	r1, #16
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	f000 fdf8 	bl	d5a9e <_ZdlPvj>
   d4eae:	4628      	mov	r0, r5
   d4eb0:	2114      	movs	r1, #20
      }
   d4eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eb6:	f000 bdf2 	b.w	d5a9e <_ZdlPvj>
   d4eba:	bd38      	pop	{r3, r4, r5, pc}

000d4ebc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4ebc:	b110      	cbz	r0, d4ec4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4ebe:	6803      	ldr	r3, [r0, #0]
   d4ec0:	685b      	ldr	r3, [r3, #4]
   d4ec2:	4718      	bx	r3
   d4ec4:	4770      	bx	lr

000d4ec6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4ec6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4ec8:	6803      	ldr	r3, [r0, #0]
   d4eca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4ecc:	b1bb      	cbz	r3, d4efe <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4ece:	6858      	ldr	r0, [r3, #4]
   d4ed0:	f7ff fc12 	bl	d46f8 <os_thread_is_current>
   d4ed4:	b978      	cbnz	r0, d4ef6 <_ZN6ThreadD1Ev+0x30>
   d4ed6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4ed8:	7c5a      	ldrb	r2, [r3, #17]
   d4eda:	b912      	cbnz	r2, d4ee2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4edc:	6858      	ldr	r0, [r3, #4]
   d4ede:	f7ff fc13 	bl	d4708 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4ee2:	6823      	ldr	r3, [r4, #0]
   d4ee4:	6858      	ldr	r0, [r3, #4]
   d4ee6:	f7ff fc17 	bl	d4718 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eea:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4eec:	2300      	movs	r3, #0
   d4eee:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4ef0:	b128      	cbz	r0, d4efe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4ef2:	f7ff ffcd 	bl	d4e90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ef6:	6820      	ldr	r0, [r4, #0]
   d4ef8:	b108      	cbz	r0, d4efe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4efa:	f7ff ffc9 	bl	d4e90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4efe:	4620      	mov	r0, r4
   d4f00:	bd10      	pop	{r4, pc}

000d4f02 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4f02:	b538      	push	{r3, r4, r5, lr}
   d4f04:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f06:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4f0a:	b108      	cbz	r0, d4f10 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f0c:	f7ff f8c7 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f10:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4f14:	b108      	cbz	r0, d4f1a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4f16:	f7ff fc0f 	bl	d4738 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f1a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4f1e:	b135      	cbz	r5, d4f2e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f20:	4628      	mov	r0, r5
   d4f22:	f7ff ffd0 	bl	d4ec6 <_ZN6ThreadD1Ev>
   d4f26:	2104      	movs	r1, #4
   d4f28:	4628      	mov	r0, r5
   d4f2a:	f000 fdb8 	bl	d5a9e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f2e:	6820      	ldr	r0, [r4, #0]
   d4f30:	b108      	cbz	r0, d4f36 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4f32:	f7ff ffc3 	bl	d4ebc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4f36:	4620      	mov	r0, r4
   d4f38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f3c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4f3c:	b510      	push	{r4, lr}
   d4f3e:	4b04      	ldr	r3, [pc, #16]	; (d4f50 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4f40:	4604      	mov	r4, r0
   d4f42:	f840 3b08 	str.w	r3, [r0], #8
   d4f46:	f7ff ffdc 	bl	d4f02 <_ZN5spark11MeshPublishD1Ev>
   d4f4a:	4620      	mov	r0, r4
   d4f4c:	bd10      	pop	{r4, pc}
   d4f4e:	bf00      	nop
   d4f50:	000d6b94 	.word	0x000d6b94

000d4f54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4f54:	b538      	push	{r3, r4, r5, lr}
   d4f56:	4c0e      	ldr	r4, [pc, #56]	; (d4f90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4f58:	4b0e      	ldr	r3, [pc, #56]	; (d4f94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4f5a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4f5c:	2500      	movs	r5, #0
   d4f5e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4f60:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4f64:	6063      	str	r3, [r4, #4]
   d4f66:	60a5      	str	r5, [r4, #8]
   d4f68:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f6c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4f70:	f7ff fbda 	bl	d4728 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4f74:	4b08      	ldr	r3, [pc, #32]	; (d4f98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4f76:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f7a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4f7e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4f80:	4620      	mov	r0, r4
   d4f82:	4a06      	ldr	r2, [pc, #24]	; (d4f9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4f84:	4906      	ldr	r1, [pc, #24]	; (d4fa0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4f8a:	f000 bd83 	b.w	d5a94 <__aeabi_atexit>
   d4f8e:	bf00      	nop
   d4f90:	2003e3dc 	.word	0x2003e3dc
   d4f94:	000d6bc8 	.word	0x000d6bc8
   d4f98:	000d6b94 	.word	0x000d6b94
   d4f9c:	2003e3b8 	.word	0x2003e3b8
   d4fa0:	000d4f3d 	.word	0x000d4f3d

000d4fa4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4fa4:	2300      	movs	r3, #0
   d4fa6:	461a      	mov	r2, r3
   d4fa8:	6840      	ldr	r0, [r0, #4]
   d4faa:	f7ff bd41 	b.w	d4a30 <network_connect>

000d4fae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4fae:	2200      	movs	r2, #0
   d4fb0:	2102      	movs	r1, #2
   d4fb2:	6840      	ldr	r0, [r0, #4]
   d4fb4:	f7ff bd4c 	b.w	d4a50 <network_disconnect>

000d4fb8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4fb8:	2200      	movs	r2, #0
   d4fba:	4611      	mov	r1, r2
   d4fbc:	6840      	ldr	r0, [r0, #4]
   d4fbe:	f7ff bd3f 	b.w	d4a40 <network_connecting>

000d4fc2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4fc2:	2200      	movs	r2, #0
   d4fc4:	4611      	mov	r1, r2
   d4fc6:	6840      	ldr	r0, [r0, #4]
   d4fc8:	f7ff bd4a 	b.w	d4a60 <network_ready>

000d4fcc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4fcc:	2300      	movs	r3, #0
   d4fce:	461a      	mov	r2, r3
   d4fd0:	4619      	mov	r1, r3
   d4fd2:	6840      	ldr	r0, [r0, #4]
   d4fd4:	f7ff bd4c 	b.w	d4a70 <network_on>

000d4fd8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4fd8:	2300      	movs	r3, #0
   d4fda:	461a      	mov	r2, r3
   d4fdc:	4619      	mov	r1, r3
   d4fde:	6840      	ldr	r0, [r0, #4]
   d4fe0:	f7ff bd4e 	b.w	d4a80 <network_off>

000d4fe4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4fe4:	2200      	movs	r2, #0
   d4fe6:	f081 0101 	eor.w	r1, r1, #1
   d4fea:	6840      	ldr	r0, [r0, #4]
   d4fec:	f7ff bd50 	b.w	d4a90 <network_listen>

000d4ff0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	6840      	ldr	r0, [r0, #4]
   d4ff4:	f7ff bd5c 	b.w	d4ab0 <network_set_listen_timeout>

000d4ff8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4ff8:	2200      	movs	r2, #0
   d4ffa:	4611      	mov	r1, r2
   d4ffc:	6840      	ldr	r0, [r0, #4]
   d4ffe:	f7ff bd5f 	b.w	d4ac0 <network_get_listen_timeout>

000d5002 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5002:	2200      	movs	r2, #0
   d5004:	4611      	mov	r1, r2
   d5006:	6840      	ldr	r0, [r0, #4]
   d5008:	f7ff bd4a 	b.w	d4aa0 <network_listening>

000d500c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d500c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5010:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5012:	b095      	sub	sp, #84	; 0x54
   d5014:	4616      	mov	r6, r2
   d5016:	460d      	mov	r5, r1
   d5018:	4607      	mov	r7, r0
    IPAddress addr;
   d501a:	f7ff fec5 	bl	d4da8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d501e:	4621      	mov	r1, r4
   d5020:	2220      	movs	r2, #32
   d5022:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5024:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5026:	f001 fbb8 	bl	d679a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d502a:	2340      	movs	r3, #64	; 0x40
   d502c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d502e:	4621      	mov	r1, r4
   d5030:	466b      	mov	r3, sp
   d5032:	aa0c      	add	r2, sp, #48	; 0x30
   d5034:	4630      	mov	r0, r6
   d5036:	f7ff fc27 	bl	d4888 <netdb_getaddrinfo>
    if (!r) {
   d503a:	4604      	mov	r4, r0
   d503c:	2800      	cmp	r0, #0
   d503e:	d144      	bne.n	d50ca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5040:	4602      	mov	r2, r0
   d5042:	2101      	movs	r1, #1
   d5044:	6868      	ldr	r0, [r5, #4]
   d5046:	f7ff fd0b 	bl	d4a60 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d504a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d504c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d504e:	4622      	mov	r2, r4
   d5050:	6868      	ldr	r0, [r5, #4]
   d5052:	f7ff fd05 	bl	d4a60 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5056:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5058:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d505a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d505c:	2e00      	cmp	r6, #0
   d505e:	d034      	beq.n	d50ca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5060:	2900      	cmp	r1, #0
   d5062:	d132      	bne.n	d50ca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5064:	6873      	ldr	r3, [r6, #4]
   d5066:	2b02      	cmp	r3, #2
   d5068:	d002      	beq.n	d5070 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d506a:	2b0a      	cmp	r3, #10
   d506c:	d009      	beq.n	d5082 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d506e:	e02a      	b.n	d50c6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5070:	f1b8 0f00 	cmp.w	r8, #0
   d5074:	d027      	beq.n	d50c6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5076:	6971      	ldr	r1, [r6, #20]
   d5078:	4638      	mov	r0, r7
   d507a:	3104      	adds	r1, #4
   d507c:	f7ff fec1 	bl	d4e02 <_ZN9IPAddressaSEPKh>
   d5080:	e020      	b.n	d50c4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5082:	f1b9 0f00 	cmp.w	r9, #0
   d5086:	d01e      	beq.n	d50c6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5088:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d508a:	2211      	movs	r2, #17
   d508c:	a801      	add	r0, sp, #4
   d508e:	f001 fb84 	bl	d679a <memset>
                    a.v = 6;
   d5092:	2306      	movs	r3, #6
   d5094:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5098:	ad01      	add	r5, sp, #4
   d509a:	f104 0308 	add.w	r3, r4, #8
   d509e:	3418      	adds	r4, #24
   d50a0:	6818      	ldr	r0, [r3, #0]
   d50a2:	6859      	ldr	r1, [r3, #4]
   d50a4:	462a      	mov	r2, r5
   d50a6:	c203      	stmia	r2!, {r0, r1}
   d50a8:	3308      	adds	r3, #8
   d50aa:	42a3      	cmp	r3, r4
   d50ac:	4615      	mov	r5, r2
   d50ae:	d1f7      	bne.n	d50a0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d50b0:	a901      	add	r1, sp, #4
   d50b2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50b4:	ad07      	add	r5, sp, #28
   d50b6:	f7ff fe85 	bl	d4dc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50bc:	1d3c      	adds	r4, r7, #4
   d50be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50c0:	682b      	ldr	r3, [r5, #0]
   d50c2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d50c4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50c6:	69f6      	ldr	r6, [r6, #28]
   d50c8:	e7c8      	b.n	d505c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50ca:	9800      	ldr	r0, [sp, #0]
   d50cc:	f7ff fbd4 	bl	d4878 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50d0:	4638      	mov	r0, r7
   d50d2:	b015      	add	sp, #84	; 0x54
   d50d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d50d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d50d8:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50da:	4a03      	ldr	r2, [pc, #12]	; (d50e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50dc:	601a      	str	r2, [r3, #0]
   d50de:	2200      	movs	r2, #0
   d50e0:	605a      	str	r2, [r3, #4]
   d50e2:	4770      	bx	lr
   d50e4:	2003e5b0 	.word	0x2003e5b0
   d50e8:	000d6bc8 	.word	0x000d6bc8

000d50ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d50ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50ee:	4606      	mov	r6, r0
   d50f0:	460d      	mov	r5, r1
   d50f2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d50f4:	2400      	movs	r4, #0
  while (size--) {
   d50f6:	42bd      	cmp	r5, r7
   d50f8:	d00c      	beq.n	d5114 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d50fa:	6833      	ldr	r3, [r6, #0]
   d50fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5100:	689b      	ldr	r3, [r3, #8]
   d5102:	4630      	mov	r0, r6
   d5104:	4798      	blx	r3
     if (chunk>=0)
   d5106:	2800      	cmp	r0, #0
   d5108:	db01      	blt.n	d510e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d510a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d510c:	e7f3      	b.n	d50f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d510e:	2c00      	cmp	r4, #0
   d5110:	bf08      	it	eq
   d5112:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5114:	4620      	mov	r0, r4
   d5116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5118 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5118:	b570      	push	{r4, r5, r6, lr}
   d511a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d511c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d511e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5120:	b149      	cbz	r1, d5136 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5122:	f001 fb75 	bl	d6810 <strlen>
   d5126:	682b      	ldr	r3, [r5, #0]
   d5128:	4602      	mov	r2, r0
   d512a:	4621      	mov	r1, r4
   d512c:	4628      	mov	r0, r5
   d512e:	68db      	ldr	r3, [r3, #12]
    }
   d5130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5134:	4718      	bx	r3
    }
   d5136:	bd70      	pop	{r4, r5, r6, pc}

000d5138 <_ZN5Print5printEPKc>:
   d5138:	b508      	push	{r3, lr}
   d513a:	f7ff ffed 	bl	d5118 <_ZN5Print5writeEPKc>
   d513e:	bd08      	pop	{r3, pc}

000d5140 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5140:	6803      	ldr	r3, [r0, #0]
   d5142:	689b      	ldr	r3, [r3, #8]
   d5144:	4718      	bx	r3

000d5146 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d5146:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5148:	f7ff ffe6 	bl	d5118 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d514c:	bd08      	pop	{r3, pc}

000d514e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d514e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5150:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5152:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5154:	f7ff fff4 	bl	d5140 <_ZN5Print5printEc>
  n += print('\n');
   d5158:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d515a:	4604      	mov	r4, r0
  n += print('\n');
   d515c:	4628      	mov	r0, r5
   d515e:	f7ff ffef 	bl	d5140 <_ZN5Print5printEc>
  return n;
}
   d5162:	4420      	add	r0, r4
   d5164:	bd38      	pop	{r3, r4, r5, pc}

000d5166 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5166:	b530      	push	{r4, r5, lr}
   d5168:	b08b      	sub	sp, #44	; 0x2c
   d516a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d516c:	2100      	movs	r1, #0
   d516e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5172:	2a01      	cmp	r2, #1
   d5174:	bf98      	it	ls
   d5176:	220a      	movls	r2, #10
   d5178:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d517c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5180:	fb05 3312 	mls	r3, r5, r2, r3
   d5184:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5188:	2b09      	cmp	r3, #9
   d518a:	bf94      	ite	ls
   d518c:	3330      	addls	r3, #48	; 0x30
   d518e:	3337      	addhi	r3, #55	; 0x37
   d5190:	b2db      	uxtb	r3, r3
   d5192:	4621      	mov	r1, r4
   d5194:	f804 3901 	strb.w	r3, [r4], #-1
   d5198:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d519a:	2d00      	cmp	r5, #0
   d519c:	d1ee      	bne.n	d517c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d519e:	f7ff ffbb 	bl	d5118 <_ZN5Print5writeEPKc>
}
   d51a2:	b00b      	add	sp, #44	; 0x2c
   d51a4:	bd30      	pop	{r4, r5, pc}
	...

000d51a8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d51a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d51ac:	ec57 6b10 	vmov	r6, r7, d0
   d51b0:	4682      	mov	sl, r0
   d51b2:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d51b4:	ee10 2a10 	vmov	r2, s0
   d51b8:	463b      	mov	r3, r7
   d51ba:	ee10 0a10 	vmov	r0, s0
   d51be:	4639      	mov	r1, r7
   d51c0:	f001 fa24 	bl	d660c <__aeabi_dcmpun>
   d51c4:	b108      	cbz	r0, d51ca <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d51c6:	494e      	ldr	r1, [pc, #312]	; (d5300 <_ZN5Print10printFloatEdh+0x158>)
   d51c8:	e012      	b.n	d51f0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d51ca:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d51ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d51d2:	4b4c      	ldr	r3, [pc, #304]	; (d5304 <_ZN5Print10printFloatEdh+0x15c>)
   d51d4:	4630      	mov	r0, r6
   d51d6:	4649      	mov	r1, r9
   d51d8:	f001 fa18 	bl	d660c <__aeabi_dcmpun>
   d51dc:	b968      	cbnz	r0, d51fa <_ZN5Print10printFloatEdh+0x52>
   d51de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d51e2:	4b48      	ldr	r3, [pc, #288]	; (d5304 <_ZN5Print10printFloatEdh+0x15c>)
   d51e4:	4630      	mov	r0, r6
   d51e6:	4649      	mov	r1, r9
   d51e8:	f001 f9f2 	bl	d65d0 <__aeabi_dcmple>
   d51ec:	b928      	cbnz	r0, d51fa <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d51ee:	4946      	ldr	r1, [pc, #280]	; (d5308 <_ZN5Print10printFloatEdh+0x160>)
   d51f0:	4650      	mov	r0, sl
   d51f2:	f7ff ff91 	bl	d5118 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d51f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d51fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d51fe:	4b43      	ldr	r3, [pc, #268]	; (d530c <_ZN5Print10printFloatEdh+0x164>)
   d5200:	4630      	mov	r0, r6
   d5202:	4639      	mov	r1, r7
   d5204:	f001 f9f8 	bl	d65f8 <__aeabi_dcmpgt>
   d5208:	b108      	cbz	r0, d520e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d520a:	4941      	ldr	r1, [pc, #260]	; (d5310 <_ZN5Print10printFloatEdh+0x168>)
   d520c:	e7f0      	b.n	d51f0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d520e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5212:	4b40      	ldr	r3, [pc, #256]	; (d5314 <_ZN5Print10printFloatEdh+0x16c>)
   d5214:	4630      	mov	r0, r6
   d5216:	4639      	mov	r1, r7
   d5218:	f001 f9d0 	bl	d65bc <__aeabi_dcmplt>
   d521c:	2800      	cmp	r0, #0
   d521e:	d1f4      	bne.n	d520a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5220:	2200      	movs	r2, #0
   d5222:	2300      	movs	r3, #0
   d5224:	4630      	mov	r0, r6
   d5226:	4639      	mov	r1, r7
   d5228:	f001 f9c8 	bl	d65bc <__aeabi_dcmplt>
   d522c:	b140      	cbz	r0, d5240 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d522e:	212d      	movs	r1, #45	; 0x2d
   d5230:	4650      	mov	r0, sl
   d5232:	f7ff ff85 	bl	d5140 <_ZN5Print5printEc>
     number = -number;
   d5236:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d523a:	4604      	mov	r4, r0
     number = -number;
   d523c:	461f      	mov	r7, r3
   d523e:	e000      	b.n	d5242 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5240:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5242:	4935      	ldr	r1, [pc, #212]	; (d5318 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5244:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5248:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d524a:	fa5f f388 	uxtb.w	r3, r8
   d524e:	429d      	cmp	r5, r3
   d5250:	d906      	bls.n	d5260 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5252:	2200      	movs	r2, #0
   d5254:	4b31      	ldr	r3, [pc, #196]	; (d531c <_ZN5Print10printFloatEdh+0x174>)
   d5256:	f001 f869 	bl	d632c <__aeabi_ddiv>
   d525a:	f108 0801 	add.w	r8, r8, #1
   d525e:	e7f4      	b.n	d524a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5260:	4632      	mov	r2, r6
   d5262:	463b      	mov	r3, r7
   d5264:	f000 fd86 	bl	d5d74 <__adddf3>
   d5268:	460f      	mov	r7, r1
   d526a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d526c:	f001 fa0c 	bl	d6688 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5270:	220a      	movs	r2, #10
   d5272:	4601      	mov	r1, r0
   d5274:	4680      	mov	r8, r0
   d5276:	4650      	mov	r0, sl
   d5278:	f7ff ff75 	bl	d5166 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d527c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d527e:	b3e5      	cbz	r5, d52fa <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5280:	4640      	mov	r0, r8
   d5282:	f000 feb3 	bl	d5fec <__aeabi_ui2d>
   d5286:	4602      	mov	r2, r0
   d5288:	460b      	mov	r3, r1
   d528a:	4630      	mov	r0, r6
   d528c:	4639      	mov	r1, r7
   d528e:	f000 fd6f 	bl	d5d70 <__aeabi_dsub>
   d5292:	4606      	mov	r6, r0
   d5294:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5296:	4650      	mov	r0, sl
   d5298:	4921      	ldr	r1, [pc, #132]	; (d5320 <_ZN5Print10printFloatEdh+0x178>)
   d529a:	f7ff ff3d 	bl	d5118 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d529e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d52a0:	2200      	movs	r2, #0
   d52a2:	4b1e      	ldr	r3, [pc, #120]	; (d531c <_ZN5Print10printFloatEdh+0x174>)
   d52a4:	4630      	mov	r0, r6
   d52a6:	4639      	mov	r1, r7
   d52a8:	f000 ff16 	bl	d60d8 <__aeabi_dmul>
   d52ac:	4606      	mov	r6, r0
   d52ae:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d52b0:	f001 f9c2 	bl	d6638 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d52b4:	f1b0 0900 	subs.w	r9, r0, #0
   d52b8:	da07      	bge.n	d52ca <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d52ba:	212d      	movs	r1, #45	; 0x2d
   d52bc:	4650      	mov	r0, sl
   d52be:	f7ff ff3f 	bl	d5140 <_ZN5Print5printEc>
            val = -n;
   d52c2:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d52c6:	4680      	mov	r8, r0
   d52c8:	e002      	b.n	d52d0 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d52ca:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d52cc:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d52d0:	220a      	movs	r2, #10
   d52d2:	4650      	mov	r0, sl
   d52d4:	f7ff ff47 	bl	d5166 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d52d8:	4440      	add	r0, r8
   d52da:	4404      	add	r4, r0
    remainder -= toPrint;
   d52dc:	4648      	mov	r0, r9
   d52de:	f000 fe95 	bl	d600c <__aeabi_i2d>
   d52e2:	4602      	mov	r2, r0
   d52e4:	460b      	mov	r3, r1
   d52e6:	4630      	mov	r0, r6
   d52e8:	4639      	mov	r1, r7
   d52ea:	f000 fd41 	bl	d5d70 <__aeabi_dsub>
   d52ee:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d52f0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d52f4:	4606      	mov	r6, r0
   d52f6:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d52f8:	d1d2      	bne.n	d52a0 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d52fa:	4620      	mov	r0, r4
   d52fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5300:	000d6bf4 	.word	0x000d6bf4
   d5304:	7fefffff 	.word	0x7fefffff
   d5308:	000d6bfe 	.word	0x000d6bfe
   d530c:	41efffff 	.word	0x41efffff
   d5310:	000d6bf8 	.word	0x000d6bf8
   d5314:	c1efffff 	.word	0xc1efffff
   d5318:	3fe00000 	.word	0x3fe00000
   d531c:	40240000 	.word	0x40240000
   d5320:	000d6bfc 	.word	0x000d6bfc

000d5324 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5324:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5326:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5328:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d532a:	f7ff ff3d 	bl	d51a8 <_ZN5Print10printFloatEdh>
   d532e:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5330:	4628      	mov	r0, r5
   d5332:	f7ff ff0c 	bl	d514e <_ZN5Print7printlnEv>
  return n;
}
   d5336:	4420      	add	r0, r4
   d5338:	bd38      	pop	{r3, r4, r5, pc}

000d533a <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d533a:	b538      	push	{r3, r4, r5, lr}
   d533c:	4604      	mov	r4, r0
    return println((double)num, digits);
   d533e:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d5342:	460d      	mov	r5, r1
    return println((double)num, digits);
   d5344:	f000 fe74 	bl	d6030 <__aeabi_f2d>
   d5348:	ec41 0b10 	vmov	d0, r0, r1
   d534c:	4629      	mov	r1, r5
   d534e:	4620      	mov	r0, r4
}
   d5350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d5354:	f7ff bfe6 	b.w	d5324 <_ZN5Print7printlnEdi>

000d5358 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5358:	b510      	push	{r4, lr}
   d535a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d535c:	f7ff fbf0 	bl	d4b40 <_ZNSt14_Function_baseD1Ev>
   d5360:	4620      	mov	r0, r4
   d5362:	bd10      	pop	{r4, pc}

000d5364 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5364:	4803      	ldr	r0, [pc, #12]	; (d5374 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5366:	4a04      	ldr	r2, [pc, #16]	; (d5378 <_GLOBAL__sub_I_RGB+0x14>)
   d5368:	4904      	ldr	r1, [pc, #16]	; (d537c <_GLOBAL__sub_I_RGB+0x18>)
   d536a:	2300      	movs	r3, #0
   d536c:	6083      	str	r3, [r0, #8]
   d536e:	f000 bb91 	b.w	d5a94 <__aeabi_atexit>
   d5372:	bf00      	nop
   d5374:	2003e5b8 	.word	0x2003e5b8
   d5378:	2003e3b8 	.word	0x2003e3b8
   d537c:	000d5359 	.word	0x000d5359

000d5380 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5380:	4770      	bx	lr

000d5382 <_ZN8SPIClassD0Ev>:
   d5382:	b510      	push	{r4, lr}
   d5384:	210c      	movs	r1, #12
   d5386:	4604      	mov	r4, r0
   d5388:	f000 fb89 	bl	d5a9e <_ZdlPvj>
   d538c:	4620      	mov	r0, r4
   d538e:	bd10      	pop	{r4, pc}

000d5390 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5390:	b510      	push	{r4, lr}
   d5392:	4b05      	ldr	r3, [pc, #20]	; (d53a8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5394:	6003      	str	r3, [r0, #0]
   d5396:	4604      	mov	r4, r0
{
    _spi = spi;
   d5398:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d539a:	4608      	mov	r0, r1
   d539c:	f7ff fa7c 	bl	d4898 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d53a0:	2300      	movs	r3, #0
   d53a2:	60a3      	str	r3, [r4, #8]
}
   d53a4:	4620      	mov	r0, r4
   d53a6:	bd10      	pop	{r4, pc}
   d53a8:	000d6c0c 	.word	0x000d6c0c

000d53ac <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d53ac:	7900      	ldrb	r0, [r0, #4]
   d53ae:	f7ff ba7b 	b.w	d48a8 <HAL_SPI_Is_Enabled>

000d53b2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d53b2:	b510      	push	{r4, lr}
   d53b4:	4604      	mov	r4, r0
{
	free(buffer);
   d53b6:	6800      	ldr	r0, [r0, #0]
   d53b8:	f7ff fb92 	bl	d4ae0 <free>
}
   d53bc:	4620      	mov	r0, r4
   d53be:	bd10      	pop	{r4, pc}

000d53c0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d53c0:	b510      	push	{r4, lr}
   d53c2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d53c4:	6800      	ldr	r0, [r0, #0]
   d53c6:	b108      	cbz	r0, d53cc <_ZN6String10invalidateEv+0xc>
   d53c8:	f7ff fb8a 	bl	d4ae0 <free>
	buffer = NULL;
   d53cc:	2300      	movs	r3, #0
   d53ce:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d53d0:	60a3      	str	r3, [r4, #8]
   d53d2:	6063      	str	r3, [r4, #4]
   d53d4:	bd10      	pop	{r4, pc}

000d53d6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d53d6:	b538      	push	{r3, r4, r5, lr}
   d53d8:	4604      	mov	r4, r0
   d53da:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d53dc:	6800      	ldr	r0, [r0, #0]
   d53de:	3101      	adds	r1, #1
   d53e0:	f7ff fb86 	bl	d4af0 <realloc>
	if (newbuffer) {
   d53e4:	b110      	cbz	r0, d53ec <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d53e6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d53ea:	2001      	movs	r0, #1
	}
	return 0;
}
   d53ec:	bd38      	pop	{r3, r4, r5, pc}

000d53ee <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d53ee:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d53f0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d53f2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d53f4:	b113      	cbz	r3, d53fc <_ZN6String7reserveEj+0xe>
   d53f6:	6843      	ldr	r3, [r0, #4]
   d53f8:	428b      	cmp	r3, r1
   d53fa:	d207      	bcs.n	d540c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d53fc:	4620      	mov	r0, r4
   d53fe:	f7ff ffea 	bl	d53d6 <_ZN6String12changeBufferEj>
   d5402:	b120      	cbz	r0, d540e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5404:	68a3      	ldr	r3, [r4, #8]
   d5406:	b90b      	cbnz	r3, d540c <_ZN6String7reserveEj+0x1e>
   d5408:	6822      	ldr	r2, [r4, #0]
   d540a:	7013      	strb	r3, [r2, #0]
   d540c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d540e:	bd10      	pop	{r4, pc}

000d5410 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5410:	b570      	push	{r4, r5, r6, lr}
   d5412:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5414:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5416:	4604      	mov	r4, r0
   d5418:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d541a:	f7ff ffe8 	bl	d53ee <_ZN6String7reserveEj>
   d541e:	b918      	cbnz	r0, d5428 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5420:	4620      	mov	r0, r4
   d5422:	f7ff ffcd 	bl	d53c0 <_ZN6String10invalidateEv>
		return *this;
   d5426:	e009      	b.n	d543c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5428:	462a      	mov	r2, r5
   d542a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d542c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d542e:	6820      	ldr	r0, [r4, #0]
   d5430:	f001 f9a8 	bl	d6784 <memcpy>
	buffer[len] = 0;
   d5434:	6822      	ldr	r2, [r4, #0]
   d5436:	68a3      	ldr	r3, [r4, #8]
   d5438:	2100      	movs	r1, #0
   d543a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d543c:	4620      	mov	r0, r4
   d543e:	bd70      	pop	{r4, r5, r6, pc}

000d5440 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5440:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5442:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5444:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5446:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5448:	6043      	str	r3, [r0, #4]
	len = 0;
   d544a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d544c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d544e:	460d      	mov	r5, r1
   d5450:	b139      	cbz	r1, d5462 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5452:	4608      	mov	r0, r1
   d5454:	f001 f9dc 	bl	d6810 <strlen>
   d5458:	4629      	mov	r1, r5
   d545a:	4602      	mov	r2, r0
   d545c:	4620      	mov	r0, r4
   d545e:	f7ff ffd7 	bl	d5410 <_ZN6String4copyEPKcj>
}
   d5462:	4620      	mov	r0, r4
   d5464:	bd38      	pop	{r3, r4, r5, pc}

000d5466 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5466:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5468:	b510      	push	{r4, lr}
   d546a:	460b      	mov	r3, r1
   d546c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d546e:	d007      	beq.n	d5480 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5470:	6809      	ldr	r1, [r1, #0]
   d5472:	b119      	cbz	r1, d547c <_ZN6StringaSERKS_+0x16>
   d5474:	689a      	ldr	r2, [r3, #8]
   d5476:	f7ff ffcb 	bl	d5410 <_ZN6String4copyEPKcj>
   d547a:	e001      	b.n	d5480 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d547c:	f7ff ffa0 	bl	d53c0 <_ZN6String10invalidateEv>

	return *this;
}
   d5480:	4620      	mov	r0, r4
   d5482:	bd10      	pop	{r4, pc}

000d5484 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5484:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5486:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5488:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d548a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d548c:	6043      	str	r3, [r0, #4]
	len = 0;
   d548e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5490:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5492:	f7ff ffe8 	bl	d5466 <_ZN6StringaSERKS_>
}
   d5496:	4620      	mov	r0, r4
   d5498:	bd10      	pop	{r4, pc}

000d549a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d549a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d549c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d549e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d54a0:	b912      	cbnz	r2, d54a8 <_ZNK6String6equalsEPKc+0xe>
   d54a2:	b919      	cbnz	r1, d54ac <_ZNK6String6equalsEPKc+0x12>
   d54a4:	2001      	movs	r0, #1
   d54a6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d54a8:	b911      	cbnz	r1, d54b0 <_ZNK6String6equalsEPKc+0x16>
   d54aa:	6803      	ldr	r3, [r0, #0]
   d54ac:	7818      	ldrb	r0, [r3, #0]
   d54ae:	e002      	b.n	d54b6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d54b0:	6800      	ldr	r0, [r0, #0]
   d54b2:	f001 f9a3 	bl	d67fc <strcmp>
   d54b6:	fab0 f080 	clz	r0, r0
   d54ba:	0940      	lsrs	r0, r0, #5
}
   d54bc:	bd08      	pop	{r3, pc}

000d54be <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   d54be:	b510      	push	{r4, lr}
   d54c0:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d54c2:	6883      	ldr	r3, [r0, #8]
   d54c4:	688a      	ldr	r2, [r1, #8]
   d54c6:	1a9b      	subs	r3, r3, r2
   d54c8:	42a3      	cmp	r3, r4
   d54ca:	d30a      	bcc.n	d54e2 <_ZNK6String10startsWithERKS_j+0x24>
   d54cc:	6800      	ldr	r0, [r0, #0]
   d54ce:	b158      	cbz	r0, d54e8 <_ZNK6String10startsWithERKS_j+0x2a>
   d54d0:	6809      	ldr	r1, [r1, #0]
   d54d2:	b141      	cbz	r1, d54e6 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   d54d4:	4420      	add	r0, r4
   d54d6:	f001 f9a3 	bl	d6820 <strncmp>
   d54da:	fab0 f080 	clz	r0, r0
   d54de:	0940      	lsrs	r0, r0, #5
   d54e0:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d54e2:	2000      	movs	r0, #0
   d54e4:	bd10      	pop	{r4, pc}
   d54e6:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
   d54e8:	bd10      	pop	{r4, pc}

000d54ea <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
   d54ea:	6882      	ldr	r2, [r0, #8]
   d54ec:	688b      	ldr	r3, [r1, #8]
   d54ee:	429a      	cmp	r2, r3
   d54f0:	d302      	bcc.n	d54f8 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   d54f2:	2200      	movs	r2, #0
   d54f4:	f7ff bfe3 	b.w	d54be <_ZNK6String10startsWithERKS_j>
}
   d54f8:	2000      	movs	r0, #0
   d54fa:	4770      	bx	lr

000d54fc <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d54fc:	6883      	ldr	r3, [r0, #8]
   d54fe:	428b      	cmp	r3, r1
   d5500:	d903      	bls.n	d550a <_ZNK6StringixEj+0xe>
   d5502:	6800      	ldr	r0, [r0, #0]
   d5504:	b110      	cbz	r0, d550c <_ZNK6StringixEj+0x10>
	return buffer[index];
   d5506:	5c40      	ldrb	r0, [r0, r1]
   d5508:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d550a:	2000      	movs	r0, #0
	return buffer[index];
}
   d550c:	4770      	bx	lr

000d550e <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d550e:	f7ff bff5 	b.w	d54fc <_ZNK6StringixEj>
	...

000d5514 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d5516:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5518:	460f      	mov	r7, r1
   d551a:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d551c:	490c      	ldr	r1, [pc, #48]	; (d5550 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d551e:	bf88      	it	hi
   d5520:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5522:	4614      	mov	r4, r2
   d5524:	4606      	mov	r6, r0
	if (left > right) {
   d5526:	bf84      	itt	hi
   d5528:	462c      	movhi	r4, r5
   d552a:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d552c:	f7ff ff88 	bl	d5440 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d5530:	68ba      	ldr	r2, [r7, #8]
   d5532:	4294      	cmp	r4, r2
   d5534:	d80a      	bhi.n	d554c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d5536:	6839      	ldr	r1, [r7, #0]
   d5538:	4295      	cmp	r5, r2
   d553a:	bf94      	ite	ls
   d553c:	ebc4 0205 	rsbls	r2, r4, r5
   d5540:	ebc4 0202 	rsbhi	r2, r4, r2
   d5544:	4421      	add	r1, r4
   d5546:	4630      	mov	r0, r6
   d5548:	f7ff ff62 	bl	d5410 <_ZN6String4copyEPKcj>
	return out;
}
   d554c:	4630      	mov	r0, r6
   d554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5550:	000d6b53 	.word	0x000d6b53

000d5554 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5554:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5556:	4c09      	ldr	r4, [pc, #36]	; (d557c <_GLOBAL__sub_I_System+0x28>)
   d5558:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d555a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d555e:	6020      	str	r0, [r4, #0]
   d5560:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5562:	71a0      	strb	r0, [r4, #6]
   d5564:	8120      	strh	r0, [r4, #8]
   d5566:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5568:	f7ff fa1e 	bl	d49a8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d556c:	4620      	mov	r0, r4
   d556e:	4a04      	ldr	r2, [pc, #16]	; (d5580 <_GLOBAL__sub_I_System+0x2c>)
   d5570:	4904      	ldr	r1, [pc, #16]	; (d5584 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5576:	f000 ba8d 	b.w	d5a94 <__aeabi_atexit>
   d557a:	bf00      	nop
   d557c:	2003e5c8 	.word	0x2003e5c8
   d5580:	2003e3b8 	.word	0x2003e3b8
   d5584:	000d4179 	.word	0x000d4179

000d5588 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5588:	4b02      	ldr	r3, [pc, #8]	; (d5594 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d558a:	681a      	ldr	r2, [r3, #0]
   d558c:	4b02      	ldr	r3, [pc, #8]	; (d5598 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d558e:	601a      	str	r2, [r3, #0]
   d5590:	4770      	bx	lr
   d5592:	bf00      	nop
   d5594:	2003e350 	.word	0x2003e350
   d5598:	2003e5d4 	.word	0x2003e5d4

000d559c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d559c:	4770      	bx	lr

000d559e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d559e:	7441      	strb	r1, [r0, #17]
   d55a0:	4770      	bx	lr

000d55a2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d55a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d55a4:	7c00      	ldrb	r0, [r0, #16]
   d55a6:	f7ff f9bf 	bl	d4928 <HAL_USART_Available_Data_For_Write>
}
   d55aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55ae:	bd08      	pop	{r3, pc}

000d55b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d55b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d55b2:	7c00      	ldrb	r0, [r0, #16]
   d55b4:	f7ff f990 	bl	d48d8 <HAL_USART_Available_Data>
}
   d55b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55bc:	bd08      	pop	{r3, pc}

000d55be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d55be:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d55c0:	7c00      	ldrb	r0, [r0, #16]
   d55c2:	f7ff f999 	bl	d48f8 <HAL_USART_Peek_Data>
}
   d55c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55ca:	bf28      	it	cs
   d55cc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d55d0:	bd08      	pop	{r3, pc}

000d55d2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d55d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d55d4:	7c00      	ldrb	r0, [r0, #16]
   d55d6:	f7ff f987 	bl	d48e8 <HAL_USART_Read_Data>
}
   d55da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55de:	bf28      	it	cs
   d55e0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d55e4:	bd08      	pop	{r3, pc}

000d55e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d55e6:	7c00      	ldrb	r0, [r0, #16]
   d55e8:	f7ff b98e 	b.w	d4908 <HAL_USART_Flush_Data>

000d55ec <_ZN11USARTSerialD0Ev>:
   d55ec:	b510      	push	{r4, lr}
   d55ee:	2114      	movs	r1, #20
   d55f0:	4604      	mov	r4, r0
   d55f2:	f000 fa54 	bl	d5a9e <_ZdlPvj>
   d55f6:	4620      	mov	r0, r4
   d55f8:	bd10      	pop	{r4, pc}

000d55fa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d55fa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55fc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d55fe:	4604      	mov	r4, r0
   d5600:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5602:	b925      	cbnz	r5, d560e <_ZN11USARTSerial5writeEh+0x14>
   d5604:	7c00      	ldrb	r0, [r0, #16]
   d5606:	f7ff f98f 	bl	d4928 <HAL_USART_Available_Data_For_Write>
   d560a:	2800      	cmp	r0, #0
   d560c:	dd05      	ble.n	d561a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d560e:	4631      	mov	r1, r6
   d5610:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5616:	f7ff b957 	b.w	d48c8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d561a:	4628      	mov	r0, r5
   d561c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5620 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5620:	b510      	push	{r4, lr}
   d5622:	4604      	mov	r4, r0
   d5624:	4608      	mov	r0, r1
   d5626:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5628:	2200      	movs	r2, #0
   d562a:	6062      	str	r2, [r4, #4]
   d562c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5630:	60a2      	str	r2, [r4, #8]
   d5632:	4a05      	ldr	r2, [pc, #20]	; (d5648 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5634:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5636:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5638:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d563a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d563c:	461a      	mov	r2, r3
   d563e:	f7ff f93b 	bl	d48b8 <HAL_USART_Init>
}
   d5642:	4620      	mov	r0, r4
   d5644:	bd10      	pop	{r4, pc}
   d5646:	bf00      	nop
   d5648:	000d6c48 	.word	0x000d6c48

000d564c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d564c:	7c00      	ldrb	r0, [r0, #16]
   d564e:	f7ff b963 	b.w	d4918 <HAL_USART_Is_Enabled>
	...

000d5654 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5654:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5656:	4d0c      	ldr	r5, [pc, #48]	; (d5688 <_Z22__fetch_global_Serial1v+0x34>)
   d5658:	6829      	ldr	r1, [r5, #0]
   d565a:	f011 0401 	ands.w	r4, r1, #1
   d565e:	d111      	bne.n	d5684 <_Z22__fetch_global_Serial1v+0x30>
   d5660:	4628      	mov	r0, r5
   d5662:	f7fe fd1e 	bl	d40a2 <__cxa_guard_acquire>
   d5666:	b168      	cbz	r0, d5684 <_Z22__fetch_global_Serial1v+0x30>
   d5668:	4a08      	ldr	r2, [pc, #32]	; (d568c <_Z22__fetch_global_Serial1v+0x38>)
   d566a:	4b09      	ldr	r3, [pc, #36]	; (d5690 <_Z22__fetch_global_Serial1v+0x3c>)
   d566c:	4809      	ldr	r0, [pc, #36]	; (d5694 <_Z22__fetch_global_Serial1v+0x40>)
   d566e:	4621      	mov	r1, r4
   d5670:	f7ff ffd6 	bl	d5620 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5674:	4628      	mov	r0, r5
   d5676:	f7fe fd19 	bl	d40ac <__cxa_guard_release>
   d567a:	4a07      	ldr	r2, [pc, #28]	; (d5698 <_Z22__fetch_global_Serial1v+0x44>)
   d567c:	4907      	ldr	r1, [pc, #28]	; (d569c <_Z22__fetch_global_Serial1v+0x48>)
   d567e:	4805      	ldr	r0, [pc, #20]	; (d5694 <_Z22__fetch_global_Serial1v+0x40>)
   d5680:	f000 fa08 	bl	d5a94 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5684:	4803      	ldr	r0, [pc, #12]	; (d5694 <_Z22__fetch_global_Serial1v+0x40>)
   d5686:	bd38      	pop	{r3, r4, r5, pc}
   d5688:	2003e670 	.word	0x2003e670
   d568c:	2003e674 	.word	0x2003e674
   d5690:	2003e5ec 	.word	0x2003e5ec
   d5694:	2003e5d8 	.word	0x2003e5d8
   d5698:	2003e3b8 	.word	0x2003e3b8
   d569c:	000d559d 	.word	0x000d559d

000d56a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56a0:	7441      	strb	r1, [r0, #17]
   d56a2:	4770      	bx	lr

000d56a4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d56a4:	4770      	bx	lr

000d56a6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d56a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d56a8:	2100      	movs	r1, #0
   d56aa:	7c00      	ldrb	r0, [r0, #16]
   d56ac:	f7ff f964 	bl	d4978 <HAL_USB_USART_Receive_Data>
}
   d56b0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56b4:	bf28      	it	cs
   d56b6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d56ba:	bd08      	pop	{r3, pc}

000d56bc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d56bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d56be:	2101      	movs	r1, #1
   d56c0:	7c00      	ldrb	r0, [r0, #16]
   d56c2:	f7ff f959 	bl	d4978 <HAL_USB_USART_Receive_Data>
}
   d56c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56ca:	bf28      	it	cs
   d56cc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d56d0:	bd08      	pop	{r3, pc}

000d56d2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d56d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d56d4:	7c00      	ldrb	r0, [r0, #16]
   d56d6:	f7ff f947 	bl	d4968 <HAL_USB_USART_Available_Data_For_Write>
}
   d56da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56de:	bd08      	pop	{r3, pc}

000d56e0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d56e0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d56e2:	7c00      	ldrb	r0, [r0, #16]
   d56e4:	f7ff f938 	bl	d4958 <HAL_USB_USART_Available_Data>
}
   d56e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56ec:	bd08      	pop	{r3, pc}

000d56ee <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d56ee:	7c00      	ldrb	r0, [r0, #16]
   d56f0:	f7ff b952 	b.w	d4998 <HAL_USB_USART_Flush_Data>

000d56f4 <_ZN9USBSerialD0Ev>:
   d56f4:	b510      	push	{r4, lr}
   d56f6:	2114      	movs	r1, #20
   d56f8:	4604      	mov	r4, r0
   d56fa:	f000 f9d0 	bl	d5a9e <_ZdlPvj>
   d56fe:	4620      	mov	r0, r4
   d5700:	bd10      	pop	{r4, pc}

000d5702 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5702:	b538      	push	{r3, r4, r5, lr}
   d5704:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5706:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5708:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d570a:	f7ff f92d 	bl	d4968 <HAL_USB_USART_Available_Data_For_Write>
   d570e:	2800      	cmp	r0, #0
   d5710:	dc01      	bgt.n	d5716 <_ZN9USBSerial5writeEh+0x14>
   d5712:	7c60      	ldrb	r0, [r4, #17]
   d5714:	b128      	cbz	r0, d5722 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5716:	4629      	mov	r1, r5
   d5718:	7c20      	ldrb	r0, [r4, #16]
   d571a:	f7ff f935 	bl	d4988 <HAL_USB_USART_Send_Data>
   d571e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5722:	bd38      	pop	{r3, r4, r5, pc}

000d5724 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5724:	b510      	push	{r4, lr}
   d5726:	4604      	mov	r4, r0
   d5728:	2300      	movs	r3, #0
   d572a:	6063      	str	r3, [r4, #4]
   d572c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5730:	60a3      	str	r3, [r4, #8]
   d5732:	4b05      	ldr	r3, [pc, #20]	; (d5748 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5734:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5736:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5738:	4608      	mov	r0, r1
{
  _serial = serial;
   d573a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d573c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d573e:	4611      	mov	r1, r2
   d5740:	f7ff f8fa 	bl	d4938 <HAL_USB_USART_Init>
}
   d5744:	4620      	mov	r0, r4
   d5746:	bd10      	pop	{r4, pc}
   d5748:	000d6c78 	.word	0x000d6c78

000d574c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d574c:	2200      	movs	r2, #0
   d574e:	7c00      	ldrb	r0, [r0, #16]
   d5750:	f7ff b8fa 	b.w	d4948 <HAL_USB_USART_Begin>

000d5754 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5754:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5756:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5758:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d575a:	2100      	movs	r1, #0
   d575c:	f001 f81d 	bl	d679a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5760:	4620      	mov	r0, r4
   d5762:	bd10      	pop	{r4, pc}

000d5764 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5764:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5766:	4d0e      	ldr	r5, [pc, #56]	; (d57a0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5768:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d576a:	a801      	add	r0, sp, #4
   d576c:	f7ff fff2 	bl	d5754 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5770:	6829      	ldr	r1, [r5, #0]
   d5772:	f011 0401 	ands.w	r4, r1, #1
   d5776:	d110      	bne.n	d579a <_Z16_fetch_usbserialv+0x36>
   d5778:	4628      	mov	r0, r5
   d577a:	f7fe fc92 	bl	d40a2 <__cxa_guard_acquire>
   d577e:	b160      	cbz	r0, d579a <_Z16_fetch_usbserialv+0x36>
   d5780:	aa01      	add	r2, sp, #4
   d5782:	4621      	mov	r1, r4
   d5784:	4807      	ldr	r0, [pc, #28]	; (d57a4 <_Z16_fetch_usbserialv+0x40>)
   d5786:	f7ff ffcd 	bl	d5724 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d578a:	4628      	mov	r0, r5
   d578c:	f7fe fc8e 	bl	d40ac <__cxa_guard_release>
   d5790:	4a05      	ldr	r2, [pc, #20]	; (d57a8 <_Z16_fetch_usbserialv+0x44>)
   d5792:	4906      	ldr	r1, [pc, #24]	; (d57ac <_Z16_fetch_usbserialv+0x48>)
   d5794:	4803      	ldr	r0, [pc, #12]	; (d57a4 <_Z16_fetch_usbserialv+0x40>)
   d5796:	f000 f97d 	bl	d5a94 <__aeabi_atexit>
	return _usbserial;
}
   d579a:	4802      	ldr	r0, [pc, #8]	; (d57a4 <_Z16_fetch_usbserialv+0x40>)
   d579c:	b007      	add	sp, #28
   d579e:	bd30      	pop	{r4, r5, pc}
   d57a0:	2003e6f8 	.word	0x2003e6f8
   d57a4:	2003e6fc 	.word	0x2003e6fc
   d57a8:	2003e3b8 	.word	0x2003e3b8
   d57ac:	000d56a5 	.word	0x000d56a5

000d57b0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d57b0:	2200      	movs	r2, #0
   d57b2:	4611      	mov	r1, r2
   d57b4:	6840      	ldr	r0, [r0, #4]
   d57b6:	f7ff b953 	b.w	d4a60 <network_ready>

000d57ba <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57ba:	2200      	movs	r2, #0
   d57bc:	4611      	mov	r1, r2
   d57be:	6840      	ldr	r0, [r0, #4]
   d57c0:	f7ff b96e 	b.w	d4aa0 <network_listening>

000d57c4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57c4:	2200      	movs	r2, #0
   d57c6:	4611      	mov	r1, r2
   d57c8:	6840      	ldr	r0, [r0, #4]
   d57ca:	f7ff b979 	b.w	d4ac0 <network_get_listen_timeout>

000d57ce <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57ce:	2200      	movs	r2, #0
   d57d0:	6840      	ldr	r0, [r0, #4]
   d57d2:	f7ff b96d 	b.w	d4ab0 <network_set_listen_timeout>

000d57d6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57d6:	2200      	movs	r2, #0
   d57d8:	f081 0101 	eor.w	r1, r1, #1
   d57dc:	6840      	ldr	r0, [r0, #4]
   d57de:	f7ff b957 	b.w	d4a90 <network_listen>

000d57e2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d57e2:	2300      	movs	r3, #0
   d57e4:	461a      	mov	r2, r3
   d57e6:	4619      	mov	r1, r3
   d57e8:	6840      	ldr	r0, [r0, #4]
   d57ea:	f7ff b949 	b.w	d4a80 <network_off>

000d57ee <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d57ee:	2300      	movs	r3, #0
   d57f0:	461a      	mov	r2, r3
   d57f2:	4619      	mov	r1, r3
   d57f4:	6840      	ldr	r0, [r0, #4]
   d57f6:	f7ff b93b 	b.w	d4a70 <network_on>

000d57fa <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d57fa:	2200      	movs	r2, #0
   d57fc:	4611      	mov	r1, r2
   d57fe:	6840      	ldr	r0, [r0, #4]
   d5800:	f7ff b91e 	b.w	d4a40 <network_connecting>

000d5804 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5804:	2200      	movs	r2, #0
   d5806:	2102      	movs	r1, #2
   d5808:	6840      	ldr	r0, [r0, #4]
   d580a:	f7ff b921 	b.w	d4a50 <network_disconnect>

000d580e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d580e:	2300      	movs	r3, #0
   d5810:	461a      	mov	r2, r3
   d5812:	6840      	ldr	r0, [r0, #4]
   d5814:	f7ff b90c 	b.w	d4a30 <network_connect>

000d5818 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5818:	4b02      	ldr	r3, [pc, #8]	; (d5824 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d581a:	2204      	movs	r2, #4
   d581c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d581e:	4a02      	ldr	r2, [pc, #8]	; (d5828 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5820:	601a      	str	r2, [r3, #0]
   d5822:	4770      	bx	lr
   d5824:	2003e710 	.word	0x2003e710
   d5828:	000d6ca8 	.word	0x000d6ca8

000d582c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d582c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d582e:	4b0c      	ldr	r3, [pc, #48]	; (d5860 <serialEventRun+0x34>)
   d5830:	b133      	cbz	r3, d5840 <serialEventRun+0x14>
   d5832:	f7ff ff97 	bl	d5764 <_Z16_fetch_usbserialv>
   d5836:	6803      	ldr	r3, [r0, #0]
   d5838:	691b      	ldr	r3, [r3, #16]
   d583a:	4798      	blx	r3
   d583c:	2800      	cmp	r0, #0
   d583e:	dc09      	bgt.n	d5854 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5840:	4b08      	ldr	r3, [pc, #32]	; (d5864 <serialEventRun+0x38>)
   d5842:	b163      	cbz	r3, d585e <serialEventRun+0x32>
   d5844:	f7ff ff06 	bl	d5654 <_Z22__fetch_global_Serial1v>
   d5848:	6803      	ldr	r3, [r0, #0]
   d584a:	691b      	ldr	r3, [r3, #16]
   d584c:	4798      	blx	r3
   d584e:	2800      	cmp	r0, #0
   d5850:	dc03      	bgt.n	d585a <serialEventRun+0x2e>
   d5852:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5854:	f3af 8000 	nop.w
   d5858:	e7f2      	b.n	d5840 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d585a:	f3af 8000 	nop.w
   d585e:	bd08      	pop	{r3, pc}
	...

000d5868 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5868:	b508      	push	{r3, lr}
	serialEventRun();
   d586a:	f7ff ffdf 	bl	d582c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d586e:	f7fe ff73 	bl	d4758 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5872:	4b01      	ldr	r3, [pc, #4]	; (d5878 <_post_loop+0x10>)
   d5874:	6018      	str	r0, [r3, #0]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	2003e720 	.word	0x2003e720

000d587c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d587c:	4802      	ldr	r0, [pc, #8]	; (d5888 <_Z33system_initialize_user_backup_ramv+0xc>)
   d587e:	4a03      	ldr	r2, [pc, #12]	; (d588c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5880:	4903      	ldr	r1, [pc, #12]	; (d5890 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5882:	1a12      	subs	r2, r2, r0
   d5884:	f000 bf7e 	b.w	d6784 <memcpy>
   d5888:	2003f400 	.word	0x2003f400
   d588c:	2003f404 	.word	0x2003f404
   d5890:	000d6d80 	.word	0x000d6d80

000d5894 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5894:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5896:	2300      	movs	r3, #0
   d5898:	9300      	str	r3, [sp, #0]
   d589a:	461a      	mov	r2, r3
   d589c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58a0:	f7ff f89c 	bl	d49dc <system_ctrl_set_result>
}
   d58a4:	b003      	add	sp, #12
   d58a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d58ac <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d58ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d58ae:	8843      	ldrh	r3, [r0, #2]
   d58b0:	2b0a      	cmp	r3, #10
   d58b2:	d008      	beq.n	d58c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d58b4:	2b50      	cmp	r3, #80	; 0x50
   d58b6:	d109      	bne.n	d58cc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d58b8:	4b09      	ldr	r3, [pc, #36]	; (d58e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d58ba:	681b      	ldr	r3, [r3, #0]
   d58bc:	b13b      	cbz	r3, d58ce <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d58be:	b003      	add	sp, #12
   d58c0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d58c4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d58c6:	f7ff ffe5 	bl	d5894 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d58ca:	e006      	b.n	d58da <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d58cc:	2300      	movs	r3, #0
   d58ce:	9300      	str	r3, [sp, #0]
   d58d0:	461a      	mov	r2, r3
   d58d2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58d6:	f7ff f881 	bl	d49dc <system_ctrl_set_result>
        break;
    }
}
   d58da:	b003      	add	sp, #12
   d58dc:	f85d fb04 	ldr.w	pc, [sp], #4
   d58e0:	2003e718 	.word	0x2003e718

000d58e4 <module_user_init_hook>:

void module_user_init_hook()
{
   d58e4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d58e6:	4c10      	ldr	r4, [pc, #64]	; (d5928 <module_user_init_hook+0x44>)
   d58e8:	4d10      	ldr	r5, [pc, #64]	; (d592c <module_user_init_hook+0x48>)
   d58ea:	6823      	ldr	r3, [r4, #0]
   d58ec:	42ab      	cmp	r3, r5
   d58ee:	4b10      	ldr	r3, [pc, #64]	; (d5930 <module_user_init_hook+0x4c>)
   d58f0:	bf0c      	ite	eq
   d58f2:	2201      	moveq	r2, #1
   d58f4:	2200      	movne	r2, #0
   d58f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d58f8:	d002      	beq.n	d5900 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d58fa:	f7ff ffbf 	bl	d587c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d58fe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5900:	f7fe ff22 	bl	d4748 <HAL_RNG_GetRandomNumber>
   d5904:	4604      	mov	r4, r0
    srand(seed);
   d5906:	f000 ff51 	bl	d67ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d590a:	4b0a      	ldr	r3, [pc, #40]	; (d5934 <module_user_init_hook+0x50>)
   d590c:	b113      	cbz	r3, d5914 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d590e:	4620      	mov	r0, r4
   d5910:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5914:	2100      	movs	r1, #0
   d5916:	4807      	ldr	r0, [pc, #28]	; (d5934 <module_user_init_hook+0x50>)
   d5918:	f7ff f882 	bl	d4a20 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d591c:	2100      	movs	r1, #0
   d591e:	4806      	ldr	r0, [pc, #24]	; (d5938 <module_user_init_hook+0x54>)
}
   d5920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5924:	f7ff b850 	b.w	d49c8 <system_ctrl_set_app_request_handler>
   d5928:	2003f400 	.word	0x2003f400
   d592c:	9a271c1e 	.word	0x9a271c1e
   d5930:	2003e71c 	.word	0x2003e71c
   d5934:	00000000 	.word	0x00000000
   d5938:	000d58ad 	.word	0x000d58ad

000d593c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d593c:	b510      	push	{r4, lr}
   d593e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5940:	f000 f888 	bl	d5a54 <_ZN8particle7globals11instanceSpiEv>
   d5944:	f7ff fd32 	bl	d53ac <_ZN8SPIClass9isEnabledEv>
   d5948:	b128      	cbz	r0, d5956 <pinAvailable+0x1a>
   d594a:	f1a4 030b 	sub.w	r3, r4, #11
   d594e:	2b02      	cmp	r3, #2
   d5950:	d801      	bhi.n	d5956 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5952:	2000      	movs	r0, #0
   d5954:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5956:	f000 f857 	bl	d5a08 <_Z19__fetch_global_Wirev>
   d595a:	f7ff f9e6 	bl	d4d2a <_ZN7TwoWire9isEnabledEv>
   d595e:	b108      	cbz	r0, d5964 <pinAvailable+0x28>
   d5960:	2c01      	cmp	r4, #1
   d5962:	d9f6      	bls.n	d5952 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5964:	f7ff fe76 	bl	d5654 <_Z22__fetch_global_Serial1v>
   d5968:	f7ff fe70 	bl	d564c <_ZN11USARTSerial9isEnabledEv>
   d596c:	b118      	cbz	r0, d5976 <pinAvailable+0x3a>
   d596e:	f1a4 0309 	sub.w	r3, r4, #9
   d5972:	2b01      	cmp	r3, #1
   d5974:	d9ed      	bls.n	d5952 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5976:	2c23      	cmp	r4, #35	; 0x23
   d5978:	bf8c      	ite	hi
   d597a:	2000      	movhi	r0, #0
   d597c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d597e:	bd10      	pop	{r4, pc}

000d5980 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5980:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5982:	b538      	push	{r3, r4, r5, lr}
   d5984:	4604      	mov	r4, r0
   d5986:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5988:	d80a      	bhi.n	d59a0 <pinMode+0x20>
   d598a:	29ff      	cmp	r1, #255	; 0xff
   d598c:	d008      	beq.n	d59a0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d598e:	f7ff ffd5 	bl	d593c <pinAvailable>
   d5992:	b128      	cbz	r0, d59a0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5994:	4629      	mov	r1, r5
   d5996:	4620      	mov	r0, r4
}
   d5998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d599c:	f7fe beec 	b.w	d4778 <HAL_Pin_Mode>
   d59a0:	bd38      	pop	{r3, r4, r5, pc}

000d59a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d59a2:	b538      	push	{r3, r4, r5, lr}
   d59a4:	4604      	mov	r4, r0
   d59a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d59a8:	f7fe feee 	bl	d4788 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d59ac:	28ff      	cmp	r0, #255	; 0xff
   d59ae:	d010      	beq.n	d59d2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d59b0:	2806      	cmp	r0, #6
   d59b2:	d804      	bhi.n	d59be <digitalWrite+0x1c>
   d59b4:	234d      	movs	r3, #77	; 0x4d
   d59b6:	fa23 f000 	lsr.w	r0, r3, r0
   d59ba:	07c3      	lsls	r3, r0, #31
   d59bc:	d409      	bmi.n	d59d2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d59be:	4620      	mov	r0, r4
   d59c0:	f7ff ffbc 	bl	d593c <pinAvailable>
   d59c4:	b128      	cbz	r0, d59d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d59c6:	4629      	mov	r1, r5
   d59c8:	4620      	mov	r0, r4
}
   d59ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d59ce:	f7fe bee3 	b.w	d4798 <HAL_GPIO_Write>
   d59d2:	bd38      	pop	{r3, r4, r5, pc}

000d59d4 <_Z17acquireWireBufferv>:
   d59d4:	b570      	push	{r4, r5, r6, lr}
   d59d6:	4604      	mov	r4, r0
   d59d8:	2514      	movs	r5, #20
   d59da:	462a      	mov	r2, r5
   d59dc:	4e09      	ldr	r6, [pc, #36]	; (d5a04 <_Z17acquireWireBufferv+0x30>)
   d59de:	2100      	movs	r1, #0
   d59e0:	f000 fedb 	bl	d679a <memset>
   d59e4:	8025      	strh	r5, [r4, #0]
   d59e6:	2520      	movs	r5, #32
   d59e8:	4631      	mov	r1, r6
   d59ea:	60a5      	str	r5, [r4, #8]
   d59ec:	6125      	str	r5, [r4, #16]
   d59ee:	4628      	mov	r0, r5
   d59f0:	f000 f86f 	bl	d5ad2 <_ZnajRKSt9nothrow_t>
   d59f4:	4631      	mov	r1, r6
   d59f6:	6060      	str	r0, [r4, #4]
   d59f8:	4628      	mov	r0, r5
   d59fa:	f000 f86a 	bl	d5ad2 <_ZnajRKSt9nothrow_t>
   d59fe:	60e0      	str	r0, [r4, #12]
   d5a00:	4620      	mov	r0, r4
   d5a02:	bd70      	pop	{r4, r5, r6, pc}
   d5a04:	000d6cd4 	.word	0x000d6cd4

000d5a08 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5a08:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a0a:	4d0e      	ldr	r5, [pc, #56]	; (d5a44 <_Z19__fetch_global_Wirev+0x3c>)
   d5a0c:	6829      	ldr	r1, [r5, #0]
   d5a0e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5a12:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a14:	d113      	bne.n	d5a3e <_Z19__fetch_global_Wirev+0x36>
   d5a16:	4628      	mov	r0, r5
   d5a18:	f7fe fb43 	bl	d40a2 <__cxa_guard_acquire>
   d5a1c:	b178      	cbz	r0, d5a3e <_Z19__fetch_global_Wirev+0x36>
   d5a1e:	a801      	add	r0, sp, #4
   d5a20:	f7ff ffd8 	bl	d59d4 <_Z17acquireWireBufferv>
   d5a24:	aa01      	add	r2, sp, #4
   d5a26:	4621      	mov	r1, r4
   d5a28:	4807      	ldr	r0, [pc, #28]	; (d5a48 <_Z19__fetch_global_Wirev+0x40>)
   d5a2a:	f7ff f929 	bl	d4c80 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5a2e:	4628      	mov	r0, r5
   d5a30:	f7fe fb3c 	bl	d40ac <__cxa_guard_release>
   d5a34:	4a05      	ldr	r2, [pc, #20]	; (d5a4c <_Z19__fetch_global_Wirev+0x44>)
   d5a36:	4906      	ldr	r1, [pc, #24]	; (d5a50 <_Z19__fetch_global_Wirev+0x48>)
   d5a38:	4803      	ldr	r0, [pc, #12]	; (d5a48 <_Z19__fetch_global_Wirev+0x40>)
   d5a3a:	f000 f82b 	bl	d5a94 <__aeabi_atexit>
	return wire;
}
   d5a3e:	4802      	ldr	r0, [pc, #8]	; (d5a48 <_Z19__fetch_global_Wirev+0x40>)
   d5a40:	b007      	add	sp, #28
   d5a42:	bd30      	pop	{r4, r5, pc}
   d5a44:	2003e724 	.word	0x2003e724
   d5a48:	2003e728 	.word	0x2003e728
   d5a4c:	2003e3b8 	.word	0x2003e3b8
   d5a50:	000d4c29 	.word	0x000d4c29

000d5a54 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d5a54:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d5a56:	4d0b      	ldr	r5, [pc, #44]	; (d5a84 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5a58:	6829      	ldr	r1, [r5, #0]
   d5a5a:	f011 0401 	ands.w	r4, r1, #1
   d5a5e:	d10f      	bne.n	d5a80 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5a60:	4628      	mov	r0, r5
   d5a62:	f7fe fb1e 	bl	d40a2 <__cxa_guard_acquire>
   d5a66:	b158      	cbz	r0, d5a80 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5a68:	4621      	mov	r1, r4
   d5a6a:	4807      	ldr	r0, [pc, #28]	; (d5a88 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5a6c:	f7ff fc90 	bl	d5390 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a70:	4628      	mov	r0, r5
   d5a72:	f7fe fb1b 	bl	d40ac <__cxa_guard_release>
   d5a76:	4a05      	ldr	r2, [pc, #20]	; (d5a8c <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5a78:	4905      	ldr	r1, [pc, #20]	; (d5a90 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5a7a:	4803      	ldr	r0, [pc, #12]	; (d5a88 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5a7c:	f000 f80a 	bl	d5a94 <__aeabi_atexit>
    return instance;
}
   d5a80:	4801      	ldr	r0, [pc, #4]	; (d5a88 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5a82:	bd38      	pop	{r3, r4, r5, pc}
   d5a84:	2003e748 	.word	0x2003e748
   d5a88:	2003e73c 	.word	0x2003e73c
   d5a8c:	2003e3b8 	.word	0x2003e3b8
   d5a90:	000d5381 	.word	0x000d5381

000d5a94 <__aeabi_atexit>:
   d5a94:	460b      	mov	r3, r1
   d5a96:	4601      	mov	r1, r0
   d5a98:	4618      	mov	r0, r3
   d5a9a:	f000 be65 	b.w	d6768 <__cxa_atexit>

000d5a9e <_ZdlPvj>:
   d5a9e:	f7fe bafc 	b.w	d409a <_ZdlPv>
	...

000d5aa4 <_ZSt15get_new_handlerv>:
   d5aa4:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <_ZSt15get_new_handlerv+0xc>)
   d5aa6:	6818      	ldr	r0, [r3, #0]
   d5aa8:	f3bf 8f5f 	dmb	sy
   d5aac:	4770      	bx	lr
   d5aae:	bf00      	nop
   d5ab0:	2003e74c 	.word	0x2003e74c

000d5ab4 <_ZnwjRKSt9nothrow_t>:
   d5ab4:	b510      	push	{r4, lr}
   d5ab6:	2800      	cmp	r0, #0
   d5ab8:	bf14      	ite	ne
   d5aba:	4604      	movne	r4, r0
   d5abc:	2401      	moveq	r4, #1
   d5abe:	4620      	mov	r0, r4
   d5ac0:	f7ff f806 	bl	d4ad0 <malloc>
   d5ac4:	b920      	cbnz	r0, d5ad0 <_ZnwjRKSt9nothrow_t+0x1c>
   d5ac6:	f7ff ffed 	bl	d5aa4 <_ZSt15get_new_handlerv>
   d5aca:	b108      	cbz	r0, d5ad0 <_ZnwjRKSt9nothrow_t+0x1c>
   d5acc:	4780      	blx	r0
   d5ace:	e7f6      	b.n	d5abe <_ZnwjRKSt9nothrow_t+0xa>
   d5ad0:	bd10      	pop	{r4, pc}

000d5ad2 <_ZnajRKSt9nothrow_t>:
   d5ad2:	f7ff bfef 	b.w	d5ab4 <_ZnwjRKSt9nothrow_t>
	...

000d5ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5ad8:	4b24      	ldr	r3, [pc, #144]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d0      	lsls	r0, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4b22      	ldr	r3, [pc, #136]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d1      	lsls	r1, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4b20      	ldr	r3, [pc, #128]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5af2:	681a      	ldr	r2, [r3, #0]
   d5af4:	07d2      	lsls	r2, r2, #31
   d5af6:	bf5c      	itt	pl
   d5af8:	2201      	movpl	r2, #1
   d5afa:	601a      	strpl	r2, [r3, #0]
   d5afc:	4b1e      	ldr	r3, [pc, #120]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d0      	lsls	r0, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b1c      	ldr	r3, [pc, #112]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d1      	lsls	r1, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b1a      	ldr	r3, [pc, #104]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d2      	lsls	r2, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b18      	ldr	r3, [pc, #96]	; (d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d0      	lsls	r0, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b16      	ldr	r3, [pc, #88]	; (d5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d1      	lsls	r1, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b14      	ldr	r3, [pc, #80]	; (d5b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d2      	lsls	r2, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b12      	ldr	r3, [pc, #72]	; (d5b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d0      	lsls	r0, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b10      	ldr	r3, [pc, #64]	; (d5b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d1      	lsls	r1, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b0e      	ldr	r3, [pc, #56]	; (d5b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d2      	lsls	r2, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4770      	bx	lr
   d5b6a:	bf00      	nop
   d5b6c:	2003e77c 	.word	0x2003e77c
   d5b70:	2003e778 	.word	0x2003e778
   d5b74:	2003e774 	.word	0x2003e774
   d5b78:	2003e770 	.word	0x2003e770
   d5b7c:	2003e76c 	.word	0x2003e76c
   d5b80:	2003e768 	.word	0x2003e768
   d5b84:	2003e764 	.word	0x2003e764
   d5b88:	2003e760 	.word	0x2003e760
   d5b8c:	2003e75c 	.word	0x2003e75c
   d5b90:	2003e758 	.word	0x2003e758
   d5b94:	2003e754 	.word	0x2003e754
   d5b98:	2003e750 	.word	0x2003e750

000d5b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b9c:	4b18      	ldr	r3, [pc, #96]	; (d5c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d1      	lsls	r1, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b16      	ldr	r3, [pc, #88]	; (d5c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d2      	lsls	r2, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b14      	ldr	r3, [pc, #80]	; (d5c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d0      	lsls	r0, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b12      	ldr	r3, [pc, #72]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d1      	lsls	r1, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4b10      	ldr	r3, [pc, #64]	; (d5c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	07d2      	lsls	r2, r2, #31
   d5bd2:	bf5c      	itt	pl
   d5bd4:	2201      	movpl	r2, #1
   d5bd6:	601a      	strpl	r2, [r3, #0]
   d5bd8:	4b0e      	ldr	r3, [pc, #56]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d0      	lsls	r0, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b0c      	ldr	r3, [pc, #48]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d1      	lsls	r1, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b0a      	ldr	r3, [pc, #40]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d2      	lsls	r2, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4770      	bx	lr
   d5bfe:	bf00      	nop
   d5c00:	2003e79c 	.word	0x2003e79c
   d5c04:	2003e798 	.word	0x2003e798
   d5c08:	2003e794 	.word	0x2003e794
   d5c0c:	2003e790 	.word	0x2003e790
   d5c10:	2003e78c 	.word	0x2003e78c
   d5c14:	2003e788 	.word	0x2003e788
   d5c18:	2003e784 	.word	0x2003e784
   d5c1c:	2003e780 	.word	0x2003e780

000d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c20:	4b18      	ldr	r3, [pc, #96]	; (d5c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c22:	681a      	ldr	r2, [r3, #0]
   d5c24:	07d1      	lsls	r1, r2, #31
   d5c26:	bf5c      	itt	pl
   d5c28:	2201      	movpl	r2, #1
   d5c2a:	601a      	strpl	r2, [r3, #0]
   d5c2c:	4b16      	ldr	r3, [pc, #88]	; (d5c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c2e:	681a      	ldr	r2, [r3, #0]
   d5c30:	07d2      	lsls	r2, r2, #31
   d5c32:	bf5c      	itt	pl
   d5c34:	2201      	movpl	r2, #1
   d5c36:	601a      	strpl	r2, [r3, #0]
   d5c38:	4b14      	ldr	r3, [pc, #80]	; (d5c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c3a:	681a      	ldr	r2, [r3, #0]
   d5c3c:	07d0      	lsls	r0, r2, #31
   d5c3e:	bf5c      	itt	pl
   d5c40:	2201      	movpl	r2, #1
   d5c42:	601a      	strpl	r2, [r3, #0]
   d5c44:	4b12      	ldr	r3, [pc, #72]	; (d5c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c46:	681a      	ldr	r2, [r3, #0]
   d5c48:	07d1      	lsls	r1, r2, #31
   d5c4a:	bf5c      	itt	pl
   d5c4c:	2201      	movpl	r2, #1
   d5c4e:	601a      	strpl	r2, [r3, #0]
   d5c50:	4b10      	ldr	r3, [pc, #64]	; (d5c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c52:	681a      	ldr	r2, [r3, #0]
   d5c54:	07d2      	lsls	r2, r2, #31
   d5c56:	bf5c      	itt	pl
   d5c58:	2201      	movpl	r2, #1
   d5c5a:	601a      	strpl	r2, [r3, #0]
   d5c5c:	4b0e      	ldr	r3, [pc, #56]	; (d5c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c5e:	681a      	ldr	r2, [r3, #0]
   d5c60:	07d0      	lsls	r0, r2, #31
   d5c62:	bf5c      	itt	pl
   d5c64:	2201      	movpl	r2, #1
   d5c66:	601a      	strpl	r2, [r3, #0]
   d5c68:	4b0c      	ldr	r3, [pc, #48]	; (d5c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c6a:	681a      	ldr	r2, [r3, #0]
   d5c6c:	07d1      	lsls	r1, r2, #31
   d5c6e:	bf5c      	itt	pl
   d5c70:	2201      	movpl	r2, #1
   d5c72:	601a      	strpl	r2, [r3, #0]
   d5c74:	4b0a      	ldr	r3, [pc, #40]	; (d5ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c76:	681a      	ldr	r2, [r3, #0]
   d5c78:	07d2      	lsls	r2, r2, #31
   d5c7a:	bf5c      	itt	pl
   d5c7c:	2201      	movpl	r2, #1
   d5c7e:	601a      	strpl	r2, [r3, #0]
   d5c80:	4770      	bx	lr
   d5c82:	bf00      	nop
   d5c84:	2003e7bc 	.word	0x2003e7bc
   d5c88:	2003e7b8 	.word	0x2003e7b8
   d5c8c:	2003e7b4 	.word	0x2003e7b4
   d5c90:	2003e7b0 	.word	0x2003e7b0
   d5c94:	2003e7ac 	.word	0x2003e7ac
   d5c98:	2003e7a8 	.word	0x2003e7a8
   d5c9c:	2003e7a4 	.word	0x2003e7a4
   d5ca0:	2003e7a0 	.word	0x2003e7a0

000d5ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5ca4:	4b24      	ldr	r3, [pc, #144]	; (d5d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5ca6:	681a      	ldr	r2, [r3, #0]
   d5ca8:	07d0      	lsls	r0, r2, #31
   d5caa:	bf5c      	itt	pl
   d5cac:	2201      	movpl	r2, #1
   d5cae:	601a      	strpl	r2, [r3, #0]
   d5cb0:	4b22      	ldr	r3, [pc, #136]	; (d5d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5cb2:	681a      	ldr	r2, [r3, #0]
   d5cb4:	07d1      	lsls	r1, r2, #31
   d5cb6:	bf5c      	itt	pl
   d5cb8:	2201      	movpl	r2, #1
   d5cba:	601a      	strpl	r2, [r3, #0]
   d5cbc:	4b20      	ldr	r3, [pc, #128]	; (d5d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5cbe:	681a      	ldr	r2, [r3, #0]
   d5cc0:	07d2      	lsls	r2, r2, #31
   d5cc2:	bf5c      	itt	pl
   d5cc4:	2201      	movpl	r2, #1
   d5cc6:	601a      	strpl	r2, [r3, #0]
   d5cc8:	4b1e      	ldr	r3, [pc, #120]	; (d5d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5cca:	681a      	ldr	r2, [r3, #0]
   d5ccc:	07d0      	lsls	r0, r2, #31
   d5cce:	bf5c      	itt	pl
   d5cd0:	2201      	movpl	r2, #1
   d5cd2:	601a      	strpl	r2, [r3, #0]
   d5cd4:	4b1c      	ldr	r3, [pc, #112]	; (d5d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5cd6:	681a      	ldr	r2, [r3, #0]
   d5cd8:	07d1      	lsls	r1, r2, #31
   d5cda:	bf5c      	itt	pl
   d5cdc:	2201      	movpl	r2, #1
   d5cde:	601a      	strpl	r2, [r3, #0]
   d5ce0:	4b1a      	ldr	r3, [pc, #104]	; (d5d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5ce2:	681a      	ldr	r2, [r3, #0]
   d5ce4:	07d2      	lsls	r2, r2, #31
   d5ce6:	bf5c      	itt	pl
   d5ce8:	2201      	movpl	r2, #1
   d5cea:	601a      	strpl	r2, [r3, #0]
   d5cec:	4b18      	ldr	r3, [pc, #96]	; (d5d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5cee:	681a      	ldr	r2, [r3, #0]
   d5cf0:	07d0      	lsls	r0, r2, #31
   d5cf2:	bf5c      	itt	pl
   d5cf4:	2201      	movpl	r2, #1
   d5cf6:	601a      	strpl	r2, [r3, #0]
   d5cf8:	4b16      	ldr	r3, [pc, #88]	; (d5d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5cfa:	681a      	ldr	r2, [r3, #0]
   d5cfc:	07d1      	lsls	r1, r2, #31
   d5cfe:	bf5c      	itt	pl
   d5d00:	2201      	movpl	r2, #1
   d5d02:	601a      	strpl	r2, [r3, #0]
   d5d04:	4b14      	ldr	r3, [pc, #80]	; (d5d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5d06:	681a      	ldr	r2, [r3, #0]
   d5d08:	07d2      	lsls	r2, r2, #31
   d5d0a:	bf5c      	itt	pl
   d5d0c:	2201      	movpl	r2, #1
   d5d0e:	601a      	strpl	r2, [r3, #0]
   d5d10:	4b12      	ldr	r3, [pc, #72]	; (d5d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5d12:	681a      	ldr	r2, [r3, #0]
   d5d14:	07d0      	lsls	r0, r2, #31
   d5d16:	bf5c      	itt	pl
   d5d18:	2201      	movpl	r2, #1
   d5d1a:	601a      	strpl	r2, [r3, #0]
   d5d1c:	4b10      	ldr	r3, [pc, #64]	; (d5d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5d1e:	681a      	ldr	r2, [r3, #0]
   d5d20:	07d1      	lsls	r1, r2, #31
   d5d22:	bf5c      	itt	pl
   d5d24:	2201      	movpl	r2, #1
   d5d26:	601a      	strpl	r2, [r3, #0]
   d5d28:	4b0e      	ldr	r3, [pc, #56]	; (d5d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5d2a:	681a      	ldr	r2, [r3, #0]
   d5d2c:	07d2      	lsls	r2, r2, #31
   d5d2e:	bf5c      	itt	pl
   d5d30:	2201      	movpl	r2, #1
   d5d32:	601a      	strpl	r2, [r3, #0]
   d5d34:	4770      	bx	lr
   d5d36:	bf00      	nop
   d5d38:	2003e7ec 	.word	0x2003e7ec
   d5d3c:	2003e7e8 	.word	0x2003e7e8
   d5d40:	2003e7e4 	.word	0x2003e7e4
   d5d44:	2003e7e0 	.word	0x2003e7e0
   d5d48:	2003e7dc 	.word	0x2003e7dc
   d5d4c:	2003e7d8 	.word	0x2003e7d8
   d5d50:	2003e7d4 	.word	0x2003e7d4
   d5d54:	2003e7d0 	.word	0x2003e7d0
   d5d58:	2003e7cc 	.word	0x2003e7cc
   d5d5c:	2003e7c8 	.word	0x2003e7c8
   d5d60:	2003e7c4 	.word	0x2003e7c4
   d5d64:	2003e7c0 	.word	0x2003e7c0

000d5d68 <__aeabi_drsub>:
   d5d68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5d6c:	e002      	b.n	d5d74 <__adddf3>
   d5d6e:	bf00      	nop

000d5d70 <__aeabi_dsub>:
   d5d70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5d74 <__adddf3>:
   d5d74:	b530      	push	{r4, r5, lr}
   d5d76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5d7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5d7e:	ea94 0f05 	teq	r4, r5
   d5d82:	bf08      	it	eq
   d5d84:	ea90 0f02 	teqeq	r0, r2
   d5d88:	bf1f      	itttt	ne
   d5d8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5d8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5d92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5d96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5d9a:	f000 80e2 	beq.w	d5f62 <__adddf3+0x1ee>
   d5d9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5da2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5da6:	bfb8      	it	lt
   d5da8:	426d      	neglt	r5, r5
   d5daa:	dd0c      	ble.n	d5dc6 <__adddf3+0x52>
   d5dac:	442c      	add	r4, r5
   d5dae:	ea80 0202 	eor.w	r2, r0, r2
   d5db2:	ea81 0303 	eor.w	r3, r1, r3
   d5db6:	ea82 0000 	eor.w	r0, r2, r0
   d5dba:	ea83 0101 	eor.w	r1, r3, r1
   d5dbe:	ea80 0202 	eor.w	r2, r0, r2
   d5dc2:	ea81 0303 	eor.w	r3, r1, r3
   d5dc6:	2d36      	cmp	r5, #54	; 0x36
   d5dc8:	bf88      	it	hi
   d5dca:	bd30      	pophi	{r4, r5, pc}
   d5dcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5dd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5dd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5dd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5ddc:	d002      	beq.n	d5de4 <__adddf3+0x70>
   d5dde:	4240      	negs	r0, r0
   d5de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5de4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5de8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5dec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5df0:	d002      	beq.n	d5df8 <__adddf3+0x84>
   d5df2:	4252      	negs	r2, r2
   d5df4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5df8:	ea94 0f05 	teq	r4, r5
   d5dfc:	f000 80a7 	beq.w	d5f4e <__adddf3+0x1da>
   d5e00:	f1a4 0401 	sub.w	r4, r4, #1
   d5e04:	f1d5 0e20 	rsbs	lr, r5, #32
   d5e08:	db0d      	blt.n	d5e26 <__adddf3+0xb2>
   d5e0a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5e0e:	fa22 f205 	lsr.w	r2, r2, r5
   d5e12:	1880      	adds	r0, r0, r2
   d5e14:	f141 0100 	adc.w	r1, r1, #0
   d5e18:	fa03 f20e 	lsl.w	r2, r3, lr
   d5e1c:	1880      	adds	r0, r0, r2
   d5e1e:	fa43 f305 	asr.w	r3, r3, r5
   d5e22:	4159      	adcs	r1, r3
   d5e24:	e00e      	b.n	d5e44 <__adddf3+0xd0>
   d5e26:	f1a5 0520 	sub.w	r5, r5, #32
   d5e2a:	f10e 0e20 	add.w	lr, lr, #32
   d5e2e:	2a01      	cmp	r2, #1
   d5e30:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5e34:	bf28      	it	cs
   d5e36:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5e3a:	fa43 f305 	asr.w	r3, r3, r5
   d5e3e:	18c0      	adds	r0, r0, r3
   d5e40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5e44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e48:	d507      	bpl.n	d5e5a <__adddf3+0xe6>
   d5e4a:	f04f 0e00 	mov.w	lr, #0
   d5e4e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5e52:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5e56:	eb6e 0101 	sbc.w	r1, lr, r1
   d5e5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5e5e:	d31b      	bcc.n	d5e98 <__adddf3+0x124>
   d5e60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5e64:	d30c      	bcc.n	d5e80 <__adddf3+0x10c>
   d5e66:	0849      	lsrs	r1, r1, #1
   d5e68:	ea5f 0030 	movs.w	r0, r0, rrx
   d5e6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5e70:	f104 0401 	add.w	r4, r4, #1
   d5e74:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5e78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5e7c:	f080 809a 	bcs.w	d5fb4 <__adddf3+0x240>
   d5e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5e84:	bf08      	it	eq
   d5e86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5e8a:	f150 0000 	adcs.w	r0, r0, #0
   d5e8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5e92:	ea41 0105 	orr.w	r1, r1, r5
   d5e96:	bd30      	pop	{r4, r5, pc}
   d5e98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5e9c:	4140      	adcs	r0, r0
   d5e9e:	eb41 0101 	adc.w	r1, r1, r1
   d5ea2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ea6:	f1a4 0401 	sub.w	r4, r4, #1
   d5eaa:	d1e9      	bne.n	d5e80 <__adddf3+0x10c>
   d5eac:	f091 0f00 	teq	r1, #0
   d5eb0:	bf04      	itt	eq
   d5eb2:	4601      	moveq	r1, r0
   d5eb4:	2000      	moveq	r0, #0
   d5eb6:	fab1 f381 	clz	r3, r1
   d5eba:	bf08      	it	eq
   d5ebc:	3320      	addeq	r3, #32
   d5ebe:	f1a3 030b 	sub.w	r3, r3, #11
   d5ec2:	f1b3 0220 	subs.w	r2, r3, #32
   d5ec6:	da0c      	bge.n	d5ee2 <__adddf3+0x16e>
   d5ec8:	320c      	adds	r2, #12
   d5eca:	dd08      	ble.n	d5ede <__adddf3+0x16a>
   d5ecc:	f102 0c14 	add.w	ip, r2, #20
   d5ed0:	f1c2 020c 	rsb	r2, r2, #12
   d5ed4:	fa01 f00c 	lsl.w	r0, r1, ip
   d5ed8:	fa21 f102 	lsr.w	r1, r1, r2
   d5edc:	e00c      	b.n	d5ef8 <__adddf3+0x184>
   d5ede:	f102 0214 	add.w	r2, r2, #20
   d5ee2:	bfd8      	it	le
   d5ee4:	f1c2 0c20 	rsble	ip, r2, #32
   d5ee8:	fa01 f102 	lsl.w	r1, r1, r2
   d5eec:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5ef0:	bfdc      	itt	le
   d5ef2:	ea41 010c 	orrle.w	r1, r1, ip
   d5ef6:	4090      	lslle	r0, r2
   d5ef8:	1ae4      	subs	r4, r4, r3
   d5efa:	bfa2      	ittt	ge
   d5efc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5f00:	4329      	orrge	r1, r5
   d5f02:	bd30      	popge	{r4, r5, pc}
   d5f04:	ea6f 0404 	mvn.w	r4, r4
   d5f08:	3c1f      	subs	r4, #31
   d5f0a:	da1c      	bge.n	d5f46 <__adddf3+0x1d2>
   d5f0c:	340c      	adds	r4, #12
   d5f0e:	dc0e      	bgt.n	d5f2e <__adddf3+0x1ba>
   d5f10:	f104 0414 	add.w	r4, r4, #20
   d5f14:	f1c4 0220 	rsb	r2, r4, #32
   d5f18:	fa20 f004 	lsr.w	r0, r0, r4
   d5f1c:	fa01 f302 	lsl.w	r3, r1, r2
   d5f20:	ea40 0003 	orr.w	r0, r0, r3
   d5f24:	fa21 f304 	lsr.w	r3, r1, r4
   d5f28:	ea45 0103 	orr.w	r1, r5, r3
   d5f2c:	bd30      	pop	{r4, r5, pc}
   d5f2e:	f1c4 040c 	rsb	r4, r4, #12
   d5f32:	f1c4 0220 	rsb	r2, r4, #32
   d5f36:	fa20 f002 	lsr.w	r0, r0, r2
   d5f3a:	fa01 f304 	lsl.w	r3, r1, r4
   d5f3e:	ea40 0003 	orr.w	r0, r0, r3
   d5f42:	4629      	mov	r1, r5
   d5f44:	bd30      	pop	{r4, r5, pc}
   d5f46:	fa21 f004 	lsr.w	r0, r1, r4
   d5f4a:	4629      	mov	r1, r5
   d5f4c:	bd30      	pop	{r4, r5, pc}
   d5f4e:	f094 0f00 	teq	r4, #0
   d5f52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5f56:	bf06      	itte	eq
   d5f58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5f5c:	3401      	addeq	r4, #1
   d5f5e:	3d01      	subne	r5, #1
   d5f60:	e74e      	b.n	d5e00 <__adddf3+0x8c>
   d5f62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f66:	bf18      	it	ne
   d5f68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5f6c:	d029      	beq.n	d5fc2 <__adddf3+0x24e>
   d5f6e:	ea94 0f05 	teq	r4, r5
   d5f72:	bf08      	it	eq
   d5f74:	ea90 0f02 	teqeq	r0, r2
   d5f78:	d005      	beq.n	d5f86 <__adddf3+0x212>
   d5f7a:	ea54 0c00 	orrs.w	ip, r4, r0
   d5f7e:	bf04      	itt	eq
   d5f80:	4619      	moveq	r1, r3
   d5f82:	4610      	moveq	r0, r2
   d5f84:	bd30      	pop	{r4, r5, pc}
   d5f86:	ea91 0f03 	teq	r1, r3
   d5f8a:	bf1e      	ittt	ne
   d5f8c:	2100      	movne	r1, #0
   d5f8e:	2000      	movne	r0, #0
   d5f90:	bd30      	popne	{r4, r5, pc}
   d5f92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5f96:	d105      	bne.n	d5fa4 <__adddf3+0x230>
   d5f98:	0040      	lsls	r0, r0, #1
   d5f9a:	4149      	adcs	r1, r1
   d5f9c:	bf28      	it	cs
   d5f9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5fa2:	bd30      	pop	{r4, r5, pc}
   d5fa4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5fa8:	bf3c      	itt	cc
   d5faa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5fae:	bd30      	popcc	{r4, r5, pc}
   d5fb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5fb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5fbc:	f04f 0000 	mov.w	r0, #0
   d5fc0:	bd30      	pop	{r4, r5, pc}
   d5fc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5fc6:	bf1a      	itte	ne
   d5fc8:	4619      	movne	r1, r3
   d5fca:	4610      	movne	r0, r2
   d5fcc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5fd0:	bf1c      	itt	ne
   d5fd2:	460b      	movne	r3, r1
   d5fd4:	4602      	movne	r2, r0
   d5fd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5fda:	bf06      	itte	eq
   d5fdc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5fe0:	ea91 0f03 	teqeq	r1, r3
   d5fe4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5fe8:	bd30      	pop	{r4, r5, pc}
   d5fea:	bf00      	nop

000d5fec <__aeabi_ui2d>:
   d5fec:	f090 0f00 	teq	r0, #0
   d5ff0:	bf04      	itt	eq
   d5ff2:	2100      	moveq	r1, #0
   d5ff4:	4770      	bxeq	lr
   d5ff6:	b530      	push	{r4, r5, lr}
   d5ff8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ffc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6000:	f04f 0500 	mov.w	r5, #0
   d6004:	f04f 0100 	mov.w	r1, #0
   d6008:	e750      	b.n	d5eac <__adddf3+0x138>
   d600a:	bf00      	nop

000d600c <__aeabi_i2d>:
   d600c:	f090 0f00 	teq	r0, #0
   d6010:	bf04      	itt	eq
   d6012:	2100      	moveq	r1, #0
   d6014:	4770      	bxeq	lr
   d6016:	b530      	push	{r4, r5, lr}
   d6018:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d601c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6020:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6024:	bf48      	it	mi
   d6026:	4240      	negmi	r0, r0
   d6028:	f04f 0100 	mov.w	r1, #0
   d602c:	e73e      	b.n	d5eac <__adddf3+0x138>
   d602e:	bf00      	nop

000d6030 <__aeabi_f2d>:
   d6030:	0042      	lsls	r2, r0, #1
   d6032:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6036:	ea4f 0131 	mov.w	r1, r1, rrx
   d603a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d603e:	bf1f      	itttt	ne
   d6040:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6044:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6048:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d604c:	4770      	bxne	lr
   d604e:	f092 0f00 	teq	r2, #0
   d6052:	bf14      	ite	ne
   d6054:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6058:	4770      	bxeq	lr
   d605a:	b530      	push	{r4, r5, lr}
   d605c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6060:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6064:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6068:	e720      	b.n	d5eac <__adddf3+0x138>
   d606a:	bf00      	nop

000d606c <__aeabi_ul2d>:
   d606c:	ea50 0201 	orrs.w	r2, r0, r1
   d6070:	bf08      	it	eq
   d6072:	4770      	bxeq	lr
   d6074:	b530      	push	{r4, r5, lr}
   d6076:	f04f 0500 	mov.w	r5, #0
   d607a:	e00a      	b.n	d6092 <__aeabi_l2d+0x16>

000d607c <__aeabi_l2d>:
   d607c:	ea50 0201 	orrs.w	r2, r0, r1
   d6080:	bf08      	it	eq
   d6082:	4770      	bxeq	lr
   d6084:	b530      	push	{r4, r5, lr}
   d6086:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d608a:	d502      	bpl.n	d6092 <__aeabi_l2d+0x16>
   d608c:	4240      	negs	r0, r0
   d608e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6092:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6096:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d609a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d609e:	f43f aedc 	beq.w	d5e5a <__adddf3+0xe6>
   d60a2:	f04f 0203 	mov.w	r2, #3
   d60a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60aa:	bf18      	it	ne
   d60ac:	3203      	addne	r2, #3
   d60ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60b2:	bf18      	it	ne
   d60b4:	3203      	addne	r2, #3
   d60b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d60ba:	f1c2 0320 	rsb	r3, r2, #32
   d60be:	fa00 fc03 	lsl.w	ip, r0, r3
   d60c2:	fa20 f002 	lsr.w	r0, r0, r2
   d60c6:	fa01 fe03 	lsl.w	lr, r1, r3
   d60ca:	ea40 000e 	orr.w	r0, r0, lr
   d60ce:	fa21 f102 	lsr.w	r1, r1, r2
   d60d2:	4414      	add	r4, r2
   d60d4:	e6c1      	b.n	d5e5a <__adddf3+0xe6>
   d60d6:	bf00      	nop

000d60d8 <__aeabi_dmul>:
   d60d8:	b570      	push	{r4, r5, r6, lr}
   d60da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d60de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d60e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d60e6:	bf1d      	ittte	ne
   d60e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d60ec:	ea94 0f0c 	teqne	r4, ip
   d60f0:	ea95 0f0c 	teqne	r5, ip
   d60f4:	f000 f8de 	bleq	d62b4 <__aeabi_dmul+0x1dc>
   d60f8:	442c      	add	r4, r5
   d60fa:	ea81 0603 	eor.w	r6, r1, r3
   d60fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6102:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6106:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d610a:	bf18      	it	ne
   d610c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6110:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6118:	d038      	beq.n	d618c <__aeabi_dmul+0xb4>
   d611a:	fba0 ce02 	umull	ip, lr, r0, r2
   d611e:	f04f 0500 	mov.w	r5, #0
   d6122:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6126:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d612a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d612e:	f04f 0600 	mov.w	r6, #0
   d6132:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6136:	f09c 0f00 	teq	ip, #0
   d613a:	bf18      	it	ne
   d613c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6140:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6144:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6148:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d614c:	d204      	bcs.n	d6158 <__aeabi_dmul+0x80>
   d614e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6152:	416d      	adcs	r5, r5
   d6154:	eb46 0606 	adc.w	r6, r6, r6
   d6158:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d615c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6160:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6164:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6168:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d616c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6170:	bf88      	it	hi
   d6172:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6176:	d81e      	bhi.n	d61b6 <__aeabi_dmul+0xde>
   d6178:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d617c:	bf08      	it	eq
   d617e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6182:	f150 0000 	adcs.w	r0, r0, #0
   d6186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d618a:	bd70      	pop	{r4, r5, r6, pc}
   d618c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6190:	ea46 0101 	orr.w	r1, r6, r1
   d6194:	ea40 0002 	orr.w	r0, r0, r2
   d6198:	ea81 0103 	eor.w	r1, r1, r3
   d619c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d61a0:	bfc2      	ittt	gt
   d61a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d61a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d61aa:	bd70      	popgt	{r4, r5, r6, pc}
   d61ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61b0:	f04f 0e00 	mov.w	lr, #0
   d61b4:	3c01      	subs	r4, #1
   d61b6:	f300 80ab 	bgt.w	d6310 <__aeabi_dmul+0x238>
   d61ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d61be:	bfde      	ittt	le
   d61c0:	2000      	movle	r0, #0
   d61c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d61c6:	bd70      	pople	{r4, r5, r6, pc}
   d61c8:	f1c4 0400 	rsb	r4, r4, #0
   d61cc:	3c20      	subs	r4, #32
   d61ce:	da35      	bge.n	d623c <__aeabi_dmul+0x164>
   d61d0:	340c      	adds	r4, #12
   d61d2:	dc1b      	bgt.n	d620c <__aeabi_dmul+0x134>
   d61d4:	f104 0414 	add.w	r4, r4, #20
   d61d8:	f1c4 0520 	rsb	r5, r4, #32
   d61dc:	fa00 f305 	lsl.w	r3, r0, r5
   d61e0:	fa20 f004 	lsr.w	r0, r0, r4
   d61e4:	fa01 f205 	lsl.w	r2, r1, r5
   d61e8:	ea40 0002 	orr.w	r0, r0, r2
   d61ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d61f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d61f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d61f8:	fa21 f604 	lsr.w	r6, r1, r4
   d61fc:	eb42 0106 	adc.w	r1, r2, r6
   d6200:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6204:	bf08      	it	eq
   d6206:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d620a:	bd70      	pop	{r4, r5, r6, pc}
   d620c:	f1c4 040c 	rsb	r4, r4, #12
   d6210:	f1c4 0520 	rsb	r5, r4, #32
   d6214:	fa00 f304 	lsl.w	r3, r0, r4
   d6218:	fa20 f005 	lsr.w	r0, r0, r5
   d621c:	fa01 f204 	lsl.w	r2, r1, r4
   d6220:	ea40 0002 	orr.w	r0, r0, r2
   d6224:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6228:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d622c:	f141 0100 	adc.w	r1, r1, #0
   d6230:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6234:	bf08      	it	eq
   d6236:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d623a:	bd70      	pop	{r4, r5, r6, pc}
   d623c:	f1c4 0520 	rsb	r5, r4, #32
   d6240:	fa00 f205 	lsl.w	r2, r0, r5
   d6244:	ea4e 0e02 	orr.w	lr, lr, r2
   d6248:	fa20 f304 	lsr.w	r3, r0, r4
   d624c:	fa01 f205 	lsl.w	r2, r1, r5
   d6250:	ea43 0302 	orr.w	r3, r3, r2
   d6254:	fa21 f004 	lsr.w	r0, r1, r4
   d6258:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d625c:	fa21 f204 	lsr.w	r2, r1, r4
   d6260:	ea20 0002 	bic.w	r0, r0, r2
   d6264:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6268:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d626c:	bf08      	it	eq
   d626e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6272:	bd70      	pop	{r4, r5, r6, pc}
   d6274:	f094 0f00 	teq	r4, #0
   d6278:	d10f      	bne.n	d629a <__aeabi_dmul+0x1c2>
   d627a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d627e:	0040      	lsls	r0, r0, #1
   d6280:	eb41 0101 	adc.w	r1, r1, r1
   d6284:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6288:	bf08      	it	eq
   d628a:	3c01      	subeq	r4, #1
   d628c:	d0f7      	beq.n	d627e <__aeabi_dmul+0x1a6>
   d628e:	ea41 0106 	orr.w	r1, r1, r6
   d6292:	f095 0f00 	teq	r5, #0
   d6296:	bf18      	it	ne
   d6298:	4770      	bxne	lr
   d629a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d629e:	0052      	lsls	r2, r2, #1
   d62a0:	eb43 0303 	adc.w	r3, r3, r3
   d62a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d62a8:	bf08      	it	eq
   d62aa:	3d01      	subeq	r5, #1
   d62ac:	d0f7      	beq.n	d629e <__aeabi_dmul+0x1c6>
   d62ae:	ea43 0306 	orr.w	r3, r3, r6
   d62b2:	4770      	bx	lr
   d62b4:	ea94 0f0c 	teq	r4, ip
   d62b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d62bc:	bf18      	it	ne
   d62be:	ea95 0f0c 	teqne	r5, ip
   d62c2:	d00c      	beq.n	d62de <__aeabi_dmul+0x206>
   d62c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d62c8:	bf18      	it	ne
   d62ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d62ce:	d1d1      	bne.n	d6274 <__aeabi_dmul+0x19c>
   d62d0:	ea81 0103 	eor.w	r1, r1, r3
   d62d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d62d8:	f04f 0000 	mov.w	r0, #0
   d62dc:	bd70      	pop	{r4, r5, r6, pc}
   d62de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d62e2:	bf06      	itte	eq
   d62e4:	4610      	moveq	r0, r2
   d62e6:	4619      	moveq	r1, r3
   d62e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d62ec:	d019      	beq.n	d6322 <__aeabi_dmul+0x24a>
   d62ee:	ea94 0f0c 	teq	r4, ip
   d62f2:	d102      	bne.n	d62fa <__aeabi_dmul+0x222>
   d62f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d62f8:	d113      	bne.n	d6322 <__aeabi_dmul+0x24a>
   d62fa:	ea95 0f0c 	teq	r5, ip
   d62fe:	d105      	bne.n	d630c <__aeabi_dmul+0x234>
   d6300:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6304:	bf1c      	itt	ne
   d6306:	4610      	movne	r0, r2
   d6308:	4619      	movne	r1, r3
   d630a:	d10a      	bne.n	d6322 <__aeabi_dmul+0x24a>
   d630c:	ea81 0103 	eor.w	r1, r1, r3
   d6310:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6314:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6318:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d631c:	f04f 0000 	mov.w	r0, #0
   d6320:	bd70      	pop	{r4, r5, r6, pc}
   d6322:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6326:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d632a:	bd70      	pop	{r4, r5, r6, pc}

000d632c <__aeabi_ddiv>:
   d632c:	b570      	push	{r4, r5, r6, lr}
   d632e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6332:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6336:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d633a:	bf1d      	ittte	ne
   d633c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6340:	ea94 0f0c 	teqne	r4, ip
   d6344:	ea95 0f0c 	teqne	r5, ip
   d6348:	f000 f8a7 	bleq	d649a <__aeabi_ddiv+0x16e>
   d634c:	eba4 0405 	sub.w	r4, r4, r5
   d6350:	ea81 0e03 	eor.w	lr, r1, r3
   d6354:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6358:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d635c:	f000 8088 	beq.w	d6470 <__aeabi_ddiv+0x144>
   d6360:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6364:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6368:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d636c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6370:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6374:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6378:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d637c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6380:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6384:	429d      	cmp	r5, r3
   d6386:	bf08      	it	eq
   d6388:	4296      	cmpeq	r6, r2
   d638a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d638e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6392:	d202      	bcs.n	d639a <__aeabi_ddiv+0x6e>
   d6394:	085b      	lsrs	r3, r3, #1
   d6396:	ea4f 0232 	mov.w	r2, r2, rrx
   d639a:	1ab6      	subs	r6, r6, r2
   d639c:	eb65 0503 	sbc.w	r5, r5, r3
   d63a0:	085b      	lsrs	r3, r3, #1
   d63a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d63a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d63aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d63ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d63b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63b6:	bf22      	ittt	cs
   d63b8:	1ab6      	subcs	r6, r6, r2
   d63ba:	4675      	movcs	r5, lr
   d63bc:	ea40 000c 	orrcs.w	r0, r0, ip
   d63c0:	085b      	lsrs	r3, r3, #1
   d63c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d63c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d63ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63ce:	bf22      	ittt	cs
   d63d0:	1ab6      	subcs	r6, r6, r2
   d63d2:	4675      	movcs	r5, lr
   d63d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d63d8:	085b      	lsrs	r3, r3, #1
   d63da:	ea4f 0232 	mov.w	r2, r2, rrx
   d63de:	ebb6 0e02 	subs.w	lr, r6, r2
   d63e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63e6:	bf22      	ittt	cs
   d63e8:	1ab6      	subcs	r6, r6, r2
   d63ea:	4675      	movcs	r5, lr
   d63ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d63f0:	085b      	lsrs	r3, r3, #1
   d63f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d63f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d63fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63fe:	bf22      	ittt	cs
   d6400:	1ab6      	subcs	r6, r6, r2
   d6402:	4675      	movcs	r5, lr
   d6404:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6408:	ea55 0e06 	orrs.w	lr, r5, r6
   d640c:	d018      	beq.n	d6440 <__aeabi_ddiv+0x114>
   d640e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6412:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6416:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d641a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d641e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6422:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6426:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d642a:	d1c0      	bne.n	d63ae <__aeabi_ddiv+0x82>
   d642c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6430:	d10b      	bne.n	d644a <__aeabi_ddiv+0x11e>
   d6432:	ea41 0100 	orr.w	r1, r1, r0
   d6436:	f04f 0000 	mov.w	r0, #0
   d643a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d643e:	e7b6      	b.n	d63ae <__aeabi_ddiv+0x82>
   d6440:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6444:	bf04      	itt	eq
   d6446:	4301      	orreq	r1, r0
   d6448:	2000      	moveq	r0, #0
   d644a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d644e:	bf88      	it	hi
   d6450:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6454:	f63f aeaf 	bhi.w	d61b6 <__aeabi_dmul+0xde>
   d6458:	ebb5 0c03 	subs.w	ip, r5, r3
   d645c:	bf04      	itt	eq
   d645e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6462:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6466:	f150 0000 	adcs.w	r0, r0, #0
   d646a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d646e:	bd70      	pop	{r4, r5, r6, pc}
   d6470:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6474:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6478:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d647c:	bfc2      	ittt	gt
   d647e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6482:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6486:	bd70      	popgt	{r4, r5, r6, pc}
   d6488:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d648c:	f04f 0e00 	mov.w	lr, #0
   d6490:	3c01      	subs	r4, #1
   d6492:	e690      	b.n	d61b6 <__aeabi_dmul+0xde>
   d6494:	ea45 0e06 	orr.w	lr, r5, r6
   d6498:	e68d      	b.n	d61b6 <__aeabi_dmul+0xde>
   d649a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d649e:	ea94 0f0c 	teq	r4, ip
   d64a2:	bf08      	it	eq
   d64a4:	ea95 0f0c 	teqeq	r5, ip
   d64a8:	f43f af3b 	beq.w	d6322 <__aeabi_dmul+0x24a>
   d64ac:	ea94 0f0c 	teq	r4, ip
   d64b0:	d10a      	bne.n	d64c8 <__aeabi_ddiv+0x19c>
   d64b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d64b6:	f47f af34 	bne.w	d6322 <__aeabi_dmul+0x24a>
   d64ba:	ea95 0f0c 	teq	r5, ip
   d64be:	f47f af25 	bne.w	d630c <__aeabi_dmul+0x234>
   d64c2:	4610      	mov	r0, r2
   d64c4:	4619      	mov	r1, r3
   d64c6:	e72c      	b.n	d6322 <__aeabi_dmul+0x24a>
   d64c8:	ea95 0f0c 	teq	r5, ip
   d64cc:	d106      	bne.n	d64dc <__aeabi_ddiv+0x1b0>
   d64ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d64d2:	f43f aefd 	beq.w	d62d0 <__aeabi_dmul+0x1f8>
   d64d6:	4610      	mov	r0, r2
   d64d8:	4619      	mov	r1, r3
   d64da:	e722      	b.n	d6322 <__aeabi_dmul+0x24a>
   d64dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d64e0:	bf18      	it	ne
   d64e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d64e6:	f47f aec5 	bne.w	d6274 <__aeabi_dmul+0x19c>
   d64ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d64ee:	f47f af0d 	bne.w	d630c <__aeabi_dmul+0x234>
   d64f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d64f6:	f47f aeeb 	bne.w	d62d0 <__aeabi_dmul+0x1f8>
   d64fa:	e712      	b.n	d6322 <__aeabi_dmul+0x24a>

000d64fc <__gedf2>:
   d64fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6500:	e006      	b.n	d6510 <__cmpdf2+0x4>
   d6502:	bf00      	nop

000d6504 <__ledf2>:
   d6504:	f04f 0c01 	mov.w	ip, #1
   d6508:	e002      	b.n	d6510 <__cmpdf2+0x4>
   d650a:	bf00      	nop

000d650c <__cmpdf2>:
   d650c:	f04f 0c01 	mov.w	ip, #1
   d6510:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6514:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6518:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d651c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6520:	bf18      	it	ne
   d6522:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6526:	d01b      	beq.n	d6560 <__cmpdf2+0x54>
   d6528:	b001      	add	sp, #4
   d652a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d652e:	bf0c      	ite	eq
   d6530:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6534:	ea91 0f03 	teqne	r1, r3
   d6538:	bf02      	ittt	eq
   d653a:	ea90 0f02 	teqeq	r0, r2
   d653e:	2000      	moveq	r0, #0
   d6540:	4770      	bxeq	lr
   d6542:	f110 0f00 	cmn.w	r0, #0
   d6546:	ea91 0f03 	teq	r1, r3
   d654a:	bf58      	it	pl
   d654c:	4299      	cmppl	r1, r3
   d654e:	bf08      	it	eq
   d6550:	4290      	cmpeq	r0, r2
   d6552:	bf2c      	ite	cs
   d6554:	17d8      	asrcs	r0, r3, #31
   d6556:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d655a:	f040 0001 	orr.w	r0, r0, #1
   d655e:	4770      	bx	lr
   d6560:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6568:	d102      	bne.n	d6570 <__cmpdf2+0x64>
   d656a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d656e:	d107      	bne.n	d6580 <__cmpdf2+0x74>
   d6570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6574:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6578:	d1d6      	bne.n	d6528 <__cmpdf2+0x1c>
   d657a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d657e:	d0d3      	beq.n	d6528 <__cmpdf2+0x1c>
   d6580:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6584:	4770      	bx	lr
   d6586:	bf00      	nop

000d6588 <__aeabi_cdrcmple>:
   d6588:	4684      	mov	ip, r0
   d658a:	4610      	mov	r0, r2
   d658c:	4662      	mov	r2, ip
   d658e:	468c      	mov	ip, r1
   d6590:	4619      	mov	r1, r3
   d6592:	4663      	mov	r3, ip
   d6594:	e000      	b.n	d6598 <__aeabi_cdcmpeq>
   d6596:	bf00      	nop

000d6598 <__aeabi_cdcmpeq>:
   d6598:	b501      	push	{r0, lr}
   d659a:	f7ff ffb7 	bl	d650c <__cmpdf2>
   d659e:	2800      	cmp	r0, #0
   d65a0:	bf48      	it	mi
   d65a2:	f110 0f00 	cmnmi.w	r0, #0
   d65a6:	bd01      	pop	{r0, pc}

000d65a8 <__aeabi_dcmpeq>:
   d65a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65ac:	f7ff fff4 	bl	d6598 <__aeabi_cdcmpeq>
   d65b0:	bf0c      	ite	eq
   d65b2:	2001      	moveq	r0, #1
   d65b4:	2000      	movne	r0, #0
   d65b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d65ba:	bf00      	nop

000d65bc <__aeabi_dcmplt>:
   d65bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65c0:	f7ff ffea 	bl	d6598 <__aeabi_cdcmpeq>
   d65c4:	bf34      	ite	cc
   d65c6:	2001      	movcc	r0, #1
   d65c8:	2000      	movcs	r0, #0
   d65ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d65ce:	bf00      	nop

000d65d0 <__aeabi_dcmple>:
   d65d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65d4:	f7ff ffe0 	bl	d6598 <__aeabi_cdcmpeq>
   d65d8:	bf94      	ite	ls
   d65da:	2001      	movls	r0, #1
   d65dc:	2000      	movhi	r0, #0
   d65de:	f85d fb08 	ldr.w	pc, [sp], #8
   d65e2:	bf00      	nop

000d65e4 <__aeabi_dcmpge>:
   d65e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65e8:	f7ff ffce 	bl	d6588 <__aeabi_cdrcmple>
   d65ec:	bf94      	ite	ls
   d65ee:	2001      	movls	r0, #1
   d65f0:	2000      	movhi	r0, #0
   d65f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d65f6:	bf00      	nop

000d65f8 <__aeabi_dcmpgt>:
   d65f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65fc:	f7ff ffc4 	bl	d6588 <__aeabi_cdrcmple>
   d6600:	bf34      	ite	cc
   d6602:	2001      	movcc	r0, #1
   d6604:	2000      	movcs	r0, #0
   d6606:	f85d fb08 	ldr.w	pc, [sp], #8
   d660a:	bf00      	nop

000d660c <__aeabi_dcmpun>:
   d660c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6614:	d102      	bne.n	d661c <__aeabi_dcmpun+0x10>
   d6616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d661a:	d10a      	bne.n	d6632 <__aeabi_dcmpun+0x26>
   d661c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6624:	d102      	bne.n	d662c <__aeabi_dcmpun+0x20>
   d6626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d662a:	d102      	bne.n	d6632 <__aeabi_dcmpun+0x26>
   d662c:	f04f 0000 	mov.w	r0, #0
   d6630:	4770      	bx	lr
   d6632:	f04f 0001 	mov.w	r0, #1
   d6636:	4770      	bx	lr

000d6638 <__aeabi_d2iz>:
   d6638:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d663c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6640:	d215      	bcs.n	d666e <__aeabi_d2iz+0x36>
   d6642:	d511      	bpl.n	d6668 <__aeabi_d2iz+0x30>
   d6644:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6648:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d664c:	d912      	bls.n	d6674 <__aeabi_d2iz+0x3c>
   d664e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6656:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d665a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d665e:	fa23 f002 	lsr.w	r0, r3, r2
   d6662:	bf18      	it	ne
   d6664:	4240      	negne	r0, r0
   d6666:	4770      	bx	lr
   d6668:	f04f 0000 	mov.w	r0, #0
   d666c:	4770      	bx	lr
   d666e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6672:	d105      	bne.n	d6680 <__aeabi_d2iz+0x48>
   d6674:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6678:	bf08      	it	eq
   d667a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d667e:	4770      	bx	lr
   d6680:	f04f 0000 	mov.w	r0, #0
   d6684:	4770      	bx	lr
   d6686:	bf00      	nop

000d6688 <__aeabi_d2uiz>:
   d6688:	004a      	lsls	r2, r1, #1
   d668a:	d211      	bcs.n	d66b0 <__aeabi_d2uiz+0x28>
   d668c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6690:	d211      	bcs.n	d66b6 <__aeabi_d2uiz+0x2e>
   d6692:	d50d      	bpl.n	d66b0 <__aeabi_d2uiz+0x28>
   d6694:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6698:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d669c:	d40e      	bmi.n	d66bc <__aeabi_d2uiz+0x34>
   d669e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d66a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d66a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d66aa:	fa23 f002 	lsr.w	r0, r3, r2
   d66ae:	4770      	bx	lr
   d66b0:	f04f 0000 	mov.w	r0, #0
   d66b4:	4770      	bx	lr
   d66b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d66ba:	d102      	bne.n	d66c2 <__aeabi_d2uiz+0x3a>
   d66bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d66c0:	4770      	bx	lr
   d66c2:	f04f 0000 	mov.w	r0, #0
   d66c6:	4770      	bx	lr

000d66c8 <__aeabi_d2f>:
   d66c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d66cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d66d0:	bf24      	itt	cs
   d66d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d66d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d66da:	d90d      	bls.n	d66f8 <__aeabi_d2f+0x30>
   d66dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d66e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d66e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d66e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d66ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d66f0:	bf08      	it	eq
   d66f2:	f020 0001 	biceq.w	r0, r0, #1
   d66f6:	4770      	bx	lr
   d66f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d66fc:	d121      	bne.n	d6742 <__aeabi_d2f+0x7a>
   d66fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6702:	bfbc      	itt	lt
   d6704:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6708:	4770      	bxlt	lr
   d670a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d670e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6712:	f1c2 0218 	rsb	r2, r2, #24
   d6716:	f1c2 0c20 	rsb	ip, r2, #32
   d671a:	fa10 f30c 	lsls.w	r3, r0, ip
   d671e:	fa20 f002 	lsr.w	r0, r0, r2
   d6722:	bf18      	it	ne
   d6724:	f040 0001 	orrne.w	r0, r0, #1
   d6728:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d672c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6730:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6734:	ea40 000c 	orr.w	r0, r0, ip
   d6738:	fa23 f302 	lsr.w	r3, r3, r2
   d673c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6740:	e7cc      	b.n	d66dc <__aeabi_d2f+0x14>
   d6742:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6746:	d107      	bne.n	d6758 <__aeabi_d2f+0x90>
   d6748:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d674c:	bf1e      	ittt	ne
   d674e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6752:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6756:	4770      	bxne	lr
   d6758:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d675c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6760:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6764:	4770      	bx	lr
   d6766:	bf00      	nop

000d6768 <__cxa_atexit>:
   d6768:	b510      	push	{r4, lr}
   d676a:	4c05      	ldr	r4, [pc, #20]	; (d6780 <__cxa_atexit+0x18>)
   d676c:	4613      	mov	r3, r2
   d676e:	b12c      	cbz	r4, d677c <__cxa_atexit+0x14>
   d6770:	460a      	mov	r2, r1
   d6772:	4601      	mov	r1, r0
   d6774:	2002      	movs	r0, #2
   d6776:	f3af 8000 	nop.w
   d677a:	bd10      	pop	{r4, pc}
   d677c:	4620      	mov	r0, r4
   d677e:	bd10      	pop	{r4, pc}
   d6780:	00000000 	.word	0x00000000

000d6784 <memcpy>:
   d6784:	b510      	push	{r4, lr}
   d6786:	1e43      	subs	r3, r0, #1
   d6788:	440a      	add	r2, r1
   d678a:	4291      	cmp	r1, r2
   d678c:	d004      	beq.n	d6798 <memcpy+0x14>
   d678e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6792:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6796:	e7f8      	b.n	d678a <memcpy+0x6>
   d6798:	bd10      	pop	{r4, pc}

000d679a <memset>:
   d679a:	4402      	add	r2, r0
   d679c:	4603      	mov	r3, r0
   d679e:	4293      	cmp	r3, r2
   d67a0:	d002      	beq.n	d67a8 <memset+0xe>
   d67a2:	f803 1b01 	strb.w	r1, [r3], #1
   d67a6:	e7fa      	b.n	d679e <memset+0x4>
   d67a8:	4770      	bx	lr
	...

000d67ac <srand>:
   d67ac:	b538      	push	{r3, r4, r5, lr}
   d67ae:	4b12      	ldr	r3, [pc, #72]	; (d67f8 <srand+0x4c>)
   d67b0:	681c      	ldr	r4, [r3, #0]
   d67b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67b4:	4605      	mov	r5, r0
   d67b6:	b9d3      	cbnz	r3, d67ee <srand+0x42>
   d67b8:	2018      	movs	r0, #24
   d67ba:	f7fe f989 	bl	d4ad0 <malloc>
   d67be:	f243 330e 	movw	r3, #13070	; 0x330e
   d67c2:	63a0      	str	r0, [r4, #56]	; 0x38
   d67c4:	8003      	strh	r3, [r0, #0]
   d67c6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d67ca:	8043      	strh	r3, [r0, #2]
   d67cc:	f241 2334 	movw	r3, #4660	; 0x1234
   d67d0:	8083      	strh	r3, [r0, #4]
   d67d2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d67d6:	80c3      	strh	r3, [r0, #6]
   d67d8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d67dc:	8103      	strh	r3, [r0, #8]
   d67de:	2305      	movs	r3, #5
   d67e0:	8143      	strh	r3, [r0, #10]
   d67e2:	230b      	movs	r3, #11
   d67e4:	8183      	strh	r3, [r0, #12]
   d67e6:	2201      	movs	r2, #1
   d67e8:	2300      	movs	r3, #0
   d67ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d67ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67f0:	2200      	movs	r2, #0
   d67f2:	611d      	str	r5, [r3, #16]
   d67f4:	615a      	str	r2, [r3, #20]
   d67f6:	bd38      	pop	{r3, r4, r5, pc}
   d67f8:	2003e3b4 	.word	0x2003e3b4

000d67fc <strcmp>:
   d67fc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6800:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6804:	2a01      	cmp	r2, #1
   d6806:	bf28      	it	cs
   d6808:	429a      	cmpcs	r2, r3
   d680a:	d0f7      	beq.n	d67fc <strcmp>
   d680c:	1ad0      	subs	r0, r2, r3
   d680e:	4770      	bx	lr

000d6810 <strlen>:
   d6810:	4603      	mov	r3, r0
   d6812:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6816:	2a00      	cmp	r2, #0
   d6818:	d1fb      	bne.n	d6812 <strlen+0x2>
   d681a:	1a18      	subs	r0, r3, r0
   d681c:	3801      	subs	r0, #1
   d681e:	4770      	bx	lr

000d6820 <strncmp>:
   d6820:	b530      	push	{r4, r5, lr}
   d6822:	b182      	cbz	r2, d6846 <strncmp+0x26>
   d6824:	1e45      	subs	r5, r0, #1
   d6826:	3901      	subs	r1, #1
   d6828:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d682c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6830:	42a3      	cmp	r3, r4
   d6832:	d106      	bne.n	d6842 <strncmp+0x22>
   d6834:	43ec      	mvns	r4, r5
   d6836:	4414      	add	r4, r2
   d6838:	42e0      	cmn	r0, r4
   d683a:	d001      	beq.n	d6840 <strncmp+0x20>
   d683c:	2b00      	cmp	r3, #0
   d683e:	d1f3      	bne.n	d6828 <strncmp+0x8>
   d6840:	461c      	mov	r4, r3
   d6842:	1b18      	subs	r0, r3, r4
   d6844:	bd30      	pop	{r4, r5, pc}
   d6846:	4610      	mov	r0, r2
   d6848:	bd30      	pop	{r4, r5, pc}

000d684a <link_code_end>:
	...

000d684c <dynalib_user>:
   d684c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d685c:	0000 0000 4948 4847 4c00 574f 4400 4100     ....HIGH.LOW.D.A
   d686c:	4300 7275 6572 746e 3d20 0020 694c 656e     .Current = .Line
   d687c:	4620 6572 7571 6e65 7963 3d20 0020 6e41      Frequency = .An
   d688c:	6c61 676f 4920 706e 7475 5620 6c6f 6174     alog Input Volta
   d689c:	6567 3d20 0020 6f50 6577 2072 6146 7463     ge = .Power Fact
   d68ac:	726f 3d20 0020 6341 6974 6576 5020 776f     or = .Active Pow
   d68bc:	7265 3d20 0020 6552 6361 6974 6576 5020     er = .Reactive P
   d68cc:	776f 7265 3d20 0020 7041 6170 6572 746e     ower = .Apparent
   d68dc:	5020 776f 7265 3d20 0020 7245 6f72 2072      Power = .Error 
   d68ec:	6877 6c69 2065 6567 7474 6e69 2067 6574     while getting te
   d68fc:	706d 7265 7461 7275 0065 6554 706d 7265     mperature.Temper
   d690c:	7461 7275 3a65 0020 6420 6765 6572 7365     ature: . degrees
   d691c:	2820 2000 6166 7268 6e65 6568 7469 0029      (. fahrenheit).
   d692c:	6964 6967 6174 776c 6972 6574 4900 4332     digitalwrite.I2C
   d693c:	6220 7375 5320 6174 7574 2073 7553 6363      bus Status Succ
   d694c:	7365 2073 203d 4200 7375 2079 6974 656d     ess = .Busy time
   d695c:	756f 2074 7075 6e6f 6520 746e 7265 6e69     out upon enterin
   d696c:	2067 6e65 5464 6172 736e 696d 7373 6f69     g endTransmissio
   d697c:	286e 2029 203d 5300 6174 7472 6220 7469     n() = .Start bit
   d698c:	6720 6e65 7265 7461 6f69 206e 6974 656d      generation time
   d699c:	756f 2074 203d 6500 646e 6f20 2066 6461     out = .end of ad
   d69ac:	7264 7365 2073 7274 6e61 6d73 7369 6973     dress transmissi
   d69bc:	6e6f 7420 6d69 6f65 7475 3d20 0020 6144     on timeout = .Da
   d69cc:	6174 6220 7479 2065 7274 6e61 6673 7265     ta byte transfer
   d69dc:	7420 6d69 6f65 7475 3d20 0020 6144 6174      timeout = .Data
   d69ec:	6220 7479 2065 7274 6e61 6673 7265 7320      byte transfer s
   d69fc:	6375 6563 6465 6465 202c 7562 7973 7420     ucceeded, busy t
   d6a0c:	6d69 6f65 7475 6920 6d6d 6465 6169 6574     imeout immediate
   d6a1c:	796c 6120 7466 7265 3d20 0020 6843 6365     ly after = .Chec
   d6a2c:	736b 6d75 3d20 0020 6572 6156 3a6c 0000     ksum = .reVal:..

000d6a3c <_ZTVN5spark13EthernetClassE>:
	...
   d6a44:	4c0b 000d 4c01 000d 4bf7 000d 4bed 000d     .L...L...K...K..
   d6a54:	4be1 000d 4bd5 000d 4bc9 000d 4bc1 000d     .K...K...K...K..
   d6a64:	4bb7 000d 4bad 000d 500d 000d               .K...K...P..

000d6a70 <_ZTV7TwoWire>:
	...
   d6a78:	4c29 000d 4c73 000d 4c4b 000d 4c2b 000d     )L..sL..KL..+L..
   d6a88:	4c53 000d 4c5b 000d 4c63 000d 4c6b 000d     SL..[L..cL..kL..

000d6a98 <_ZTV9IPAddress>:
	...
   d6aa0:	4d43 000d 4d33 000d 4d35 000d 6162 6475     CM..3M..5M..baud
   d6ab0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6ac0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6ad0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6ae0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6af0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6b00:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6b10:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6b20:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d6b30:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6b40:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6b50:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d6b60:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d6b70:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d6b80:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d6b8c <_ZTVN5spark9MeshClassE>:
	...
   d6b94:	4e87 000d 4e7d 000d 4e73 000d 4e69 000d     .N..}N..sN..iN..
   d6ba4:	4e5d 000d 4e51 000d 4e45 000d 4e3d 000d     ]N..QN..EN..=N..
   d6bb4:	4e33 000d 4e29 000d 500d 000d               3N..)N...P..

000d6bc0 <_ZTVN5spark12NetworkClassE>:
	...
   d6bc8:	4fa5 000d 4faf 000d 4fb9 000d 4fc3 000d     .O...O...O...O..
   d6bd8:	4fcd 000d 4fd9 000d 4fe5 000d 4ff1 000d     .O...O...O...O..
   d6be8:	4ff9 000d 5003 000d 500d 000d 616e 006e     .O...P...P..nan.
   d6bf8:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000d6c04 <_ZTV8SPIClass>:
	...
   d6c0c:	5381 000d 5383 000d 005a 2b25 3330 3a64     .S...S..Z.%+03d:
   d6c1c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d6c2c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d6c3c:	0000 0000                                   ....

000d6c40 <_ZTV11USARTSerial>:
	...
   d6c48:	559d 000d 55ed 000d 55fb 000d 50ed 000d     .U...U...U...P..
   d6c58:	55b1 000d 55d3 000d 55bf 000d 55e7 000d     .U...U...U...U..
   d6c68:	559f 000d 55a3 000d                         .U...U..

000d6c70 <_ZTV9USBSerial>:
	...
   d6c78:	56a5 000d 56f5 000d 5703 000d 50ed 000d     .V...V...W...P..
   d6c88:	56e1 000d 56a7 000d 56bd 000d 56ef 000d     .V...V...V...V..
   d6c98:	56d3 000d 56a1 000d                         .V...V..

000d6ca0 <_ZTVN5spark9WiFiClassE>:
	...
   d6ca8:	580f 000d 5805 000d 57fb 000d 57b1 000d     .X...X...W...W..
   d6cb8:	57ef 000d 57e3 000d 57d7 000d 57cf 000d     .W...W...W...W..
   d6cc8:	57c5 000d 57bb 000d 500d 000d               .W...W...P..

000d6cd4 <_ZSt7nothrow>:
   d6cd4:	0000 0000                                   ....

000d6cd8 <__sf_fake_stdin>:
	...

000d6cf8 <__sf_fake_stdout>:
	...

000d6d18 <__sf_fake_stderr>:
	...
   d6d38:	0043                                        C.

000d6d3a <link_const_variable_data_end>:
	...

000d6d3c <link_constructors_location>:
   d6d3c:	000d4681 	.word	0x000d4681
   d6d40:	000d46f3 	.word	0x000d46f3
   d6d44:	000d4b19 	.word	0x000d4b19
   d6d48:	000d4c15 	.word	0x000d4c15
   d6d4c:	000d4e19 	.word	0x000d4e19
   d6d50:	000d4f55 	.word	0x000d4f55
   d6d54:	000d50d9 	.word	0x000d50d9
   d6d58:	000d5365 	.word	0x000d5365
   d6d5c:	000d5555 	.word	0x000d5555
   d6d60:	000d5589 	.word	0x000d5589
   d6d64:	000d5819 	.word	0x000d5819
   d6d68:	000d5ad9 	.word	0x000d5ad9
   d6d6c:	000d5b9d 	.word	0x000d5b9d
   d6d70:	000d5c21 	.word	0x000d5c21
   d6d74:	000d5ca5 	.word	0x000d5ca5

000d6d78 <link_constructors_end>:
	...
