
/Users/nicholas/Documents/Particle/I2C-MCP32F521/target/1.5.2/photon/I2C-MCP32F521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002960  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2980  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a2984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000574  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a29ec  080a29ec  000229ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2a14  080a2a14  00022a14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0008839a  00000000  00000000  00022a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c09b  00000000  00000000  000aadb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ebcf  00000000  00000000  000b6e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000017f0  00000000  00000000  000c5a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002918  00000000  00000000  000c720c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021445  00000000  00000000  000c9b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001b680  00000000  00000000  000eaf69  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a92ed  00000000  00000000  001065e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a398  00000000  00000000  001af8d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 fa39 	bl	80a24a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 fa3e 	bl	80a24be <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a2984 	.word	0x080a2984
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000068 	.word	0x20000068
 80a0058:	200005dc 	.word	0x200005dc
 80a005c:	200005dc 	.word	0x200005dc

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 f8c7 	bl	80a11f4 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a2944 	.word	0x080a2944
 80a0088:	080a2974 	.word	0x080a2974

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b902 	b.w	80a0294 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f9d7 	bl	80a0444 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 b86d 	b.w	80a1178 <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f000 bba9 	b.w	80a07f4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
 80a00b2:	0000      	movs	r0, r0
 80a00b4:	0000      	movs	r0, r0
	...

080a00b8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData>:
    return 5; 
  }
  return 0;
}
void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
 80a00b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a00bc:	4605      	mov	r5, r0
  fData->voltageRMS = data->voltageRMS/10.0f;
 80a00be:	8880      	ldrh	r0, [r0, #4]
    return 5; 
  }
  return 0;
}
void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
 80a00c0:	460c      	mov	r4, r1
  fData->voltageRMS = data->voltageRMS/10.0f;
 80a00c2:	f002 f83f 	bl	80a2144 <__aeabi_i2f>
 80a00c6:	4938      	ldr	r1, [pc, #224]	; (80a01a8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0xf0>)
 80a00c8:	f002 f944 	bl	80a2354 <__aeabi_fdiv>
 80a00cc:	6060      	str	r0, [r4, #4]
  fData->currentRMS = data->currentRMS/10000.0f;
 80a00ce:	68e8      	ldr	r0, [r5, #12]
 80a00d0:	f002 f834 	bl	80a213c <__aeabi_ui2f>
 80a00d4:	4935      	ldr	r1, [pc, #212]	; (80a01ac <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0xf4>)
 80a00d6:	f002 f93d 	bl	80a2354 <__aeabi_fdiv>
 80a00da:	6160      	str	r0, [r4, #20]
  fData->lineFrequency = data->lineFrequency/1000.0f;
 80a00dc:	88e8      	ldrh	r0, [r5, #6]
 80a00de:	f002 f831 	bl	80a2144 <__aeabi_i2f>
 80a00e2:	4933      	ldr	r1, [pc, #204]	; (80a01b0 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0xf8>)
 80a00e4:	f002 f936 	bl	80a2354 <__aeabi_fdiv>
 80a00e8:	60a0      	str	r0, [r4, #8]
  // Analog Input Voltage represents ADC data for 10 bit ADC
  // The register value/1023 * 3.3v will give the analog input voltage in volts.
  // analogInputVoltage = RegData/1023.0 * 3.3;
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
 80a00ea:	8928      	ldrh	r0, [r5, #8]
 80a00ec:	f002 f82a 	bl	80a2144 <__aeabi_i2f>
 80a00f0:	4930      	ldr	r1, [pc, #192]	; (80a01b4 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0xfc>)
 80a00f2:	f002 f92f 	bl	80a2354 <__aeabi_fdiv>
 80a00f6:	f001 fbcf 	bl	80a1898 <__aeabi_f2d>
 80a00fa:	a329      	add	r3, pc, #164	; (adr r3, 80a01a0 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0xe8>)
 80a00fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0100:	f001 fc1e 	bl	80a1940 <__aeabi_dmul>
 80a0104:	f001 ff14 	bl	80a1f30 <__aeabi_d2f>
 80a0108:	60e0      	str	r0, [r4, #12]
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
 80a010a:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
 80a010e:	260e      	movs	r6, #14
 80a0110:	ea4f 70db 	mov.w	r0, fp, lsr #31
 80a0114:	f001 fbae 	bl	80a1874 <__aeabi_i2d>
 80a0118:	f001 ff0a 	bl	80a1f30 <__aeabi_d2f>
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
 80a011c:	f04f 0a01 	mov.w	sl, #1
  // The register value/1023 * 3.3v will give the analog input voltage in volts.
  // analogInputVoltage = RegData/1023.0 * 3.3;
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
 80a0120:	f100 4700 	add.w	r7, r0, #2147483648	; 0x80000000
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
 80a0124:	fa0a f006 	lsl.w	r0, sl, r6
 80a0128:	ea00 000b 	and.w	r0, r0, fp
 80a012c:	4130      	asrs	r0, r6
 80a012e:	f001 fba1 	bl	80a1874 <__aeabi_i2d>
 80a0132:	4680      	mov	r8, r0
 80a0134:	f1c6 000f 	rsb	r0, r6, #15
 80a0138:	fa0a f000 	lsl.w	r0, sl, r0
 80a013c:	4689      	mov	r9, r1
 80a013e:	f001 fb99 	bl	80a1874 <__aeabi_i2d>
 80a0142:	4602      	mov	r2, r0
 80a0144:	460b      	mov	r3, r1
 80a0146:	4640      	mov	r0, r8
 80a0148:	4649      	mov	r1, r9
 80a014a:	f001 fd23 	bl	80a1b94 <__aeabi_ddiv>
 80a014e:	4680      	mov	r8, r0
 80a0150:	4638      	mov	r0, r7
 80a0152:	4689      	mov	r9, r1
 80a0154:	f001 fba0 	bl	80a1898 <__aeabi_f2d>
 80a0158:	4602      	mov	r2, r0
 80a015a:	460b      	mov	r3, r1
 80a015c:	4640      	mov	r0, r8
 80a015e:	4649      	mov	r1, r9
 80a0160:	f001 fa3c 	bl	80a15dc <__adddf3>
 80a0164:	f001 fee4 	bl	80a1f30 <__aeabi_d2f>
 80a0168:	3e01      	subs	r6, #1
  // analogInputVoltage = RegData/1023.0 * 3.3;
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  for(ch=14; ch > 3; ch--)
 80a016a:	2e03      	cmp	r6, #3
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
 80a016c:	4607      	mov	r7, r0
  // analogInputVoltage = RegData/1023.0 * 3.3;
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  for(ch=14; ch > 3; ch--)
 80a016e:	d1d9      	bne.n	80a0124 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x6c>
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
  fData->powerFactor = f;
 80a0170:	6120      	str	r0, [r4, #16]
  fData->activePower = data->activePower/100.0f;
 80a0172:	6928      	ldr	r0, [r5, #16]
 80a0174:	f001 ffe2 	bl	80a213c <__aeabi_ui2f>
 80a0178:	490f      	ldr	r1, [pc, #60]	; (80a01b8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x100>)
 80a017a:	f002 f8eb 	bl	80a2354 <__aeabi_fdiv>
 80a017e:	61a0      	str	r0, [r4, #24]
  fData->reactivePower = data->reactivePower/100.0f;
 80a0180:	6968      	ldr	r0, [r5, #20]
 80a0182:	f001 ffdb 	bl	80a213c <__aeabi_ui2f>
 80a0186:	490c      	ldr	r1, [pc, #48]	; (80a01b8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x100>)
 80a0188:	f002 f8e4 	bl	80a2354 <__aeabi_fdiv>
 80a018c:	61e0      	str	r0, [r4, #28]
  fData->apparentPower = data->apparentPower/100.0f;
 80a018e:	69a8      	ldr	r0, [r5, #24]
 80a0190:	f001 ffd4 	bl	80a213c <__aeabi_ui2f>
 80a0194:	4908      	ldr	r1, [pc, #32]	; (80a01b8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x100>)
 80a0196:	f002 f8dd 	bl	80a2354 <__aeabi_fdiv>
 80a019a:	6220      	str	r0, [r4, #32]
 80a019c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a01a0:	66666666 	.word	0x66666666
 80a01a4:	400a6666 	.word	0x400a6666
 80a01a8:	41200000 	.word	0x41200000
 80a01ac:	461c4000 	.word	0x461c4000
 80a01b0:	447a0000 	.word	0x447a0000
 80a01b4:	447fc000 	.word	0x447fc000
 80a01b8:	42c80000 	.word	0x42c80000

080a01bc <_Z18printMCP39F521DataP23MCP39F521_FormattedData>:
}

void printMCP39F521Data(MCP39F521_FormattedData *data)
{
 80a01bc:	b510      	push	{r4, lr}
 80a01be:	4604      	mov	r4, r0
  Serial.print(F("Voltage = ")); Serial.println(data->voltageRMS, 4);
 80a01c0:	f000 fee6 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a01c4:	492b      	ldr	r1, [pc, #172]	; (80a0274 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xb8>)
 80a01c6:	f000 fca8 	bl	80a0b1a <_ZN5Print5printEPK19__FlashStringHelper>
 80a01ca:	f000 fee1 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a01ce:	2204      	movs	r2, #4
 80a01d0:	6861      	ldr	r1, [r4, #4]
 80a01d2:	f000 fd99 	bl	80a0d08 <_ZN5Print7printlnEfi>
  Serial.print(F("Current = ")); Serial.println(data->currentRMS, 4);
 80a01d6:	f000 fedb 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a01da:	4927      	ldr	r1, [pc, #156]	; (80a0278 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xbc>)
 80a01dc:	f000 fc9d 	bl	80a0b1a <_ZN5Print5printEPK19__FlashStringHelper>
 80a01e0:	f000 fed6 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a01e4:	2204      	movs	r2, #4
 80a01e6:	6961      	ldr	r1, [r4, #20]
 80a01e8:	f000 fd8e 	bl	80a0d08 <_ZN5Print7printlnEfi>
  Serial.print(F("Line Frequency = ")); Serial.println(data->lineFrequency, 4);
 80a01ec:	f000 fed0 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a01f0:	4922      	ldr	r1, [pc, #136]	; (80a027c <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xc0>)
 80a01f2:	f000 fc92 	bl	80a0b1a <_ZN5Print5printEPK19__FlashStringHelper>
 80a01f6:	f000 fecb 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a01fa:	2204      	movs	r2, #4
 80a01fc:	68a1      	ldr	r1, [r4, #8]
 80a01fe:	f000 fd83 	bl	80a0d08 <_ZN5Print7printlnEfi>
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
 80a0202:	f000 fec5 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0206:	491e      	ldr	r1, [pc, #120]	; (80a0280 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xc4>)
 80a0208:	f000 fc80 	bl	80a0b0c <_ZN5Print5printEPKc>
 80a020c:	f000 fec0 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0210:	2204      	movs	r2, #4
 80a0212:	68e1      	ldr	r1, [r4, #12]
 80a0214:	f000 fd78 	bl	80a0d08 <_ZN5Print7printlnEfi>
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
 80a0218:	f000 feba 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a021c:	4919      	ldr	r1, [pc, #100]	; (80a0284 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xc8>)
 80a021e:	f000 fc7c 	bl	80a0b1a <_ZN5Print5printEPK19__FlashStringHelper>
 80a0222:	f000 feb5 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0226:	2204      	movs	r2, #4
 80a0228:	6921      	ldr	r1, [r4, #16]
 80a022a:	f000 fd6d 	bl	80a0d08 <_ZN5Print7printlnEfi>
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
 80a022e:	f000 feaf 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0232:	4915      	ldr	r1, [pc, #84]	; (80a0288 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xcc>)
 80a0234:	f000 fc71 	bl	80a0b1a <_ZN5Print5printEPK19__FlashStringHelper>
 80a0238:	f000 feaa 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a023c:	2204      	movs	r2, #4
 80a023e:	69a1      	ldr	r1, [r4, #24]
 80a0240:	f000 fd62 	bl	80a0d08 <_ZN5Print7printlnEfi>
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
 80a0244:	f000 fea4 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0248:	4910      	ldr	r1, [pc, #64]	; (80a028c <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xd0>)
 80a024a:	f000 fc66 	bl	80a0b1a <_ZN5Print5printEPK19__FlashStringHelper>
 80a024e:	f000 fe9f 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0252:	2204      	movs	r2, #4
 80a0254:	69e1      	ldr	r1, [r4, #28]
 80a0256:	f000 fd57 	bl	80a0d08 <_ZN5Print7printlnEfi>
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
 80a025a:	f000 fe99 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a025e:	490c      	ldr	r1, [pc, #48]	; (80a0290 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xd4>)
 80a0260:	f000 fc5b 	bl	80a0b1a <_ZN5Print5printEPK19__FlashStringHelper>
 80a0264:	f000 fe94 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0268:	6a21      	ldr	r1, [r4, #32]
 80a026a:	2204      	movs	r2, #4
}
 80a026c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.print(F("Line Frequency = ")); Serial.println(data->lineFrequency, 4);
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
 80a0270:	f000 bd4a 	b.w	80a0d08 <_ZN5Print7printlnEfi>
 80a0274:	080a256e 	.word	0x080a256e
 80a0278:	080a2544 	.word	0x080a2544
 80a027c:	080a254f 	.word	0x080a254f
 80a0280:	080a2561 	.word	0x080a2561
 80a0284:	080a2579 	.word	0x080a2579
 80a0288:	080a2589 	.word	0x080a2589
 80a028c:	080a2599 	.word	0x080a2599
 80a0290:	080a25ab 	.word	0x080a25ab

080a0294 <setup>:
}

void setup() {
 80a0294:	b508      	push	{r3, lr}
    //WiFi.off();
    Serial.begin(115200);
 80a0296:	f000 fe7b 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a029a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a029e:	f000 fe5d 	bl	80a0f5c <_ZN9USBSerial5beginEl>
    //Wire.setSpeed(CLOCK_SPEED_400KHZ);
    //Wire.stretchClock(true);
    Wire.begin();
 80a02a2:	f000 ffed 	bl	80a1280 <_Z19__fetch_global_Wirev>
}
 80a02a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {
    //WiFi.off();
    Serial.begin(115200);
    //Wire.setSpeed(CLOCK_SPEED_400KHZ);
    //Wire.stretchClock(true);
    Wire.begin();
 80a02aa:	f000 baf5 	b.w	80a0898 <_ZN7TwoWire5beginEv>

080a02ae <_ZN5Print7printlnIhLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
 80a02ae:	b538      	push	{r3, r4, r5, lr}
 80a02b0:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 80a02b2:	b91a      	cbnz	r2, 80a02bc <_ZN5Print7printlnIhLi0EEEjT_i+0xe>
        return write(n);
 80a02b4:	6803      	ldr	r3, [r0, #0]
 80a02b6:	689b      	ldr	r3, [r3, #8]
 80a02b8:	4798      	blx	r3
 80a02ba:	e002      	b.n	80a02c2 <_ZN5Print7printlnIhLi0EEEjT_i+0x14>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a02bc:	b2d2      	uxtb	r2, r2
 80a02be:	f000 fc3c 	bl	80a0b3a <_ZN5Print11printNumberEmh>
 80a02c2:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 80a02c4:	4628      	mov	r0, r5
 80a02c6:	f000 fc2c 	bl	80a0b22 <_ZN5Print7printlnEv>
        return n;
    }
 80a02ca:	4420      	add	r0, r4
 80a02cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a02d0 <_Z10wireErrorsh>:
	float activePower;
	float reactivePower;
	float apparentPower;
} MCP39F521_FormattedData;

void wireErrors(uint8_t i2c_bus_Status){
 80a02d0:	b510      	push	{r4, lr}
  if(i2c_bus_Status == 0){
 80a02d2:	4604      	mov	r4, r0
 80a02d4:	b918      	cbnz	r0, 80a02de <_Z10wireErrorsh+0xe>
    Serial.print("I2C bus Status Success::"); Serial.println(i2c_bus_Status);
 80a02d6:	f000 fe5b 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a02da:	4914      	ldr	r1, [pc, #80]	; (80a032c <_Z10wireErrorsh+0x5c>)
 80a02dc:	e01c      	b.n	80a0318 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 1){
 80a02de:	2801      	cmp	r0, #1
 80a02e0:	d103      	bne.n	80a02ea <_Z10wireErrorsh+0x1a>
    Serial.print("Busy timeout upon entering endTransmission()::"); Serial.println(i2c_bus_Status);
 80a02e2:	f000 fe55 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a02e6:	4912      	ldr	r1, [pc, #72]	; (80a0330 <_Z10wireErrorsh+0x60>)
 80a02e8:	e016      	b.n	80a0318 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 2){
 80a02ea:	2802      	cmp	r0, #2
 80a02ec:	d103      	bne.n	80a02f6 <_Z10wireErrorsh+0x26>
    Serial.print("Start bit generation timeout::"); Serial.println(i2c_bus_Status);
 80a02ee:	f000 fe4f 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a02f2:	4910      	ldr	r1, [pc, #64]	; (80a0334 <_Z10wireErrorsh+0x64>)
 80a02f4:	e010      	b.n	80a0318 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 3){
 80a02f6:	2803      	cmp	r0, #3
 80a02f8:	d103      	bne.n	80a0302 <_Z10wireErrorsh+0x32>
    Serial.print("end of address transmission timeout::"); Serial.println(i2c_bus_Status);
 80a02fa:	f000 fe49 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a02fe:	490e      	ldr	r1, [pc, #56]	; (80a0338 <_Z10wireErrorsh+0x68>)
 80a0300:	e00a      	b.n	80a0318 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 4){
 80a0302:	2804      	cmp	r0, #4
 80a0304:	d103      	bne.n	80a030e <_Z10wireErrorsh+0x3e>
    Serial.print("Data byte transfer timeout::"); Serial.println(i2c_bus_Status);
 80a0306:	f000 fe43 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a030a:	490c      	ldr	r1, [pc, #48]	; (80a033c <_Z10wireErrorsh+0x6c>)
 80a030c:	e004      	b.n	80a0318 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 5){
 80a030e:	2805      	cmp	r0, #5
 80a0310:	d10a      	bne.n	80a0328 <_Z10wireErrorsh+0x58>
    Serial.print("Data byte transfer succeeded, busy timeout immediately after::"); Serial.println(i2c_bus_Status);
 80a0312:	f000 fe3d 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0316:	490a      	ldr	r1, [pc, #40]	; (80a0340 <_Z10wireErrorsh+0x70>)
 80a0318:	f000 fbf8 	bl	80a0b0c <_ZN5Print5printEPKc>
 80a031c:	f000 fe38 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0320:	220a      	movs	r2, #10
 80a0322:	4621      	mov	r1, r4
 80a0324:	f7ff ffc3 	bl	80a02ae <_ZN5Print7printlnIhLi0EEEjT_i>
 80a0328:	bd10      	pop	{r4, pc}
 80a032a:	bf00      	nop
 80a032c:	080a25bd 	.word	0x080a25bd
 80a0330:	080a25d6 	.word	0x080a25d6
 80a0334:	080a2605 	.word	0x080a2605
 80a0338:	080a2624 	.word	0x080a2624
 80a033c:	080a264a 	.word	0x080a264a
 80a0340:	080a2667 	.word	0x080a2667

080a0344 <_Z18registerReadNBytesiiiPhi.part.1>:
  }
}

int registerReadNBytes(int addressHigh, int addressLow, int numBytesToRead, uint8_t *byteArray, int byteArraySize)
 80a0344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0346:	461e      	mov	r6, r3
  uint32_t checksumTotal = 0;
  if (byteArraySize < numBytesToRead + 3) {
    return 3;
  }

  ReadDataBuf[0] = 0xA5; // Header
 80a0348:	23a5      	movs	r3, #165	; 0xa5
 80a034a:	f88d 3000 	strb.w	r3, [sp]
  ReadDataBuf[1] = 0x08; // Num bytes
 80a034e:	2308      	movs	r3, #8
 80a0350:	f88d 3001 	strb.w	r3, [sp, #1]
  ReadDataBuf[2] = 0x41; // Command - set address pointer
 80a0354:	2341      	movs	r3, #65	; 0x41
 80a0356:	f88d 3002 	strb.w	r3, [sp, #2]
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
 80a035a:	234e      	movs	r3, #78	; 0x4e

  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
 80a035c:	f88d 1004 	strb.w	r1, [sp, #4]
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
 80a0360:	f88d 3005 	strb.w	r3, [sp, #5]
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0; // Checksum 0x05E - computed below
 80a0364:	2100      	movs	r1, #0
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
 80a0366:	2320      	movs	r3, #32
 80a0368:	f88d 3006 	strb.w	r3, [sp, #6]
  }else if(i2c_bus_Status == 5){
    Serial.print("Data byte transfer succeeded, busy timeout immediately after::"); Serial.println(i2c_bus_Status);
  }
}

int registerReadNBytes(int addressHigh, int addressLow, int numBytesToRead, uint8_t *byteArray, int byteArraySize)
 80a036c:	4615      	mov	r5, r2
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
 80a036e:	460b      	mov	r3, r1
  }

  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = addressHigh;
 80a0370:	f88d 0003 	strb.w	r0, [sp, #3]
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0; // Checksum 0x05E - computed below
 80a0374:	f88d 1007 	strb.w	r1, [sp, #7]
  for(i = 0; i < 7; i++) {
    checksumTotal += ReadDataBuf[i];
 80a0378:	f81d 2003 	ldrb.w	r2, [sp, r3]
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
 80a037c:	3301      	adds	r3, #1
 80a037e:	2b07      	cmp	r3, #7
    checksumTotal += ReadDataBuf[i];
 80a0380:	4411      	add	r1, r2
  ReadDataBuf[3] = addressHigh;
  ReadDataBuf[4] = addressLow;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
 80a0382:	d1f9      	bne.n	80a0378 <_Z18registerReadNBytesiiiPhi.part.1+0x34>
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
 80a0384:	b2cc      	uxtb	r4, r1
 80a0386:	f88d 4007 	strb.w	r4, [sp, #7]
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7], HEX);
 80a038a:	f000 fe01 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a038e:	492a      	ldr	r1, [pc, #168]	; (80a0438 <_Z18registerReadNBytesiiiPhi.part.1+0xf4>)
 80a0390:	f000 fbbc 	bl	80a0b0c <_ZN5Print5printEPKc>
 80a0394:	f000 fdfc 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0398:	4621      	mov	r1, r4
 80a039a:	2210      	movs	r2, #16
 80a039c:	f7ff ff87 	bl	80a02ae <_ZN5Print7printlnIhLi0EEEjT_i>
  Wire.beginTransmission(I2C_ADDRESS);
 80a03a0:	f000 ff6e 	bl	80a1280 <_Z19__fetch_global_Wirev>
 80a03a4:	2174      	movs	r1, #116	; 0x74
 80a03a6:	f000 fab2 	bl	80a090e <_ZN7TwoWire17beginTransmissionEi>
  for(i= 0; i < 8; i++) {
 80a03aa:	2400      	movs	r4, #0
    Wire.write(ReadDataBuf[i]);
 80a03ac:	f000 ff68 	bl	80a1280 <_Z19__fetch_global_Wirev>
 80a03b0:	6803      	ldr	r3, [r0, #0]
 80a03b2:	f81d 1004 	ldrb.w	r1, [sp, r4]
 80a03b6:	689b      	ldr	r3, [r3, #8]
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7], HEX);
  Wire.beginTransmission(I2C_ADDRESS);
  for(i= 0; i < 8; i++) {
 80a03b8:	3401      	adds	r4, #1
    Wire.write(ReadDataBuf[i]);
 80a03ba:	4798      	blx	r3
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7], HEX);
  Wire.beginTransmission(I2C_ADDRESS);
  for(i= 0; i < 8; i++) {
 80a03bc:	2c08      	cmp	r4, #8
 80a03be:	d1f5      	bne.n	80a03ac <_Z18registerReadNBytesiiiPhi.part.1+0x68>
    Wire.write(ReadDataBuf[i]);
  }
  i2c_bus_Status = Wire.endTransmission(true);
 80a03c0:	f000 ff5e 	bl	80a1280 <_Z19__fetch_global_Wirev>
 80a03c4:	2101      	movs	r1, #1
 80a03c6:	f000 faa5 	bl	80a0914 <_ZN7TwoWire15endTransmissionEh>
  wireErrors(i2c_bus_Status);
 80a03ca:	f7ff ff81 	bl	80a02d0 <_Z10wireErrorsh>
  delay(50);
 80a03ce:	2032      	movs	r0, #50	; 0x32
 80a03d0:	f000 fa18 	bl	80a0804 <delay>
  Wire.requestFrom(I2C_ADDRESS, 31);
 80a03d4:	f000 ff54 	bl	80a1280 <_Z19__fetch_global_Wirev>
 80a03d8:	221f      	movs	r2, #31
 80a03da:	2174      	movs	r1, #116	; 0x74
 80a03dc:	f000 fa90 	bl	80a0900 <_ZN7TwoWire11requestFromEhj>
  int requestDataLength = Wire.available();
 80a03e0:	f000 ff4e 	bl	80a1280 <_Z19__fetch_global_Wirev>
 80a03e4:	6803      	ldr	r3, [r0, #0]
  if (requestDataLength==(numBytesToRead + 3)) {
 80a03e6:	3503      	adds	r5, #3
  }
  i2c_bus_Status = Wire.endTransmission(true);
  wireErrors(i2c_bus_Status);
  delay(50);
  Wire.requestFrom(I2C_ADDRESS, 31);
  int requestDataLength = Wire.available();
 80a03e8:	691b      	ldr	r3, [r3, #16]
 80a03ea:	4798      	blx	r3
  if (requestDataLength==(numBytesToRead + 3)) {
 80a03ec:	42a8      	cmp	r0, r5
  }
  i2c_bus_Status = Wire.endTransmission(true);
  wireErrors(i2c_bus_Status);
  delay(50);
  Wire.requestFrom(I2C_ADDRESS, 31);
  int requestDataLength = Wire.available();
 80a03ee:	4607      	mov	r7, r0
  if (requestDataLength==(numBytesToRead + 3)) {
 80a03f0:	d11e      	bne.n	80a0430 <_Z18registerReadNBytesiiiPhi.part.1+0xec>
 80a03f2:	4634      	mov	r4, r6
      for (i = 0; i <= numBytesToRead + 3 ; i++) {
 80a03f4:	1ba3      	subs	r3, r4, r6
 80a03f6:	429f      	cmp	r7, r3
 80a03f8:	db13      	blt.n	80a0422 <_Z18registerReadNBytesiiiPhi.part.1+0xde>
        byteArray[i] = Wire.read();
 80a03fa:	f000 ff41 	bl	80a1280 <_Z19__fetch_global_Wirev>
 80a03fe:	6803      	ldr	r3, [r0, #0]
 80a0400:	4625      	mov	r5, r4
 80a0402:	695b      	ldr	r3, [r3, #20]
 80a0404:	4798      	blx	r3
 80a0406:	f804 0b01 	strb.w	r0, [r4], #1
        Serial.print(byteArray[i], HEX); Serial.print(" ");
 80a040a:	f000 fdc1 	bl	80a0f90 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a040e:	7829      	ldrb	r1, [r5, #0]
 80a0410:	2210      	movs	r2, #16
 80a0412:	f000 fb92 	bl	80a0b3a <_ZN5Print11printNumberEmh>
 80a0416:	f000 fdbb 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a041a:	4908      	ldr	r1, [pc, #32]	; (80a043c <_Z18registerReadNBytesiiiPhi.part.1+0xf8>)
 80a041c:	f000 fb76 	bl	80a0b0c <_ZN5Print5printEPKc>
 80a0420:	e7e8      	b.n	80a03f4 <_Z18registerReadNBytesiiiPhi.part.1+0xb0>
      }
    Serial.print("\n");
 80a0422:	f000 fdb5 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a0426:	4906      	ldr	r1, [pc, #24]	; (80a0440 <_Z18registerReadNBytesiiiPhi.part.1+0xfc>)
 80a0428:	f000 fb70 	bl	80a0b0c <_ZN5Print5printEPKc>
  } else {
    return 5; 
  }
  return 0;
 80a042c:	2000      	movs	r0, #0
 80a042e:	e000      	b.n	80a0432 <_Z18registerReadNBytesiiiPhi.part.1+0xee>
        byteArray[i] = Wire.read();
        Serial.print(byteArray[i], HEX); Serial.print(" ");
      }
    Serial.print("\n");
  } else {
    return 5; 
 80a0430:	2005      	movs	r0, #5
  }
  return 0;
}
 80a0432:	b003      	add	sp, #12
 80a0434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0436:	bf00      	nop
 80a0438:	080a26a6 	.word	0x080a26a6
 80a043c:	080a2780 	.word	0x080a2780
 80a0440:	080a27a1 	.word	0x080a27a1

080a0444 <loop>:
    //Wire.stretchClock(true);
    Wire.begin();
}

void loop() 
{ 
 80a0444:	b530      	push	{r4, r5, lr}
 80a0446:	b09b      	sub	sp, #108	; 0x6c
 80a0448:	ab08      	add	r3, sp, #32
 80a044a:	221c      	movs	r2, #28
 80a044c:	2102      	movs	r1, #2
 80a044e:	2000      	movs	r0, #0
 80a0450:	f7ff ff78 	bl	80a0344 <_Z18registerReadNBytesiiiPhi.part.1>
  int retval = 0;
  uint8_t byteArray[35];

  retval = registerReadNBytes(0x00, 0x02, 28, byteArray, 35);

  if (retval != 0) {
 80a0454:	4604      	mov	r4, r0
 80a0456:	b1b8      	cbz	r0, 80a0488 <loop+0x44>
      Serial.print("retval = "); Serial.println(retval);
 80a0458:	f000 fd9a 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a045c:	492f      	ldr	r1, [pc, #188]	; (80a051c <loop+0xd8>)
 80a045e:	f000 fb55 	bl	80a0b0c <_ZN5Print5printEPKc>
 80a0462:	f000 fd95 	bl	80a0f90 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a0466:	2c00      	cmp	r4, #0
 80a0468:	4605      	mov	r5, r0
 80a046a:	da04      	bge.n	80a0476 <loop+0x32>
            t = print('-');
 80a046c:	212d      	movs	r1, #45	; 0x2d
 80a046e:	f000 fb51 	bl	80a0b14 <_ZN5Print5printEc>
            val = -n;
 80a0472:	4261      	negs	r1, r4
 80a0474:	e000      	b.n	80a0478 <loop+0x34>
        } else {
            val = n;
 80a0476:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
 80a0478:	220a      	movs	r2, #10
 80a047a:	4628      	mov	r0, r5
 80a047c:	f000 fb5d 	bl	80a0b3a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 80a0480:	4628      	mov	r0, r5
 80a0482:	f000 fb4e 	bl	80a0b22 <_ZN5Print7printlnEv>
 80a0486:	e042      	b.n	80a050e <loop+0xca>
  } else {
  /* System status */
  data.systemStatus = ((byteArray[3] << 8) | byteArray[2]);
 80a0488:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 80a048c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
                            byteArray[22]);
  data.apparentPower =   ((uint32_t)(byteArray[29]) << 24 |
                            (uint32_t)(byteArray[28]) << 16 |
                            (uint32_t)(byteArray[27]) << 8 |
                            byteArray[26]);
  convertdata(&data, &fData);
 80a0490:	a801      	add	r0, sp, #4

  if (retval != 0) {
      Serial.print("retval = "); Serial.println(retval);
  } else {
  /* System status */
  data.systemStatus = ((byteArray[3] << 8) | byteArray[2]);
 80a0492:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0496:	f8ad 3004 	strh.w	r3, [sp, #4]
  data.systemVersion = ((byteArray[5] << 8) | byteArray[4]);
 80a049a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80a049e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                            byteArray[22]);
  data.apparentPower =   ((uint32_t)(byteArray[29]) << 24 |
                            (uint32_t)(byteArray[28]) << 16 |
                            (uint32_t)(byteArray[27]) << 8 |
                            byteArray[26]);
  convertdata(&data, &fData);
 80a04a2:	a911      	add	r1, sp, #68	; 0x44
  if (retval != 0) {
      Serial.print("retval = "); Serial.println(retval);
  } else {
  /* System status */
  data.systemStatus = ((byteArray[3] << 8) | byteArray[2]);
  data.systemVersion = ((byteArray[5] << 8) | byteArray[4]);
 80a04a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a04a8:	f8ad 3006 	strh.w	r3, [sp, #6]
  data.voltageRMS = ((byteArray[7] << 8) | byteArray[6]);
 80a04ac:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80a04b0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80a04b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a04b8:	f8ad 3008 	strh.w	r3, [sp, #8]
  data.lineFrequency = ((byteArray[9] << 8) | byteArray[8]);
 80a04bc:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80a04c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80a04c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a04c8:	f8ad 300a 	strh.w	r3, [sp, #10]
  data.analogInputVoltage = ((byteArray[11] << 8) | byteArray[10]);
 80a04cc:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 80a04d0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80a04d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a04d8:	f8ad 300c 	strh.w	r3, [sp, #12]
  data.powerFactor = (((signed char)byteArray[13] << 8) +
                          (unsigned char)byteArray[12]);
 80a04dc:	f99d 202d 	ldrsb.w	r2, [sp, #45]	; 0x2d
 80a04e0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80a04e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80a04e8:	f8ad 300e 	strh.w	r3, [sp, #14]
  data.currentRMS =      ((uint32_t)(byteArray[17]) << 24 |
                            (uint32_t)(byteArray[16]) << 16 |
                            (uint32_t)(byteArray[15]) << 8 |
 80a04ec:	f8dd 302e 	ldr.w	r3, [sp, #46]	; 0x2e
                            byteArray[14]);
 80a04f0:	9304      	str	r3, [sp, #16]
  data.activePower =     ((uint32_t)(byteArray[21]) << 24 |
                            (uint32_t)(byteArray[20]) << 16 |
                            (uint32_t)(byteArray[19]) << 8 |
 80a04f2:	f8dd 3032 	ldr.w	r3, [sp, #50]	; 0x32
                            byteArray[18]);
 80a04f6:	9305      	str	r3, [sp, #20]
  data.reactivePower =   ((uint32_t)(byteArray[25]) << 24 |
                            (uint32_t)(byteArray[24]) << 16 |
                            (uint32_t)(byteArray[23]) << 8 |
 80a04f8:	f8dd 3036 	ldr.w	r3, [sp, #54]	; 0x36
                            byteArray[22]);
 80a04fc:	9306      	str	r3, [sp, #24]
  data.apparentPower =   ((uint32_t)(byteArray[29]) << 24 |
                            (uint32_t)(byteArray[28]) << 16 |
                            (uint32_t)(byteArray[27]) << 8 |
 80a04fe:	f8dd 303a 	ldr.w	r3, [sp, #58]	; 0x3a
                            byteArray[26]);
 80a0502:	9307      	str	r3, [sp, #28]
  convertdata(&data, &fData);
 80a0504:	f7ff fdd8 	bl	80a00b8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData>
  printMCP39F521Data(&fData);
 80a0508:	a811      	add	r0, sp, #68	; 0x44
 80a050a:	f7ff fe57 	bl	80a01bc <_Z18printMCP39F521DataP23MCP39F521_FormattedData>
  }
  delay(1000);
 80a050e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0512:	f000 f977 	bl	80a0804 <delay>
 80a0516:	b01b      	add	sp, #108	; 0x6c
 80a0518:	bd30      	pop	{r4, r5, pc}
 80a051a:	bf00      	nop
 80a051c:	080a26b2 	.word	0x080a26b2

080a0520 <_GLOBAL__sub_I_numBytesToRead>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0520:	f000 b810 	b.w	80a0544 <HAL_Pin_Map>

080a0524 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <HAL_RNG_GetRandomNumber+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	685b      	ldr	r3, [r3, #4]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	0806019c 	.word	0x0806019c

080a0534 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	695b      	ldr	r3, [r3, #20]
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	0806019c 	.word	0x0806019c

080a0544 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <HAL_Pin_Map+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	681b      	ldr	r3, [r3, #0]
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601b0 	.word	0x080601b0

080a0554 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <HAL_I2C_Begin+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601ac 	.word	0x080601ac

080a0564 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <HAL_I2C_Begin_Transmission+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601ac 	.word	0x080601ac

080a0574 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <HAL_I2C_End_Transmission+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601ac 	.word	0x080601ac

080a0584 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <HAL_I2C_Write_Data+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601ac 	.word	0x080601ac

080a0594 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <HAL_I2C_Available_Data+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601ac 	.word	0x080601ac

080a05a4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <HAL_I2C_Read_Data+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601ac 	.word	0x080601ac

080a05b4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <HAL_I2C_Peek_Data+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601ac 	.word	0x080601ac

080a05c4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <HAL_I2C_Flush_Data+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601ac 	.word	0x080601ac

080a05d4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b03      	ldr	r3, [pc, #12]	; (80a05e4 <HAL_I2C_Init+0x10>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a05de:	9301      	str	r3, [sp, #4]
 80a05e0:	bd08      	pop	{r3, pc}
 80a05e2:	0000      	.short	0x0000
 80a05e4:	080601ac 	.word	0x080601ac

080a05e8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b03      	ldr	r3, [pc, #12]	; (80a05f8 <HAL_I2C_Request_Data_Ex+0x10>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a05f2:	9301      	str	r3, [sp, #4]
 80a05f4:	bd08      	pop	{r3, pc}
 80a05f6:	0000      	.short	0x0000
 80a05f8:	080601ac 	.word	0x080601ac

080a05fc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <HAL_USART_Init+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	699b      	ldr	r3, [r3, #24]
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	080601c4 	.word	0x080601c4

080a060c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <HAL_USART_Write_Data+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601c4 	.word	0x080601c4

080a061c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <HAL_USART_Available_Data+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601c4 	.word	0x080601c4

080a062c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <HAL_USART_Read_Data+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	080601c4 	.word	0x080601c4

080a063c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a063c:	b508      	push	{r3, lr}
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <HAL_USART_Peek_Data+0xc>)
 80a0640:	681b      	ldr	r3, [r3, #0]
 80a0642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0644:	9301      	str	r3, [sp, #4]
 80a0646:	bd08      	pop	{r3, pc}
 80a0648:	080601c4 	.word	0x080601c4

080a064c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <HAL_USART_Flush_Data+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601c4 	.word	0x080601c4

080a065c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	080601c4 	.word	0x080601c4

080a066c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <HAL_USB_USART_Init+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	681b      	ldr	r3, [r3, #0]
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601d8 	.word	0x080601d8

080a067c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <HAL_USB_USART_Begin+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	685b      	ldr	r3, [r3, #4]
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	080601d8 	.word	0x080601d8

080a068c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <HAL_USB_USART_Available_Data+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	691b      	ldr	r3, [r3, #16]
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	080601d8 	.word	0x080601d8

080a069c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	695b      	ldr	r3, [r3, #20]
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601d8 	.word	0x080601d8

080a06ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <HAL_USB_USART_Receive_Data+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	699b      	ldr	r3, [r3, #24]
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601d8 	.word	0x080601d8

080a06bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b02      	ldr	r3, [pc, #8]	; (80a06c8 <HAL_USB_USART_Send_Data+0xc>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	69db      	ldr	r3, [r3, #28]
 80a06c4:	9301      	str	r3, [sp, #4]
 80a06c6:	bd08      	pop	{r3, pc}
 80a06c8:	080601d8 	.word	0x080601d8

080a06cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b02      	ldr	r3, [pc, #8]	; (80a06d8 <HAL_USB_USART_Flush_Data+0xc>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	6a1b      	ldr	r3, [r3, #32]
 80a06d4:	9301      	str	r3, [sp, #4]
 80a06d6:	bd08      	pop	{r3, pc}
 80a06d8:	080601d8 	.word	0x080601d8

080a06dc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a06dc:	b508      	push	{r3, lr}
 80a06de:	4b02      	ldr	r3, [pc, #8]	; (80a06e8 <inet_gethostbyname+0xc>)
 80a06e0:	681b      	ldr	r3, [r3, #0]
 80a06e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a06e4:	9301      	str	r3, [sp, #4]
 80a06e6:	bd08      	pop	{r3, pc}
 80a06e8:	080601c0 	.word	0x080601c0

080a06ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <set_system_mode+0xc>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	685b      	ldr	r3, [r3, #4]
 80a06f4:	9301      	str	r3, [sp, #4]
 80a06f6:	bd08      	pop	{r3, pc}
 80a06f8:	080601a4 	.word	0x080601a4

080a06fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a06fc:	b508      	push	{r3, lr}
 80a06fe:	4b02      	ldr	r3, [pc, #8]	; (80a0708 <system_delay_ms+0xc>)
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	695b      	ldr	r3, [r3, #20]
 80a0704:	9301      	str	r3, [sp, #4]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	080601a4 	.word	0x080601a4

080a070c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a070c:	b508      	push	{r3, lr}
 80a070e:	4b03      	ldr	r3, [pc, #12]	; (80a071c <system_ctrl_set_app_request_handler+0x10>)
 80a0710:	681b      	ldr	r3, [r3, #0]
 80a0712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0716:	9301      	str	r3, [sp, #4]
 80a0718:	bd08      	pop	{r3, pc}
 80a071a:	0000      	.short	0x0000
 80a071c:	080601a4 	.word	0x080601a4

080a0720 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b03      	ldr	r3, [pc, #12]	; (80a0730 <system_ctrl_set_result+0x10>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a072a:	9301      	str	r3, [sp, #4]
 80a072c:	bd08      	pop	{r3, pc}
 80a072e:	0000      	.short	0x0000
 80a0730:	080601a4 	.word	0x080601a4

080a0734 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a073c:	9301      	str	r3, [sp, #4]
 80a073e:	bd08      	pop	{r3, pc}
 80a0740:	080601cc 	.word	0x080601cc

080a0744 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0744:	b508      	push	{r3, lr}
 80a0746:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <network_connect+0xc>)
 80a0748:	681b      	ldr	r3, [r3, #0]
 80a074a:	685b      	ldr	r3, [r3, #4]
 80a074c:	9301      	str	r3, [sp, #4]
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	080601c8 	.word	0x080601c8

080a0754 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0754:	b508      	push	{r3, lr}
 80a0756:	4b02      	ldr	r3, [pc, #8]	; (80a0760 <network_connecting+0xc>)
 80a0758:	681b      	ldr	r3, [r3, #0]
 80a075a:	689b      	ldr	r3, [r3, #8]
 80a075c:	9301      	str	r3, [sp, #4]
 80a075e:	bd08      	pop	{r3, pc}
 80a0760:	080601c8 	.word	0x080601c8

080a0764 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0764:	b508      	push	{r3, lr}
 80a0766:	4b02      	ldr	r3, [pc, #8]	; (80a0770 <network_disconnect+0xc>)
 80a0768:	681b      	ldr	r3, [r3, #0]
 80a076a:	68db      	ldr	r3, [r3, #12]
 80a076c:	9301      	str	r3, [sp, #4]
 80a076e:	bd08      	pop	{r3, pc}
 80a0770:	080601c8 	.word	0x080601c8

080a0774 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0774:	b508      	push	{r3, lr}
 80a0776:	4b02      	ldr	r3, [pc, #8]	; (80a0780 <network_ready+0xc>)
 80a0778:	681b      	ldr	r3, [r3, #0]
 80a077a:	691b      	ldr	r3, [r3, #16]
 80a077c:	9301      	str	r3, [sp, #4]
 80a077e:	bd08      	pop	{r3, pc}
 80a0780:	080601c8 	.word	0x080601c8

080a0784 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0784:	b508      	push	{r3, lr}
 80a0786:	4b02      	ldr	r3, [pc, #8]	; (80a0790 <network_on+0xc>)
 80a0788:	681b      	ldr	r3, [r3, #0]
 80a078a:	695b      	ldr	r3, [r3, #20]
 80a078c:	9301      	str	r3, [sp, #4]
 80a078e:	bd08      	pop	{r3, pc}
 80a0790:	080601c8 	.word	0x080601c8

080a0794 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0794:	b508      	push	{r3, lr}
 80a0796:	4b02      	ldr	r3, [pc, #8]	; (80a07a0 <network_off+0xc>)
 80a0798:	681b      	ldr	r3, [r3, #0]
 80a079a:	699b      	ldr	r3, [r3, #24]
 80a079c:	9301      	str	r3, [sp, #4]
 80a079e:	bd08      	pop	{r3, pc}
 80a07a0:	080601c8 	.word	0x080601c8

080a07a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a07a4:	b508      	push	{r3, lr}
 80a07a6:	4b02      	ldr	r3, [pc, #8]	; (80a07b0 <network_listen+0xc>)
 80a07a8:	681b      	ldr	r3, [r3, #0]
 80a07aa:	69db      	ldr	r3, [r3, #28]
 80a07ac:	9301      	str	r3, [sp, #4]
 80a07ae:	bd08      	pop	{r3, pc}
 80a07b0:	080601c8 	.word	0x080601c8

080a07b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a07b4:	b508      	push	{r3, lr}
 80a07b6:	4b02      	ldr	r3, [pc, #8]	; (80a07c0 <network_listening+0xc>)
 80a07b8:	681b      	ldr	r3, [r3, #0]
 80a07ba:	6a1b      	ldr	r3, [r3, #32]
 80a07bc:	9301      	str	r3, [sp, #4]
 80a07be:	bd08      	pop	{r3, pc}
 80a07c0:	080601c8 	.word	0x080601c8

080a07c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a07c4:	b508      	push	{r3, lr}
 80a07c6:	4b02      	ldr	r3, [pc, #8]	; (80a07d0 <network_set_listen_timeout+0xc>)
 80a07c8:	681b      	ldr	r3, [r3, #0]
 80a07ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07cc:	9301      	str	r3, [sp, #4]
 80a07ce:	bd08      	pop	{r3, pc}
 80a07d0:	080601c8 	.word	0x080601c8

080a07d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a07d4:	b508      	push	{r3, lr}
 80a07d6:	4b02      	ldr	r3, [pc, #8]	; (80a07e0 <network_get_listen_timeout+0xc>)
 80a07d8:	681b      	ldr	r3, [r3, #0]
 80a07da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a07dc:	9301      	str	r3, [sp, #4]
 80a07de:	bd08      	pop	{r3, pc}
 80a07e0:	080601c8 	.word	0x080601c8

080a07e4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a07e4:	b508      	push	{r3, lr}
 80a07e6:	4b02      	ldr	r3, [pc, #8]	; (80a07f0 <malloc+0xc>)
 80a07e8:	681b      	ldr	r3, [r3, #0]
 80a07ea:	681b      	ldr	r3, [r3, #0]
 80a07ec:	9301      	str	r3, [sp, #4]
 80a07ee:	bd08      	pop	{r3, pc}
 80a07f0:	080601a0 	.word	0x080601a0

080a07f4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a07f4:	b508      	push	{r3, lr}
 80a07f6:	4b02      	ldr	r3, [pc, #8]	; (80a0800 <free+0xc>)
 80a07f8:	681b      	ldr	r3, [r3, #0]
 80a07fa:	685b      	ldr	r3, [r3, #4]
 80a07fc:	9301      	str	r3, [sp, #4]
 80a07fe:	bd08      	pop	{r3, pc}
 80a0800:	080601a0 	.word	0x080601a0

080a0804 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0804:	2100      	movs	r1, #0
 80a0806:	f7ff bf79 	b.w	80a06fc <system_delay_ms>

080a080a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a080a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a080c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a080e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0810:	b113      	cbz	r3, 80a0818 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0812:	2203      	movs	r2, #3
 80a0814:	4601      	mov	r1, r0
 80a0816:	4798      	blx	r3
    }
 80a0818:	4620      	mov	r0, r4
 80a081a:	bd10      	pop	{r4, pc}

080a081c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a081c:	4770      	bx	lr

080a081e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a081e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0820:	4606      	mov	r6, r0
 80a0822:	4615      	mov	r5, r2
 80a0824:	460c      	mov	r4, r1
 80a0826:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0828:	42bc      	cmp	r4, r7
 80a082a:	d006      	beq.n	80a083a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a082c:	6833      	ldr	r3, [r6, #0]
 80a082e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0832:	689b      	ldr	r3, [r3, #8]
 80a0834:	4630      	mov	r0, r6
 80a0836:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0838:	e7f6      	b.n	80a0828 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a083a:	4628      	mov	r0, r5
 80a083c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a083e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a083e:	2200      	movs	r2, #0
 80a0840:	7c00      	ldrb	r0, [r0, #16]
 80a0842:	f7ff be9f 	b.w	80a0584 <HAL_I2C_Write_Data>

080a0846 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0846:	2100      	movs	r1, #0
 80a0848:	7c00      	ldrb	r0, [r0, #16]
 80a084a:	f7ff bea3 	b.w	80a0594 <HAL_I2C_Available_Data>

080a084e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a084e:	2100      	movs	r1, #0
 80a0850:	7c00      	ldrb	r0, [r0, #16]
 80a0852:	f7ff bea7 	b.w	80a05a4 <HAL_I2C_Read_Data>

080a0856 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0856:	2100      	movs	r1, #0
 80a0858:	7c00      	ldrb	r0, [r0, #16]
 80a085a:	f7ff beab 	b.w	80a05b4 <HAL_I2C_Peek_Data>

080a085e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a085e:	2100      	movs	r1, #0
 80a0860:	7c00      	ldrb	r0, [r0, #16]
 80a0862:	f7ff beaf 	b.w	80a05c4 <HAL_I2C_Flush_Data>

080a0866 <_ZN7TwoWireD0Ev>:
 80a0866:	b510      	push	{r4, lr}
 80a0868:	4604      	mov	r4, r0
 80a086a:	2114      	movs	r1, #20
 80a086c:	f000 fd4b 	bl	80a1306 <_ZdlPvj>
 80a0870:	4620      	mov	r0, r4
 80a0872:	bd10      	pop	{r4, pc}

080a0874 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0874:	b510      	push	{r4, lr}
 80a0876:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0878:	2300      	movs	r3, #0
 80a087a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0880:	60a3      	str	r3, [r4, #8]
 80a0882:	4b04      	ldr	r3, [pc, #16]	; (80a0894 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a0884:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0886:	4608      	mov	r0, r1
 80a0888:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a088a:	4611      	mov	r1, r2
 80a088c:	f7ff fea2 	bl	80a05d4 <HAL_I2C_Init>
}
 80a0890:	4620      	mov	r0, r4
 80a0892:	bd10      	pop	{r4, pc}
 80a0894:	080a26c4 	.word	0x080a26c4

080a0898 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a0898:	2300      	movs	r3, #0
 80a089a:	461a      	mov	r2, r3
 80a089c:	4619      	mov	r1, r3
 80a089e:	7c00      	ldrb	r0, [r0, #16]
 80a08a0:	f7ff be58 	b.w	80a0554 <HAL_I2C_Begin>

080a08a4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a08a4:	b570      	push	{r4, r5, r6, lr}
 80a08a6:	460c      	mov	r4, r1
 80a08a8:	4606      	mov	r6, r0
 80a08aa:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 80a08ac:	2514      	movs	r5, #20
 80a08ae:	462a      	mov	r2, r5
 80a08b0:	2100      	movs	r1, #0
 80a08b2:	a801      	add	r0, sp, #4
 80a08b4:	f001 fe03 	bl	80a24be <memset>
 80a08b8:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 80a08ba:	2200      	movs	r2, #0
 80a08bc:	f88d 3008 	strb.w	r3, [sp, #8]
 80a08c0:	6863      	ldr	r3, [r4, #4]
 80a08c2:	a901      	add	r1, sp, #4
 80a08c4:	9303      	str	r3, [sp, #12]
 80a08c6:	68e3      	ldr	r3, [r4, #12]
 80a08c8:	7c30      	ldrb	r0, [r6, #16]
 80a08ca:	9304      	str	r3, [sp, #16]
 80a08cc:	7a23      	ldrb	r3, [r4, #8]
 80a08ce:	f8ad 5004 	strh.w	r5, [sp, #4]
 80a08d2:	9305      	str	r3, [sp, #20]
 80a08d4:	f7ff fe88 	bl	80a05e8 <HAL_I2C_Request_Data_Ex>
}
 80a08d8:	b006      	add	sp, #24
 80a08da:	bd70      	pop	{r4, r5, r6, pc}

080a08dc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 80a08dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a08de:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a08e0:	f88d 1000 	strb.w	r1, [sp]
 80a08e4:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a08e8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a08ea:	bf18      	it	ne
 80a08ec:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a08ee:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 80a08f0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a08f2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a08f6:	f7ff ffd5 	bl	80a08a4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a08fa:	b005      	add	sp, #20
 80a08fc:	f85d fb04 	ldr.w	pc, [sp], #4

080a0900 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 80a0900:	2301      	movs	r3, #1
 80a0902:	f7ff bfeb 	b.w	80a08dc <_ZN7TwoWire11requestFromEhjh>

080a0906 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a0906:	2200      	movs	r2, #0
 80a0908:	7c00      	ldrb	r0, [r0, #16]
 80a090a:	f7ff be2b 	b.w	80a0564 <HAL_I2C_Begin_Transmission>

080a090e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a090e:	b2c9      	uxtb	r1, r1
 80a0910:	f7ff bff9 	b.w	80a0906 <_ZN7TwoWire17beginTransmissionEh>

080a0914 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a0914:	2200      	movs	r2, #0
 80a0916:	7c00      	ldrb	r0, [r0, #16]
 80a0918:	f7ff be2c 	b.w	80a0574 <HAL_I2C_End_Transmission>

080a091c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a091c:	4770      	bx	lr

080a091e <_ZN9IPAddressD0Ev>:
 80a091e:	b510      	push	{r4, lr}
 80a0920:	4604      	mov	r4, r0
 80a0922:	2118      	movs	r1, #24
 80a0924:	f000 fcef 	bl	80a1306 <_ZdlPvj>
 80a0928:	4620      	mov	r0, r4
 80a092a:	bd10      	pop	{r4, pc}

080a092c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a092c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a092e:	460f      	mov	r7, r1
 80a0930:	f100 0608 	add.w	r6, r0, #8
 80a0934:	1d05      	adds	r5, r0, #4
 80a0936:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0938:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a093c:	220a      	movs	r2, #10
 80a093e:	4638      	mov	r0, r7
 80a0940:	f000 f8fb 	bl	80a0b3a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0944:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0946:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0948:	d007      	beq.n	80a095a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a094a:	2c00      	cmp	r4, #0
 80a094c:	d0f4      	beq.n	80a0938 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a094e:	212e      	movs	r1, #46	; 0x2e
 80a0950:	4638      	mov	r0, r7
 80a0952:	f000 f8df 	bl	80a0b14 <_ZN5Print5printEc>
 80a0956:	4404      	add	r4, r0
 80a0958:	e7ee      	b.n	80a0938 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a095a:	4620      	mov	r0, r4
 80a095c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0960 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0960:	b510      	push	{r4, lr}
 80a0962:	4604      	mov	r4, r0
 80a0964:	4b04      	ldr	r3, [pc, #16]	; (80a0978 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0966:	2211      	movs	r2, #17
 80a0968:	f840 3b04 	str.w	r3, [r0], #4
 80a096c:	2100      	movs	r1, #0
 80a096e:	f001 fda6 	bl	80a24be <memset>
{
    clear();
}
 80a0972:	4620      	mov	r0, r4
 80a0974:	bd10      	pop	{r4, pc}
 80a0976:	bf00      	nop
 80a0978:	080a26ec 	.word	0x080a26ec

080a097c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a097c:	4603      	mov	r3, r0
 80a097e:	4a07      	ldr	r2, [pc, #28]	; (80a099c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0980:	b510      	push	{r4, lr}
 80a0982:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0986:	f101 0210 	add.w	r2, r1, #16
 80a098a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a098e:	4291      	cmp	r1, r2
 80a0990:	f843 4b04 	str.w	r4, [r3], #4
 80a0994:	d1f9      	bne.n	80a098a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0996:	780a      	ldrb	r2, [r1, #0]
 80a0998:	701a      	strb	r2, [r3, #0]
}
 80a099a:	bd10      	pop	{r4, pc}
 80a099c:	080a26ec 	.word	0x080a26ec

080a09a0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a09a0:	4a02      	ldr	r2, [pc, #8]	; (80a09ac <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a09a2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a09a4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a09a6:	2204      	movs	r2, #4
 80a09a8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a09aa:	4770      	bx	lr
 80a09ac:	080a26ec 	.word	0x080a26ec

080a09b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a09b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a09b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a09b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a09ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a09be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a09c2:	2304      	movs	r3, #4
 80a09c4:	6041      	str	r1, [r0, #4]
 80a09c6:	7503      	strb	r3, [r0, #20]
 80a09c8:	bd10      	pop	{r4, pc}
	...

080a09cc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a09cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a09ce:	4d04      	ldr	r5, [pc, #16]	; (80a09e0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a09d0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a09d2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a09d6:	9500      	str	r5, [sp, #0]
 80a09d8:	f7ff ffea 	bl	80a09b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a09dc:	b003      	add	sp, #12
 80a09de:	bd30      	pop	{r4, r5, pc}
 80a09e0:	080a26ec 	.word	0x080a26ec

080a09e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a09e4:	4a01      	ldr	r2, [pc, #4]	; (80a09ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a09e6:	4b02      	ldr	r3, [pc, #8]	; (80a09f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a09e8:	601a      	str	r2, [r3, #0]
 80a09ea:	4770      	bx	lr
 80a09ec:	080a276e 	.word	0x080a276e
 80a09f0:	2000006c 	.word	0x2000006c

080a09f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a09f4:	2300      	movs	r3, #0
 80a09f6:	461a      	mov	r2, r3
 80a09f8:	6840      	ldr	r0, [r0, #4]
 80a09fa:	f7ff bea3 	b.w	80a0744 <network_connect>

080a09fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a09fe:	2200      	movs	r2, #0
 80a0a00:	2102      	movs	r1, #2
 80a0a02:	6840      	ldr	r0, [r0, #4]
 80a0a04:	f7ff beae 	b.w	80a0764 <network_disconnect>

080a0a08 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0a08:	2200      	movs	r2, #0
 80a0a0a:	4611      	mov	r1, r2
 80a0a0c:	6840      	ldr	r0, [r0, #4]
 80a0a0e:	f7ff bea1 	b.w	80a0754 <network_connecting>

080a0a12 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0a12:	2200      	movs	r2, #0
 80a0a14:	4611      	mov	r1, r2
 80a0a16:	6840      	ldr	r0, [r0, #4]
 80a0a18:	f7ff beac 	b.w	80a0774 <network_ready>

080a0a1c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0a1c:	2300      	movs	r3, #0
 80a0a1e:	461a      	mov	r2, r3
 80a0a20:	4619      	mov	r1, r3
 80a0a22:	6840      	ldr	r0, [r0, #4]
 80a0a24:	f7ff beae 	b.w	80a0784 <network_on>

080a0a28 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0a28:	2300      	movs	r3, #0
 80a0a2a:	461a      	mov	r2, r3
 80a0a2c:	4619      	mov	r1, r3
 80a0a2e:	6840      	ldr	r0, [r0, #4]
 80a0a30:	f7ff beb0 	b.w	80a0794 <network_off>

080a0a34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0a34:	2200      	movs	r2, #0
 80a0a36:	f081 0101 	eor.w	r1, r1, #1
 80a0a3a:	6840      	ldr	r0, [r0, #4]
 80a0a3c:	f7ff beb2 	b.w	80a07a4 <network_listen>

080a0a40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0a40:	2200      	movs	r2, #0
 80a0a42:	6840      	ldr	r0, [r0, #4]
 80a0a44:	f7ff bebe 	b.w	80a07c4 <network_set_listen_timeout>

080a0a48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0a48:	2200      	movs	r2, #0
 80a0a4a:	4611      	mov	r1, r2
 80a0a4c:	6840      	ldr	r0, [r0, #4]
 80a0a4e:	f7ff bec1 	b.w	80a07d4 <network_get_listen_timeout>

080a0a52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0a52:	2200      	movs	r2, #0
 80a0a54:	4611      	mov	r1, r2
 80a0a56:	6840      	ldr	r0, [r0, #4]
 80a0a58:	f7ff beac 	b.w	80a07b4 <network_listening>

080a0a5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0a5c:	b570      	push	{r4, r5, r6, lr}
 80a0a5e:	4616      	mov	r6, r2
 80a0a60:	b08e      	sub	sp, #56	; 0x38
 80a0a62:	4604      	mov	r4, r0
    IPAddress addr;
 80a0a64:	a808      	add	r0, sp, #32
 80a0a66:	f7ff ff7b 	bl	80a0960 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0a6a:	2211      	movs	r2, #17
 80a0a6c:	2100      	movs	r1, #0
 80a0a6e:	a803      	add	r0, sp, #12
 80a0a70:	f001 fd25 	bl	80a24be <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0a74:	4630      	mov	r0, r6
 80a0a76:	f001 fd53 	bl	80a2520 <strlen>
 80a0a7a:	2500      	movs	r5, #0
 80a0a7c:	4b0a      	ldr	r3, [pc, #40]	; (80a0aa8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0a7e:	9500      	str	r5, [sp, #0]
 80a0a80:	b281      	uxth	r1, r0
 80a0a82:	685b      	ldr	r3, [r3, #4]
 80a0a84:	aa03      	add	r2, sp, #12
 80a0a86:	4630      	mov	r0, r6
 80a0a88:	f7ff fe28 	bl	80a06dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0a8c:	b120      	cbz	r0, 80a0a98 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0a8e:	4629      	mov	r1, r5
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	f7ff ff85 	bl	80a09a0 <_ZN9IPAddressC1Em>
 80a0a96:	e003      	b.n	80a0aa0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0a98:	a903      	add	r1, sp, #12
 80a0a9a:	4620      	mov	r0, r4
 80a0a9c:	f7ff ff6e 	bl	80a097c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0aa0:	4620      	mov	r0, r4
 80a0aa2:	b00e      	add	sp, #56	; 0x38
 80a0aa4:	bd70      	pop	{r4, r5, r6, pc}
 80a0aa6:	bf00      	nop
 80a0aa8:	200004f4 	.word	0x200004f4

080a0aac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0aac:	4b02      	ldr	r3, [pc, #8]	; (80a0ab8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0aae:	4a03      	ldr	r2, [pc, #12]	; (80a0abc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0ab0:	601a      	str	r2, [r3, #0]
 80a0ab2:	2200      	movs	r2, #0
 80a0ab4:	605a      	str	r2, [r3, #4]
 80a0ab6:	4770      	bx	lr
 80a0ab8:	20000070 	.word	0x20000070
 80a0abc:	080a27e4 	.word	0x080a27e4

080a0ac0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ac2:	4606      	mov	r6, r0
 80a0ac4:	460d      	mov	r5, r1
 80a0ac6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0ac8:	2400      	movs	r4, #0
  while (size--) {
 80a0aca:	42bd      	cmp	r5, r7
 80a0acc:	d00c      	beq.n	80a0ae8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0ace:	6833      	ldr	r3, [r6, #0]
 80a0ad0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0ad4:	689b      	ldr	r3, [r3, #8]
 80a0ad6:	4630      	mov	r0, r6
 80a0ad8:	4798      	blx	r3
     if (chunk>=0)
 80a0ada:	2800      	cmp	r0, #0
 80a0adc:	db01      	blt.n	80a0ae2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0ade:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0ae0:	e7f3      	b.n	80a0aca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0ae2:	2c00      	cmp	r4, #0
 80a0ae4:	bf08      	it	eq
 80a0ae6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0ae8:	4620      	mov	r0, r4
 80a0aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0aec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0aec:	b570      	push	{r4, r5, r6, lr}
 80a0aee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0af0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0af2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0af4:	b149      	cbz	r1, 80a0b0a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0af6:	f001 fd13 	bl	80a2520 <strlen>
 80a0afa:	682b      	ldr	r3, [r5, #0]
 80a0afc:	4602      	mov	r2, r0
 80a0afe:	4621      	mov	r1, r4
 80a0b00:	4628      	mov	r0, r5
    }
 80a0b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0b06:	68db      	ldr	r3, [r3, #12]
 80a0b08:	4718      	bx	r3
    }
 80a0b0a:	bd70      	pop	{r4, r5, r6, pc}

080a0b0c <_ZN5Print5printEPKc>:
 80a0b0c:	b508      	push	{r3, lr}
 80a0b0e:	f7ff ffed 	bl	80a0aec <_ZN5Print5writeEPKc>
 80a0b12:	bd08      	pop	{r3, pc}

080a0b14 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0b14:	6803      	ldr	r3, [r0, #0]
 80a0b16:	689b      	ldr	r3, [r3, #8]
 80a0b18:	4718      	bx	r3

080a0b1a <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 80a0b1a:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0b1c:	f7ff ffe6 	bl	80a0aec <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
 80a0b20:	bd08      	pop	{r3, pc}

080a0b22 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 80a0b22:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0b24:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0b26:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0b28:	f7ff fff4 	bl	80a0b14 <_ZN5Print5printEc>
  n += print('\n');
 80a0b2c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0b2e:	4604      	mov	r4, r0
  n += print('\n');
 80a0b30:	4628      	mov	r0, r5
 80a0b32:	f7ff ffef 	bl	80a0b14 <_ZN5Print5printEc>
  return n;
}
 80a0b36:	4420      	add	r0, r4
 80a0b38:	bd38      	pop	{r3, r4, r5, pc}

080a0b3a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0b3a:	2a01      	cmp	r2, #1
 80a0b3c:	bf98      	it	ls
 80a0b3e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0b40:	b530      	push	{r4, r5, lr}
 80a0b42:	460b      	mov	r3, r1
 80a0b44:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0b46:	2100      	movs	r1, #0
 80a0b48:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0b4c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0b50:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0b54:	fb05 3312 	mls	r3, r5, r2, r3
 80a0b58:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b5a:	2b09      	cmp	r3, #9
 80a0b5c:	bf94      	ite	ls
 80a0b5e:	3330      	addls	r3, #48	; 0x30
 80a0b60:	3337      	addhi	r3, #55	; 0x37
 80a0b62:	b2db      	uxtb	r3, r3
 80a0b64:	4621      	mov	r1, r4
 80a0b66:	f804 3901 	strb.w	r3, [r4], #-1
 80a0b6a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0b6c:	2d00      	cmp	r5, #0
 80a0b6e:	d1ef      	bne.n	80a0b50 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0b70:	f7ff ffbc 	bl	80a0aec <_ZN5Print5writeEPKc>
}
 80a0b74:	b00b      	add	sp, #44	; 0x2c
 80a0b76:	bd30      	pop	{r4, r5, pc}

080a0b78 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0b7c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0b7e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0b80:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0b82:	4617      	mov	r7, r2
 80a0b84:	461e      	mov	r6, r3
 80a0b86:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0b8a:	f001 f973 	bl	80a1e74 <__aeabi_dcmpun>
 80a0b8e:	b108      	cbz	r0, 80a0b94 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0b90:	494d      	ldr	r1, [pc, #308]	; (80a0cc8 <_ZN5Print10printFloatEdh+0x150>)
 80a0b92:	e012      	b.n	80a0bba <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0b94:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a0b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0b9c:	4b4b      	ldr	r3, [pc, #300]	; (80a0ccc <_ZN5Print10printFloatEdh+0x154>)
 80a0b9e:	4638      	mov	r0, r7
 80a0ba0:	4621      	mov	r1, r4
 80a0ba2:	f001 f967 	bl	80a1e74 <__aeabi_dcmpun>
 80a0ba6:	b968      	cbnz	r0, 80a0bc4 <_ZN5Print10printFloatEdh+0x4c>
 80a0ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0bac:	4b47      	ldr	r3, [pc, #284]	; (80a0ccc <_ZN5Print10printFloatEdh+0x154>)
 80a0bae:	4638      	mov	r0, r7
 80a0bb0:	4621      	mov	r1, r4
 80a0bb2:	f001 f941 	bl	80a1e38 <__aeabi_dcmple>
 80a0bb6:	b928      	cbnz	r0, 80a0bc4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0bb8:	4945      	ldr	r1, [pc, #276]	; (80a0cd0 <_ZN5Print10printFloatEdh+0x158>)
 80a0bba:	4640      	mov	r0, r8
 80a0bbc:	f7ff ff96 	bl	80a0aec <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0bc4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0bc8:	4b42      	ldr	r3, [pc, #264]	; (80a0cd4 <_ZN5Print10printFloatEdh+0x15c>)
 80a0bca:	4638      	mov	r0, r7
 80a0bcc:	4631      	mov	r1, r6
 80a0bce:	f001 f947 	bl	80a1e60 <__aeabi_dcmpgt>
 80a0bd2:	b108      	cbz	r0, 80a0bd8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0bd4:	4940      	ldr	r1, [pc, #256]	; (80a0cd8 <_ZN5Print10printFloatEdh+0x160>)
 80a0bd6:	e7f0      	b.n	80a0bba <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0bd8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0bdc:	4b3f      	ldr	r3, [pc, #252]	; (80a0cdc <_ZN5Print10printFloatEdh+0x164>)
 80a0bde:	4638      	mov	r0, r7
 80a0be0:	4631      	mov	r1, r6
 80a0be2:	f001 f91f 	bl	80a1e24 <__aeabi_dcmplt>
 80a0be6:	2800      	cmp	r0, #0
 80a0be8:	d1f4      	bne.n	80a0bd4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a0bea:	2200      	movs	r2, #0
 80a0bec:	2300      	movs	r3, #0
 80a0bee:	4638      	mov	r0, r7
 80a0bf0:	4631      	mov	r1, r6
 80a0bf2:	f001 f917 	bl	80a1e24 <__aeabi_dcmplt>
 80a0bf6:	b138      	cbz	r0, 80a0c08 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a0bf8:	212d      	movs	r1, #45	; 0x2d
 80a0bfa:	4640      	mov	r0, r8
 80a0bfc:	f7ff ff8a 	bl	80a0b14 <_ZN5Print5printEc>
     number = -number;
 80a0c00:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a0c04:	4604      	mov	r4, r0
 80a0c06:	e000      	b.n	80a0c0a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0c08:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0c0a:	4935      	ldr	r1, [pc, #212]	; (80a0ce0 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0c0c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0c10:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a0c12:	fa5f f389 	uxtb.w	r3, r9
 80a0c16:	429d      	cmp	r5, r3
 80a0c18:	d906      	bls.n	80a0c28 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a0c1a:	2200      	movs	r2, #0
 80a0c1c:	4b31      	ldr	r3, [pc, #196]	; (80a0ce4 <_ZN5Print10printFloatEdh+0x16c>)
 80a0c1e:	f000 ffb9 	bl	80a1b94 <__aeabi_ddiv>
 80a0c22:	f109 0901 	add.w	r9, r9, #1
 80a0c26:	e7f4      	b.n	80a0c12 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a0c28:	463a      	mov	r2, r7
 80a0c2a:	4633      	mov	r3, r6
 80a0c2c:	f000 fcd6 	bl	80a15dc <__adddf3>
 80a0c30:	460f      	mov	r7, r1
 80a0c32:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0c34:	f001 f95c 	bl	80a1ef0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0c38:	220a      	movs	r2, #10
 80a0c3a:	4601      	mov	r1, r0
 80a0c3c:	4681      	mov	r9, r0
 80a0c3e:	4640      	mov	r0, r8
 80a0c40:	f7ff ff7b 	bl	80a0b3a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0c44:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a0c46:	b3e5      	cbz	r5, 80a0cc2 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a0c48:	4648      	mov	r0, r9
 80a0c4a:	f000 fe03 	bl	80a1854 <__aeabi_ui2d>
 80a0c4e:	4602      	mov	r2, r0
 80a0c50:	460b      	mov	r3, r1
 80a0c52:	4630      	mov	r0, r6
 80a0c54:	4639      	mov	r1, r7
 80a0c56:	f000 fcbf 	bl	80a15d8 <__aeabi_dsub>
 80a0c5a:	4606      	mov	r6, r0
 80a0c5c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0c5e:	4640      	mov	r0, r8
 80a0c60:	4921      	ldr	r1, [pc, #132]	; (80a0ce8 <_ZN5Print10printFloatEdh+0x170>)
 80a0c62:	f7ff ff43 	bl	80a0aec <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a0c66:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a0c68:	2200      	movs	r2, #0
 80a0c6a:	4b1e      	ldr	r3, [pc, #120]	; (80a0ce4 <_ZN5Print10printFloatEdh+0x16c>)
 80a0c6c:	4630      	mov	r0, r6
 80a0c6e:	4639      	mov	r1, r7
 80a0c70:	f000 fe66 	bl	80a1940 <__aeabi_dmul>
 80a0c74:	4606      	mov	r6, r0
 80a0c76:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a0c78:	f001 f912 	bl	80a1ea0 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a0c7c:	f1b0 0a00 	subs.w	sl, r0, #0
 80a0c80:	da07      	bge.n	80a0c92 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a0c82:	212d      	movs	r1, #45	; 0x2d
 80a0c84:	4640      	mov	r0, r8
 80a0c86:	f7ff ff45 	bl	80a0b14 <_ZN5Print5printEc>
            val = -n;
 80a0c8a:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a0c8e:	4681      	mov	r9, r0
 80a0c90:	e002      	b.n	80a0c98 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a0c92:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a0c94:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0c98:	220a      	movs	r2, #10
 80a0c9a:	4640      	mov	r0, r8
 80a0c9c:	f7ff ff4d 	bl	80a0b3a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a0ca0:	4448      	add	r0, r9
 80a0ca2:	4404      	add	r4, r0
    remainder -= toPrint;
 80a0ca4:	4650      	mov	r0, sl
 80a0ca6:	f000 fde5 	bl	80a1874 <__aeabi_i2d>
 80a0caa:	4602      	mov	r2, r0
 80a0cac:	460b      	mov	r3, r1
 80a0cae:	4630      	mov	r0, r6
 80a0cb0:	4639      	mov	r1, r7
 80a0cb2:	f000 fc91 	bl	80a15d8 <__aeabi_dsub>
 80a0cb6:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0cb8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a0cbc:	4606      	mov	r6, r0
 80a0cbe:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0cc0:	d1d2      	bne.n	80a0c68 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0cc2:	4620      	mov	r0, r4
 80a0cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0cc8:	080a2810 	.word	0x080a2810
 80a0ccc:	7fefffff 	.word	0x7fefffff
 80a0cd0:	080a281a 	.word	0x080a281a
 80a0cd4:	41efffff 	.word	0x41efffff
 80a0cd8:	080a2814 	.word	0x080a2814
 80a0cdc:	c1efffff 	.word	0xc1efffff
 80a0ce0:	3fe00000 	.word	0x3fe00000
 80a0ce4:	40240000 	.word	0x40240000
 80a0ce8:	080a2818 	.word	0x080a2818

080a0cec <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80a0cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a0cee:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80a0cf2:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a0cf4:	9100      	str	r1, [sp, #0]
 80a0cf6:	f7ff ff3f 	bl	80a0b78 <_ZN5Print10printFloatEdh>
 80a0cfa:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a0cfc:	4628      	mov	r0, r5
 80a0cfe:	f7ff ff10 	bl	80a0b22 <_ZN5Print7printlnEv>
  return n;
}
 80a0d02:	4420      	add	r0, r4
 80a0d04:	b003      	add	sp, #12
 80a0d06:	bd30      	pop	{r4, r5, pc}

080a0d08 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80a0d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0d0a:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a0d0c:	4608      	mov	r0, r1
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80a0d0e:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a0d10:	f000 fdc2 	bl	80a1898 <__aeabi_f2d>
 80a0d14:	9500      	str	r5, [sp, #0]
 80a0d16:	4602      	mov	r2, r0
 80a0d18:	460b      	mov	r3, r1
 80a0d1a:	4620      	mov	r0, r4
 80a0d1c:	f7ff ffe6 	bl	80a0cec <_ZN5Print7printlnEdi>
}
 80a0d20:	b003      	add	sp, #12
 80a0d22:	bd30      	pop	{r4, r5, pc}

080a0d24 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0d24:	b510      	push	{r4, lr}
 80a0d26:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d28:	f7ff fd6f 	bl	80a080a <_ZNSt14_Function_baseD1Ev>
 80a0d2c:	4620      	mov	r0, r4
 80a0d2e:	bd10      	pop	{r4, pc}

080a0d30 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d30:	4803      	ldr	r0, [pc, #12]	; (80a0d40 <_GLOBAL__sub_I_RGB+0x10>)
 80a0d32:	2300      	movs	r3, #0
 80a0d34:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0d36:	4a03      	ldr	r2, [pc, #12]	; (80a0d44 <_GLOBAL__sub_I_RGB+0x14>)
 80a0d38:	4903      	ldr	r1, [pc, #12]	; (80a0d48 <_GLOBAL__sub_I_RGB+0x18>)
 80a0d3a:	f000 badf 	b.w	80a12fc <__aeabi_atexit>
 80a0d3e:	bf00      	nop
 80a0d40:	20000078 	.word	0x20000078
 80a0d44:	20000068 	.word	0x20000068
 80a0d48:	080a0d25 	.word	0x080a0d25

080a0d4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0d4c:	b510      	push	{r4, lr}
 80a0d4e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0d50:	6800      	ldr	r0, [r0, #0]
 80a0d52:	b118      	cbz	r0, 80a0d5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0d54:	f7ff fd4e 	bl	80a07f4 <free>
            wakeupSource_ = nullptr;
 80a0d58:	2300      	movs	r3, #0
 80a0d5a:	6023      	str	r3, [r4, #0]
 80a0d5c:	bd10      	pop	{r4, pc}

080a0d5e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0d5e:	b510      	push	{r4, lr}
 80a0d60:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a0d62:	f7ff fff3 	bl	80a0d4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0d66:	4620      	mov	r0, r4
 80a0d68:	bd10      	pop	{r4, pc}
	...

080a0d6c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0d70:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0d72:	4c08      	ldr	r4, [pc, #32]	; (80a0d94 <_GLOBAL__sub_I_System+0x28>)
 80a0d74:	2000      	movs	r0, #0
 80a0d76:	6020      	str	r0, [r4, #0]
 80a0d78:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0d7a:	71a0      	strb	r0, [r4, #6]
 80a0d7c:	8120      	strh	r0, [r4, #8]
 80a0d7e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0d80:	f7ff fcb4 	bl	80a06ec <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0d84:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0d8a:	4a03      	ldr	r2, [pc, #12]	; (80a0d98 <_GLOBAL__sub_I_System+0x2c>)
 80a0d8c:	4903      	ldr	r1, [pc, #12]	; (80a0d9c <_GLOBAL__sub_I_System+0x30>)
 80a0d8e:	f000 bab5 	b.w	80a12fc <__aeabi_atexit>
 80a0d92:	bf00      	nop
 80a0d94:	20000088 	.word	0x20000088
 80a0d98:	20000068 	.word	0x20000068
 80a0d9c:	080a0d5f 	.word	0x080a0d5f

080a0da0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0da0:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0da2:	681a      	ldr	r2, [r3, #0]
 80a0da4:	4b02      	ldr	r3, [pc, #8]	; (80a0db0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0da6:	601a      	str	r2, [r3, #0]
 80a0da8:	4770      	bx	lr
 80a0daa:	bf00      	nop
 80a0dac:	20000000 	.word	0x20000000
 80a0db0:	20000094 	.word	0x20000094

080a0db4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0db4:	4770      	bx	lr

080a0db6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0db6:	7441      	strb	r1, [r0, #17]
 80a0db8:	4770      	bx	lr

080a0dba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0dba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0dbc:	7c00      	ldrb	r0, [r0, #16]
 80a0dbe:	f7ff fc4d 	bl	80a065c <HAL_USART_Available_Data_For_Write>
}
 80a0dc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0dc6:	bd08      	pop	{r3, pc}

080a0dc8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0dc8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0dca:	7c00      	ldrb	r0, [r0, #16]
 80a0dcc:	f7ff fc26 	bl	80a061c <HAL_USART_Available_Data>
}
 80a0dd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0dd4:	bd08      	pop	{r3, pc}

080a0dd6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0dd6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0dd8:	7c00      	ldrb	r0, [r0, #16]
 80a0dda:	f7ff fc2f 	bl	80a063c <HAL_USART_Peek_Data>
}
 80a0dde:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0de2:	bf28      	it	cs
 80a0de4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0de8:	bd08      	pop	{r3, pc}

080a0dea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0dea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0dec:	7c00      	ldrb	r0, [r0, #16]
 80a0dee:	f7ff fc1d 	bl	80a062c <HAL_USART_Read_Data>
}
 80a0df2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0df6:	bf28      	it	cs
 80a0df8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0dfc:	bd08      	pop	{r3, pc}

080a0dfe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0dfe:	7c00      	ldrb	r0, [r0, #16]
 80a0e00:	f7ff bc24 	b.w	80a064c <HAL_USART_Flush_Data>

080a0e04 <_ZN11USARTSerialD0Ev>:
 80a0e04:	b510      	push	{r4, lr}
 80a0e06:	4604      	mov	r4, r0
 80a0e08:	2114      	movs	r1, #20
 80a0e0a:	f000 fa7c 	bl	80a1306 <_ZdlPvj>
 80a0e0e:	4620      	mov	r0, r4
 80a0e10:	bd10      	pop	{r4, pc}

080a0e12 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0e12:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0e14:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0e16:	4604      	mov	r4, r0
 80a0e18:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0e1a:	b925      	cbnz	r5, 80a0e26 <_ZN11USARTSerial5writeEh+0x14>
 80a0e1c:	7c00      	ldrb	r0, [r0, #16]
 80a0e1e:	f7ff fc1d 	bl	80a065c <HAL_USART_Available_Data_For_Write>
 80a0e22:	2800      	cmp	r0, #0
 80a0e24:	dd05      	ble.n	80a0e32 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0e26:	4631      	mov	r1, r6
 80a0e28:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0e2e:	f7ff bbed 	b.w	80a060c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0e32:	4628      	mov	r0, r5
 80a0e34:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0e38 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0e38:	b510      	push	{r4, lr}
 80a0e3a:	4604      	mov	r4, r0
 80a0e3c:	4608      	mov	r0, r1
 80a0e3e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0e40:	2200      	movs	r2, #0
 80a0e42:	6062      	str	r2, [r4, #4]
 80a0e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0e48:	60a2      	str	r2, [r4, #8]
 80a0e4a:	4a05      	ldr	r2, [pc, #20]	; (80a0e60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0e4c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0e4e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0e50:	2201      	movs	r2, #1
 80a0e52:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0e54:	461a      	mov	r2, r3
 80a0e56:	f7ff fbd1 	bl	80a05fc <HAL_USART_Init>
}
 80a0e5a:	4620      	mov	r0, r4
 80a0e5c:	bd10      	pop	{r4, pc}
 80a0e5e:	bf00      	nop
 80a0e60:	080a2850 	.word	0x080a2850

080a0e64 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0e64:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0e66:	4d0c      	ldr	r5, [pc, #48]	; (80a0e98 <_Z22__fetch_global_Serial1v+0x34>)
 80a0e68:	6829      	ldr	r1, [r5, #0]
 80a0e6a:	f011 0401 	ands.w	r4, r1, #1
 80a0e6e:	d111      	bne.n	80a0e94 <_Z22__fetch_global_Serial1v+0x30>
 80a0e70:	4628      	mov	r0, r5
 80a0e72:	f7ff f916 	bl	80a00a2 <__cxa_guard_acquire>
 80a0e76:	b168      	cbz	r0, 80a0e94 <_Z22__fetch_global_Serial1v+0x30>
 80a0e78:	4a08      	ldr	r2, [pc, #32]	; (80a0e9c <_Z22__fetch_global_Serial1v+0x38>)
 80a0e7a:	4621      	mov	r1, r4
 80a0e7c:	4b08      	ldr	r3, [pc, #32]	; (80a0ea0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0e7e:	4809      	ldr	r0, [pc, #36]	; (80a0ea4 <_Z22__fetch_global_Serial1v+0x40>)
 80a0e80:	f7ff ffda 	bl	80a0e38 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0e84:	4628      	mov	r0, r5
 80a0e86:	f7ff f911 	bl	80a00ac <__cxa_guard_release>
 80a0e8a:	4a07      	ldr	r2, [pc, #28]	; (80a0ea8 <_Z22__fetch_global_Serial1v+0x44>)
 80a0e8c:	4907      	ldr	r1, [pc, #28]	; (80a0eac <_Z22__fetch_global_Serial1v+0x48>)
 80a0e8e:	4805      	ldr	r0, [pc, #20]	; (80a0ea4 <_Z22__fetch_global_Serial1v+0x40>)
 80a0e90:	f000 fa34 	bl	80a12fc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0e94:	4803      	ldr	r0, [pc, #12]	; (80a0ea4 <_Z22__fetch_global_Serial1v+0x40>)
 80a0e96:	bd38      	pop	{r3, r4, r5, pc}
 80a0e98:	20000130 	.word	0x20000130
 80a0e9c:	20000134 	.word	0x20000134
 80a0ea0:	200000ac 	.word	0x200000ac
 80a0ea4:	20000098 	.word	0x20000098
 80a0ea8:	20000068 	.word	0x20000068
 80a0eac:	080a0db5 	.word	0x080a0db5

080a0eb0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0eb0:	7441      	strb	r1, [r0, #17]
 80a0eb2:	4770      	bx	lr

080a0eb4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0eb4:	4770      	bx	lr

080a0eb6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0eb6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0eb8:	2100      	movs	r1, #0
 80a0eba:	7c00      	ldrb	r0, [r0, #16]
 80a0ebc:	f7ff fbf6 	bl	80a06ac <HAL_USB_USART_Receive_Data>
}
 80a0ec0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ec4:	bf28      	it	cs
 80a0ec6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0eca:	bd08      	pop	{r3, pc}

080a0ecc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0ecc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0ece:	2101      	movs	r1, #1
 80a0ed0:	7c00      	ldrb	r0, [r0, #16]
 80a0ed2:	f7ff fbeb 	bl	80a06ac <HAL_USB_USART_Receive_Data>
}
 80a0ed6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0eda:	bf28      	it	cs
 80a0edc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0ee0:	bd08      	pop	{r3, pc}

080a0ee2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0ee2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0ee4:	7c00      	ldrb	r0, [r0, #16]
 80a0ee6:	f7ff fbd9 	bl	80a069c <HAL_USB_USART_Available_Data_For_Write>
}
 80a0eea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0eee:	bd08      	pop	{r3, pc}

080a0ef0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0ef0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0ef2:	7c00      	ldrb	r0, [r0, #16]
 80a0ef4:	f7ff fbca 	bl	80a068c <HAL_USB_USART_Available_Data>
}
 80a0ef8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0efc:	bd08      	pop	{r3, pc}

080a0efe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0efe:	7c00      	ldrb	r0, [r0, #16]
 80a0f00:	f7ff bbe4 	b.w	80a06cc <HAL_USB_USART_Flush_Data>

080a0f04 <_ZN9USBSerialD0Ev>:
 80a0f04:	b510      	push	{r4, lr}
 80a0f06:	4604      	mov	r4, r0
 80a0f08:	2114      	movs	r1, #20
 80a0f0a:	f000 f9fc 	bl	80a1306 <_ZdlPvj>
 80a0f0e:	4620      	mov	r0, r4
 80a0f10:	bd10      	pop	{r4, pc}

080a0f12 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0f12:	b538      	push	{r3, r4, r5, lr}
 80a0f14:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f16:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0f18:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f1a:	f7ff fbbf 	bl	80a069c <HAL_USB_USART_Available_Data_For_Write>
 80a0f1e:	2800      	cmp	r0, #0
 80a0f20:	dc01      	bgt.n	80a0f26 <_ZN9USBSerial5writeEh+0x14>
 80a0f22:	7c60      	ldrb	r0, [r4, #17]
 80a0f24:	b128      	cbz	r0, 80a0f32 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0f26:	4629      	mov	r1, r5
 80a0f28:	7c20      	ldrb	r0, [r4, #16]
 80a0f2a:	f7ff fbc7 	bl	80a06bc <HAL_USB_USART_Send_Data>
 80a0f2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0f32:	bd38      	pop	{r3, r4, r5, pc}

080a0f34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0f34:	b510      	push	{r4, lr}
 80a0f36:	4604      	mov	r4, r0
 80a0f38:	2300      	movs	r3, #0
 80a0f3a:	6063      	str	r3, [r4, #4]
 80a0f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0f40:	60a3      	str	r3, [r4, #8]
 80a0f42:	4b05      	ldr	r3, [pc, #20]	; (80a0f58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0f44:	4608      	mov	r0, r1
 80a0f46:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0f48:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0f4a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0f4c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0f4e:	4611      	mov	r1, r2
 80a0f50:	f7ff fb8c 	bl	80a066c <HAL_USB_USART_Init>
}
 80a0f54:	4620      	mov	r0, r4
 80a0f56:	bd10      	pop	{r4, pc}
 80a0f58:	080a2880 	.word	0x080a2880

080a0f5c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0f5c:	2200      	movs	r2, #0
 80a0f5e:	7c00      	ldrb	r0, [r0, #16]
 80a0f60:	f7ff bb8c 	b.w	80a067c <HAL_USB_USART_Begin>

080a0f64 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0f64:	b510      	push	{r4, lr}
 80a0f66:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0f68:	2214      	movs	r2, #20
 80a0f6a:	2100      	movs	r1, #0
 80a0f6c:	f001 faa7 	bl	80a24be <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0f70:	4b05      	ldr	r3, [pc, #20]	; (80a0f88 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0f72:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0f74:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0f76:	4b05      	ldr	r3, [pc, #20]	; (80a0f8c <_Z19acquireSerialBufferv+0x28>)
 80a0f78:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0f7a:	f240 1301 	movw	r3, #257	; 0x101
 80a0f7e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0f80:	2381      	movs	r3, #129	; 0x81
 80a0f82:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0f84:	bd10      	pop	{r4, pc}
 80a0f86:	bf00      	nop
 80a0f88:	2000023d 	.word	0x2000023d
 80a0f8c:	200001bc 	.word	0x200001bc

080a0f90 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0f90:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0f92:	4d0e      	ldr	r5, [pc, #56]	; (80a0fcc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0f94:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0f96:	a801      	add	r0, sp, #4
 80a0f98:	f7ff ffe4 	bl	80a0f64 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0f9c:	6829      	ldr	r1, [r5, #0]
 80a0f9e:	f011 0401 	ands.w	r4, r1, #1
 80a0fa2:	d110      	bne.n	80a0fc6 <_Z16_fetch_usbserialv+0x36>
 80a0fa4:	4628      	mov	r0, r5
 80a0fa6:	f7ff f87c 	bl	80a00a2 <__cxa_guard_acquire>
 80a0faa:	b160      	cbz	r0, 80a0fc6 <_Z16_fetch_usbserialv+0x36>
 80a0fac:	aa01      	add	r2, sp, #4
 80a0fae:	4621      	mov	r1, r4
 80a0fb0:	4807      	ldr	r0, [pc, #28]	; (80a0fd0 <_Z16_fetch_usbserialv+0x40>)
 80a0fb2:	f7ff ffbf 	bl	80a0f34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0fb6:	4628      	mov	r0, r5
 80a0fb8:	f7ff f878 	bl	80a00ac <__cxa_guard_release>
 80a0fbc:	4a05      	ldr	r2, [pc, #20]	; (80a0fd4 <_Z16_fetch_usbserialv+0x44>)
 80a0fbe:	4906      	ldr	r1, [pc, #24]	; (80a0fd8 <_Z16_fetch_usbserialv+0x48>)
 80a0fc0:	4803      	ldr	r0, [pc, #12]	; (80a0fd0 <_Z16_fetch_usbserialv+0x40>)
 80a0fc2:	f000 f99b 	bl	80a12fc <__aeabi_atexit>
	return _usbserial;
}
 80a0fc6:	4802      	ldr	r0, [pc, #8]	; (80a0fd0 <_Z16_fetch_usbserialv+0x40>)
 80a0fc8:	b007      	add	sp, #28
 80a0fca:	bd30      	pop	{r4, r5, pc}
 80a0fcc:	200001b8 	.word	0x200001b8
 80a0fd0:	20000340 	.word	0x20000340
 80a0fd4:	20000068 	.word	0x20000068
 80a0fd8:	080a0eb5 	.word	0x080a0eb5

080a0fdc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0fdc:	b510      	push	{r4, lr}
 80a0fde:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0fe0:	2214      	movs	r2, #20
 80a0fe2:	2100      	movs	r1, #0
 80a0fe4:	f001 fa6b 	bl	80a24be <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0fe8:	4b05      	ldr	r3, [pc, #20]	; (80a1000 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0fea:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0fec:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0fee:	4b05      	ldr	r3, [pc, #20]	; (80a1004 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0ff0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0ff2:	f240 1301 	movw	r3, #257	; 0x101
 80a0ff6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0ff8:	2381      	movs	r3, #129	; 0x81
 80a0ffa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0ffc:	bd10      	pop	{r4, pc}
 80a0ffe:	bf00      	nop
 80a1000:	200003f0 	.word	0x200003f0
 80a1004:	20000358 	.word	0x20000358

080a1008 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1008:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a100a:	4c0e      	ldr	r4, [pc, #56]	; (80a1044 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a100c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a100e:	a801      	add	r0, sp, #4
 80a1010:	f7ff ffe4 	bl	80a0fdc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1014:	6823      	ldr	r3, [r4, #0]
 80a1016:	07db      	lsls	r3, r3, #31
 80a1018:	d410      	bmi.n	80a103c <_Z17_fetch_usbserial1v+0x34>
 80a101a:	4620      	mov	r0, r4
 80a101c:	f7ff f841 	bl	80a00a2 <__cxa_guard_acquire>
 80a1020:	b160      	cbz	r0, 80a103c <_Z17_fetch_usbserial1v+0x34>
 80a1022:	aa01      	add	r2, sp, #4
 80a1024:	2101      	movs	r1, #1
 80a1026:	4808      	ldr	r0, [pc, #32]	; (80a1048 <_Z17_fetch_usbserial1v+0x40>)
 80a1028:	f7ff ff84 	bl	80a0f34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a102c:	4620      	mov	r0, r4
 80a102e:	f7ff f83d 	bl	80a00ac <__cxa_guard_release>
 80a1032:	4a06      	ldr	r2, [pc, #24]	; (80a104c <_Z17_fetch_usbserial1v+0x44>)
 80a1034:	4906      	ldr	r1, [pc, #24]	; (80a1050 <_Z17_fetch_usbserial1v+0x48>)
 80a1036:	4804      	ldr	r0, [pc, #16]	; (80a1048 <_Z17_fetch_usbserial1v+0x40>)
 80a1038:	f000 f960 	bl	80a12fc <__aeabi_atexit>
  return _usbserial1;
}
 80a103c:	4802      	ldr	r0, [pc, #8]	; (80a1048 <_Z17_fetch_usbserial1v+0x40>)
 80a103e:	b006      	add	sp, #24
 80a1040:	bd10      	pop	{r4, pc}
 80a1042:	bf00      	nop
 80a1044:	20000354 	.word	0x20000354
 80a1048:	200003dc 	.word	0x200003dc
 80a104c:	20000068 	.word	0x20000068
 80a1050:	080a0eb5 	.word	0x080a0eb5

080a1054 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1054:	2200      	movs	r2, #0
 80a1056:	4611      	mov	r1, r2
 80a1058:	6840      	ldr	r0, [r0, #4]
 80a105a:	f7ff bb8b 	b.w	80a0774 <network_ready>

080a105e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a105e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1060:	4616      	mov	r6, r2
 80a1062:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1064:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1066:	460f      	mov	r7, r1
 80a1068:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a106a:	2100      	movs	r1, #0
 80a106c:	a803      	add	r0, sp, #12
 80a106e:	f001 fa26 	bl	80a24be <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1072:	4630      	mov	r0, r6
 80a1074:	f001 fa54 	bl	80a2520 <strlen>
 80a1078:	2500      	movs	r5, #0
 80a107a:	9500      	str	r5, [sp, #0]
 80a107c:	b281      	uxth	r1, r0
 80a107e:	687b      	ldr	r3, [r7, #4]
 80a1080:	aa03      	add	r2, sp, #12
 80a1082:	4630      	mov	r0, r6
 80a1084:	f7ff fb2a 	bl	80a06dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1088:	b120      	cbz	r0, 80a1094 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a108a:	4629      	mov	r1, r5
 80a108c:	4620      	mov	r0, r4
 80a108e:	f7ff fc87 	bl	80a09a0 <_ZN9IPAddressC1Em>
 80a1092:	e003      	b.n	80a109c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1094:	a903      	add	r1, sp, #12
 80a1096:	4620      	mov	r0, r4
 80a1098:	f7ff fc70 	bl	80a097c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a109c:	4620      	mov	r0, r4
 80a109e:	b009      	add	sp, #36	; 0x24
 80a10a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a10a2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a10a2:	2200      	movs	r2, #0
 80a10a4:	4611      	mov	r1, r2
 80a10a6:	6840      	ldr	r0, [r0, #4]
 80a10a8:	f7ff bb84 	b.w	80a07b4 <network_listening>

080a10ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a10ac:	2200      	movs	r2, #0
 80a10ae:	4611      	mov	r1, r2
 80a10b0:	6840      	ldr	r0, [r0, #4]
 80a10b2:	f7ff bb8f 	b.w	80a07d4 <network_get_listen_timeout>

080a10b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a10b6:	2200      	movs	r2, #0
 80a10b8:	6840      	ldr	r0, [r0, #4]
 80a10ba:	f7ff bb83 	b.w	80a07c4 <network_set_listen_timeout>

080a10be <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a10be:	2200      	movs	r2, #0
 80a10c0:	f081 0101 	eor.w	r1, r1, #1
 80a10c4:	6840      	ldr	r0, [r0, #4]
 80a10c6:	f7ff bb6d 	b.w	80a07a4 <network_listen>

080a10ca <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a10ca:	2300      	movs	r3, #0
 80a10cc:	461a      	mov	r2, r3
 80a10ce:	4619      	mov	r1, r3
 80a10d0:	6840      	ldr	r0, [r0, #4]
 80a10d2:	f7ff bb5f 	b.w	80a0794 <network_off>

080a10d6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a10d6:	2300      	movs	r3, #0
 80a10d8:	461a      	mov	r2, r3
 80a10da:	4619      	mov	r1, r3
 80a10dc:	6840      	ldr	r0, [r0, #4]
 80a10de:	f7ff bb51 	b.w	80a0784 <network_on>

080a10e2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a10e2:	2200      	movs	r2, #0
 80a10e4:	4611      	mov	r1, r2
 80a10e6:	6840      	ldr	r0, [r0, #4]
 80a10e8:	f7ff bb34 	b.w	80a0754 <network_connecting>

080a10ec <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a10ec:	2200      	movs	r2, #0
 80a10ee:	2102      	movs	r1, #2
 80a10f0:	6840      	ldr	r0, [r0, #4]
 80a10f2:	f7ff bb37 	b.w	80a0764 <network_disconnect>

080a10f6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a10f6:	2300      	movs	r3, #0
 80a10f8:	461a      	mov	r2, r3
 80a10fa:	6840      	ldr	r0, [r0, #4]
 80a10fc:	f7ff bb22 	b.w	80a0744 <network_connect>

080a1100 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1100:	4b02      	ldr	r3, [pc, #8]	; (80a110c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1102:	2204      	movs	r2, #4
 80a1104:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1106:	4a02      	ldr	r2, [pc, #8]	; (80a1110 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1108:	601a      	str	r2, [r3, #0]
 80a110a:	4770      	bx	lr
 80a110c:	200004f4 	.word	0x200004f4
 80a1110:	080a28b0 	.word	0x080a28b0

080a1114 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1114:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1116:	4b14      	ldr	r3, [pc, #80]	; (80a1168 <serialEventRun+0x54>)
 80a1118:	b133      	cbz	r3, 80a1128 <serialEventRun+0x14>
 80a111a:	f7ff ff39 	bl	80a0f90 <_Z16_fetch_usbserialv>
 80a111e:	6803      	ldr	r3, [r0, #0]
 80a1120:	691b      	ldr	r3, [r3, #16]
 80a1122:	4798      	blx	r3
 80a1124:	2800      	cmp	r0, #0
 80a1126:	dc16      	bgt.n	80a1156 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1128:	4b10      	ldr	r3, [pc, #64]	; (80a116c <serialEventRun+0x58>)
 80a112a:	b133      	cbz	r3, 80a113a <serialEventRun+0x26>
 80a112c:	f7ff fe9a 	bl	80a0e64 <_Z22__fetch_global_Serial1v>
 80a1130:	6803      	ldr	r3, [r0, #0]
 80a1132:	691b      	ldr	r3, [r3, #16]
 80a1134:	4798      	blx	r3
 80a1136:	2800      	cmp	r0, #0
 80a1138:	dc10      	bgt.n	80a115c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a113a:	4b0d      	ldr	r3, [pc, #52]	; (80a1170 <serialEventRun+0x5c>)
 80a113c:	b10b      	cbz	r3, 80a1142 <serialEventRun+0x2e>
 80a113e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1142:	4b0c      	ldr	r3, [pc, #48]	; (80a1174 <serialEventRun+0x60>)
 80a1144:	b17b      	cbz	r3, 80a1166 <serialEventRun+0x52>
 80a1146:	f7ff ff5f 	bl	80a1008 <_Z17_fetch_usbserial1v>
 80a114a:	6803      	ldr	r3, [r0, #0]
 80a114c:	691b      	ldr	r3, [r3, #16]
 80a114e:	4798      	blx	r3
 80a1150:	2800      	cmp	r0, #0
 80a1152:	dc06      	bgt.n	80a1162 <serialEventRun+0x4e>
 80a1154:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1156:	f3af 8000 	nop.w
 80a115a:	e7e5      	b.n	80a1128 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a115c:	f3af 8000 	nop.w
 80a1160:	e7eb      	b.n	80a113a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1162:	f3af 8000 	nop.w
 80a1166:	bd08      	pop	{r3, pc}
	...

080a1178 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1178:	b508      	push	{r3, lr}
	serialEventRun();
 80a117a:	f7ff ffcb 	bl	80a1114 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a117e:	f7ff f9d9 	bl	80a0534 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1182:	4b01      	ldr	r3, [pc, #4]	; (80a1188 <_post_loop+0x10>)
 80a1184:	6018      	str	r0, [r3, #0]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	20000504 	.word	0x20000504

080a118c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a118c:	4802      	ldr	r0, [pc, #8]	; (80a1198 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a118e:	4a03      	ldr	r2, [pc, #12]	; (80a119c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1190:	4903      	ldr	r1, [pc, #12]	; (80a11a0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1192:	1a12      	subs	r2, r2, r0
 80a1194:	f001 b988 	b.w	80a24a8 <memcpy>
 80a1198:	40024000 	.word	0x40024000
 80a119c:	40024004 	.word	0x40024004
 80a11a0:	080a2980 	.word	0x080a2980

080a11a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a11a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a11a6:	2300      	movs	r3, #0
 80a11a8:	9300      	str	r3, [sp, #0]
 80a11aa:	461a      	mov	r2, r3
 80a11ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a11b0:	f7ff fab6 	bl	80a0720 <system_ctrl_set_result>
}
 80a11b4:	b003      	add	sp, #12
 80a11b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a11bc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a11bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a11be:	8843      	ldrh	r3, [r0, #2]
 80a11c0:	2b0a      	cmp	r3, #10
 80a11c2:	d008      	beq.n	80a11d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a11c4:	2b50      	cmp	r3, #80	; 0x50
 80a11c6:	d109      	bne.n	80a11dc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a11c8:	4b09      	ldr	r3, [pc, #36]	; (80a11f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a11ca:	681b      	ldr	r3, [r3, #0]
 80a11cc:	b13b      	cbz	r3, 80a11de <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a11ce:	b003      	add	sp, #12
 80a11d0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a11d4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a11d6:	f7ff ffe5 	bl	80a11a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a11da:	e006      	b.n	80a11ea <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a11dc:	2300      	movs	r3, #0
 80a11de:	9300      	str	r3, [sp, #0]
 80a11e0:	461a      	mov	r2, r3
 80a11e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a11e6:	f7ff fa9b 	bl	80a0720 <system_ctrl_set_result>
        break;
    }
}
 80a11ea:	b003      	add	sp, #12
 80a11ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80a11f0:	200004fc 	.word	0x200004fc

080a11f4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a11f4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a11f6:	4c10      	ldr	r4, [pc, #64]	; (80a1238 <module_user_init_hook+0x44>)
 80a11f8:	4d10      	ldr	r5, [pc, #64]	; (80a123c <module_user_init_hook+0x48>)
 80a11fa:	6823      	ldr	r3, [r4, #0]
 80a11fc:	42ab      	cmp	r3, r5
 80a11fe:	4b10      	ldr	r3, [pc, #64]	; (80a1240 <module_user_init_hook+0x4c>)
 80a1200:	bf0c      	ite	eq
 80a1202:	2201      	moveq	r2, #1
 80a1204:	2200      	movne	r2, #0
 80a1206:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1208:	d002      	beq.n	80a1210 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a120a:	f7ff ffbf 	bl	80a118c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a120e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1210:	f7ff f988 	bl	80a0524 <HAL_RNG_GetRandomNumber>
 80a1214:	4604      	mov	r4, r0
    srand(seed);
 80a1216:	f001 f95b 	bl	80a24d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a121a:	4b0a      	ldr	r3, [pc, #40]	; (80a1244 <module_user_init_hook+0x50>)
 80a121c:	b113      	cbz	r3, 80a1224 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a121e:	4620      	mov	r0, r4
 80a1220:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1224:	2100      	movs	r1, #0
 80a1226:	4807      	ldr	r0, [pc, #28]	; (80a1244 <module_user_init_hook+0x50>)
 80a1228:	f7ff fa84 	bl	80a0734 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a122c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1230:	2100      	movs	r1, #0
 80a1232:	4805      	ldr	r0, [pc, #20]	; (80a1248 <module_user_init_hook+0x54>)
 80a1234:	f7ff ba6a 	b.w	80a070c <system_ctrl_set_app_request_handler>
 80a1238:	40024000 	.word	0x40024000
 80a123c:	9a271c1e 	.word	0x9a271c1e
 80a1240:	20000500 	.word	0x20000500
 80a1244:	00000000 	.word	0x00000000
 80a1248:	080a11bd 	.word	0x080a11bd

080a124c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a124c:	b570      	push	{r4, r5, r6, lr}
 80a124e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1250:	2514      	movs	r5, #20
 80a1252:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1254:	4e09      	ldr	r6, [pc, #36]	; (80a127c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1256:	2100      	movs	r1, #0
 80a1258:	f001 f931 	bl	80a24be <memset>
 80a125c:	8025      	strh	r5, [r4, #0]
 80a125e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1260:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1262:	60a5      	str	r5, [r4, #8]
 80a1264:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1266:	4628      	mov	r0, r5
 80a1268:	f000 f867 	bl	80a133a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a126c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a126e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1270:	4628      	mov	r0, r5
 80a1272:	f000 f862 	bl	80a133a <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1276:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1278:	4620      	mov	r0, r4
 80a127a:	bd70      	pop	{r4, r5, r6, pc}
 80a127c:	080a28dc 	.word	0x080a28dc

080a1280 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1280:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1282:	4d0e      	ldr	r5, [pc, #56]	; (80a12bc <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1284:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1286:	6829      	ldr	r1, [r5, #0]
 80a1288:	f011 0401 	ands.w	r4, r1, #1
 80a128c:	d113      	bne.n	80a12b6 <_Z19__fetch_global_Wirev+0x36>
 80a128e:	4628      	mov	r0, r5
 80a1290:	f7fe ff07 	bl	80a00a2 <__cxa_guard_acquire>
 80a1294:	b178      	cbz	r0, 80a12b6 <_Z19__fetch_global_Wirev+0x36>
 80a1296:	a801      	add	r0, sp, #4
 80a1298:	f7ff ffd8 	bl	80a124c <_Z17acquireWireBufferv>
 80a129c:	aa01      	add	r2, sp, #4
 80a129e:	4621      	mov	r1, r4
 80a12a0:	4807      	ldr	r0, [pc, #28]	; (80a12c0 <_Z19__fetch_global_Wirev+0x40>)
 80a12a2:	f7ff fae7 	bl	80a0874 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a12a6:	4628      	mov	r0, r5
 80a12a8:	f7fe ff00 	bl	80a00ac <__cxa_guard_release>
 80a12ac:	4a05      	ldr	r2, [pc, #20]	; (80a12c4 <_Z19__fetch_global_Wirev+0x44>)
 80a12ae:	4906      	ldr	r1, [pc, #24]	; (80a12c8 <_Z19__fetch_global_Wirev+0x48>)
 80a12b0:	4803      	ldr	r0, [pc, #12]	; (80a12c0 <_Z19__fetch_global_Wirev+0x40>)
 80a12b2:	f000 f823 	bl	80a12fc <__aeabi_atexit>
	return wire;
}
 80a12b6:	4802      	ldr	r0, [pc, #8]	; (80a12c0 <_Z19__fetch_global_Wirev+0x40>)
 80a12b8:	b007      	add	sp, #28
 80a12ba:	bd30      	pop	{r4, r5, pc}
 80a12bc:	20000508 	.word	0x20000508
 80a12c0:	2000050c 	.word	0x2000050c
 80a12c4:	20000068 	.word	0x20000068
 80a12c8:	080a081d 	.word	0x080a081d

080a12cc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a12cc:	b513      	push	{r0, r1, r4, lr}
 80a12ce:	4c08      	ldr	r4, [pc, #32]	; (80a12f0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a12d0:	2300      	movs	r3, #0
 80a12d2:	461a      	mov	r2, r3
 80a12d4:	4619      	mov	r1, r3
 80a12d6:	9300      	str	r3, [sp, #0]
 80a12d8:	4620      	mov	r0, r4
 80a12da:	f7ff fb77 	bl	80a09cc <_ZN9IPAddressC1Ehhhh>
 80a12de:	4620      	mov	r0, r4
 80a12e0:	4a04      	ldr	r2, [pc, #16]	; (80a12f4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a12e2:	4905      	ldr	r1, [pc, #20]	; (80a12f8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a12e4:	b002      	add	sp, #8
 80a12e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a12ea:	f000 b807 	b.w	80a12fc <__aeabi_atexit>
 80a12ee:	bf00      	nop
 80a12f0:	20000520 	.word	0x20000520
 80a12f4:	20000068 	.word	0x20000068
 80a12f8:	080a091d 	.word	0x080a091d

080a12fc <__aeabi_atexit>:
 80a12fc:	460b      	mov	r3, r1
 80a12fe:	4601      	mov	r1, r0
 80a1300:	4618      	mov	r0, r3
 80a1302:	f001 b8c3 	b.w	80a248c <__cxa_atexit>

080a1306 <_ZdlPvj>:
 80a1306:	f7fe beca 	b.w	80a009e <_ZdlPv>
	...

080a130c <_ZSt15get_new_handlerv>:
 80a130c:	4b02      	ldr	r3, [pc, #8]	; (80a1318 <_ZSt15get_new_handlerv+0xc>)
 80a130e:	6818      	ldr	r0, [r3, #0]
 80a1310:	f3bf 8f5f 	dmb	sy
 80a1314:	4770      	bx	lr
 80a1316:	bf00      	nop
 80a1318:	20000538 	.word	0x20000538

080a131c <_ZnwjRKSt9nothrow_t>:
 80a131c:	b510      	push	{r4, lr}
 80a131e:	2800      	cmp	r0, #0
 80a1320:	bf14      	ite	ne
 80a1322:	4604      	movne	r4, r0
 80a1324:	2401      	moveq	r4, #1
 80a1326:	4620      	mov	r0, r4
 80a1328:	f7ff fa5c 	bl	80a07e4 <malloc>
 80a132c:	b920      	cbnz	r0, 80a1338 <_ZnwjRKSt9nothrow_t+0x1c>
 80a132e:	f7ff ffed 	bl	80a130c <_ZSt15get_new_handlerv>
 80a1332:	b108      	cbz	r0, 80a1338 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1334:	4780      	blx	r0
 80a1336:	e7f6      	b.n	80a1326 <_ZnwjRKSt9nothrow_t+0xa>
 80a1338:	bd10      	pop	{r4, pc}

080a133a <_ZnajRKSt9nothrow_t>:
 80a133a:	f7ff bfef 	b.w	80a131c <_ZnwjRKSt9nothrow_t>
	...

080a1340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1340:	4b24      	ldr	r3, [pc, #144]	; (80a13d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1342:	681a      	ldr	r2, [r3, #0]
 80a1344:	07d0      	lsls	r0, r2, #31
 80a1346:	bf5c      	itt	pl
 80a1348:	2201      	movpl	r2, #1
 80a134a:	601a      	strpl	r2, [r3, #0]
 80a134c:	4b22      	ldr	r3, [pc, #136]	; (80a13d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a134e:	681a      	ldr	r2, [r3, #0]
 80a1350:	07d1      	lsls	r1, r2, #31
 80a1352:	bf5c      	itt	pl
 80a1354:	2201      	movpl	r2, #1
 80a1356:	601a      	strpl	r2, [r3, #0]
 80a1358:	4b20      	ldr	r3, [pc, #128]	; (80a13dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a135a:	681a      	ldr	r2, [r3, #0]
 80a135c:	07d2      	lsls	r2, r2, #31
 80a135e:	bf5c      	itt	pl
 80a1360:	2201      	movpl	r2, #1
 80a1362:	601a      	strpl	r2, [r3, #0]
 80a1364:	4b1e      	ldr	r3, [pc, #120]	; (80a13e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1366:	681a      	ldr	r2, [r3, #0]
 80a1368:	07d0      	lsls	r0, r2, #31
 80a136a:	bf5c      	itt	pl
 80a136c:	2201      	movpl	r2, #1
 80a136e:	601a      	strpl	r2, [r3, #0]
 80a1370:	4b1c      	ldr	r3, [pc, #112]	; (80a13e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1372:	681a      	ldr	r2, [r3, #0]
 80a1374:	07d1      	lsls	r1, r2, #31
 80a1376:	bf5c      	itt	pl
 80a1378:	2201      	movpl	r2, #1
 80a137a:	601a      	strpl	r2, [r3, #0]
 80a137c:	4b1a      	ldr	r3, [pc, #104]	; (80a13e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a137e:	681a      	ldr	r2, [r3, #0]
 80a1380:	07d2      	lsls	r2, r2, #31
 80a1382:	bf5c      	itt	pl
 80a1384:	2201      	movpl	r2, #1
 80a1386:	601a      	strpl	r2, [r3, #0]
 80a1388:	4b18      	ldr	r3, [pc, #96]	; (80a13ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a138a:	681a      	ldr	r2, [r3, #0]
 80a138c:	07d0      	lsls	r0, r2, #31
 80a138e:	bf5c      	itt	pl
 80a1390:	2201      	movpl	r2, #1
 80a1392:	601a      	strpl	r2, [r3, #0]
 80a1394:	4b16      	ldr	r3, [pc, #88]	; (80a13f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1396:	681a      	ldr	r2, [r3, #0]
 80a1398:	07d1      	lsls	r1, r2, #31
 80a139a:	bf5c      	itt	pl
 80a139c:	2201      	movpl	r2, #1
 80a139e:	601a      	strpl	r2, [r3, #0]
 80a13a0:	4b14      	ldr	r3, [pc, #80]	; (80a13f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a13a2:	681a      	ldr	r2, [r3, #0]
 80a13a4:	07d2      	lsls	r2, r2, #31
 80a13a6:	bf5c      	itt	pl
 80a13a8:	2201      	movpl	r2, #1
 80a13aa:	601a      	strpl	r2, [r3, #0]
 80a13ac:	4b12      	ldr	r3, [pc, #72]	; (80a13f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a13ae:	681a      	ldr	r2, [r3, #0]
 80a13b0:	07d0      	lsls	r0, r2, #31
 80a13b2:	bf5c      	itt	pl
 80a13b4:	2201      	movpl	r2, #1
 80a13b6:	601a      	strpl	r2, [r3, #0]
 80a13b8:	4b10      	ldr	r3, [pc, #64]	; (80a13fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a13ba:	681a      	ldr	r2, [r3, #0]
 80a13bc:	07d1      	lsls	r1, r2, #31
 80a13be:	bf5c      	itt	pl
 80a13c0:	2201      	movpl	r2, #1
 80a13c2:	601a      	strpl	r2, [r3, #0]
 80a13c4:	4b0e      	ldr	r3, [pc, #56]	; (80a1400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a13c6:	681a      	ldr	r2, [r3, #0]
 80a13c8:	07d2      	lsls	r2, r2, #31
 80a13ca:	bf5c      	itt	pl
 80a13cc:	2201      	movpl	r2, #1
 80a13ce:	601a      	strpl	r2, [r3, #0]
 80a13d0:	4770      	bx	lr
 80a13d2:	bf00      	nop
 80a13d4:	20000568 	.word	0x20000568
 80a13d8:	20000564 	.word	0x20000564
 80a13dc:	20000560 	.word	0x20000560
 80a13e0:	2000055c 	.word	0x2000055c
 80a13e4:	20000558 	.word	0x20000558
 80a13e8:	20000554 	.word	0x20000554
 80a13ec:	20000550 	.word	0x20000550
 80a13f0:	2000054c 	.word	0x2000054c
 80a13f4:	20000548 	.word	0x20000548
 80a13f8:	20000544 	.word	0x20000544
 80a13fc:	20000540 	.word	0x20000540
 80a1400:	2000053c 	.word	0x2000053c

080a1404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1404:	4b18      	ldr	r3, [pc, #96]	; (80a1468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1406:	681a      	ldr	r2, [r3, #0]
 80a1408:	07d1      	lsls	r1, r2, #31
 80a140a:	bf5c      	itt	pl
 80a140c:	2201      	movpl	r2, #1
 80a140e:	601a      	strpl	r2, [r3, #0]
 80a1410:	4b16      	ldr	r3, [pc, #88]	; (80a146c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1412:	681a      	ldr	r2, [r3, #0]
 80a1414:	07d2      	lsls	r2, r2, #31
 80a1416:	bf5c      	itt	pl
 80a1418:	2201      	movpl	r2, #1
 80a141a:	601a      	strpl	r2, [r3, #0]
 80a141c:	4b14      	ldr	r3, [pc, #80]	; (80a1470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a141e:	681a      	ldr	r2, [r3, #0]
 80a1420:	07d0      	lsls	r0, r2, #31
 80a1422:	bf5c      	itt	pl
 80a1424:	2201      	movpl	r2, #1
 80a1426:	601a      	strpl	r2, [r3, #0]
 80a1428:	4b12      	ldr	r3, [pc, #72]	; (80a1474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a142a:	681a      	ldr	r2, [r3, #0]
 80a142c:	07d1      	lsls	r1, r2, #31
 80a142e:	bf5c      	itt	pl
 80a1430:	2201      	movpl	r2, #1
 80a1432:	601a      	strpl	r2, [r3, #0]
 80a1434:	4b10      	ldr	r3, [pc, #64]	; (80a1478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1436:	681a      	ldr	r2, [r3, #0]
 80a1438:	07d2      	lsls	r2, r2, #31
 80a143a:	bf5c      	itt	pl
 80a143c:	2201      	movpl	r2, #1
 80a143e:	601a      	strpl	r2, [r3, #0]
 80a1440:	4b0e      	ldr	r3, [pc, #56]	; (80a147c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1442:	681a      	ldr	r2, [r3, #0]
 80a1444:	07d0      	lsls	r0, r2, #31
 80a1446:	bf5c      	itt	pl
 80a1448:	2201      	movpl	r2, #1
 80a144a:	601a      	strpl	r2, [r3, #0]
 80a144c:	4b0c      	ldr	r3, [pc, #48]	; (80a1480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a144e:	681a      	ldr	r2, [r3, #0]
 80a1450:	07d1      	lsls	r1, r2, #31
 80a1452:	bf5c      	itt	pl
 80a1454:	2201      	movpl	r2, #1
 80a1456:	601a      	strpl	r2, [r3, #0]
 80a1458:	4b0a      	ldr	r3, [pc, #40]	; (80a1484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a145a:	681a      	ldr	r2, [r3, #0]
 80a145c:	07d2      	lsls	r2, r2, #31
 80a145e:	bf5c      	itt	pl
 80a1460:	2201      	movpl	r2, #1
 80a1462:	601a      	strpl	r2, [r3, #0]
 80a1464:	4770      	bx	lr
 80a1466:	bf00      	nop
 80a1468:	20000588 	.word	0x20000588
 80a146c:	20000584 	.word	0x20000584
 80a1470:	20000580 	.word	0x20000580
 80a1474:	2000057c 	.word	0x2000057c
 80a1478:	20000578 	.word	0x20000578
 80a147c:	20000574 	.word	0x20000574
 80a1480:	20000570 	.word	0x20000570
 80a1484:	2000056c 	.word	0x2000056c

080a1488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1488:	4b18      	ldr	r3, [pc, #96]	; (80a14ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a148a:	681a      	ldr	r2, [r3, #0]
 80a148c:	07d1      	lsls	r1, r2, #31
 80a148e:	bf5c      	itt	pl
 80a1490:	2201      	movpl	r2, #1
 80a1492:	601a      	strpl	r2, [r3, #0]
 80a1494:	4b16      	ldr	r3, [pc, #88]	; (80a14f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1496:	681a      	ldr	r2, [r3, #0]
 80a1498:	07d2      	lsls	r2, r2, #31
 80a149a:	bf5c      	itt	pl
 80a149c:	2201      	movpl	r2, #1
 80a149e:	601a      	strpl	r2, [r3, #0]
 80a14a0:	4b14      	ldr	r3, [pc, #80]	; (80a14f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a14a2:	681a      	ldr	r2, [r3, #0]
 80a14a4:	07d0      	lsls	r0, r2, #31
 80a14a6:	bf5c      	itt	pl
 80a14a8:	2201      	movpl	r2, #1
 80a14aa:	601a      	strpl	r2, [r3, #0]
 80a14ac:	4b12      	ldr	r3, [pc, #72]	; (80a14f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a14ae:	681a      	ldr	r2, [r3, #0]
 80a14b0:	07d1      	lsls	r1, r2, #31
 80a14b2:	bf5c      	itt	pl
 80a14b4:	2201      	movpl	r2, #1
 80a14b6:	601a      	strpl	r2, [r3, #0]
 80a14b8:	4b10      	ldr	r3, [pc, #64]	; (80a14fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a14ba:	681a      	ldr	r2, [r3, #0]
 80a14bc:	07d2      	lsls	r2, r2, #31
 80a14be:	bf5c      	itt	pl
 80a14c0:	2201      	movpl	r2, #1
 80a14c2:	601a      	strpl	r2, [r3, #0]
 80a14c4:	4b0e      	ldr	r3, [pc, #56]	; (80a1500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a14c6:	681a      	ldr	r2, [r3, #0]
 80a14c8:	07d0      	lsls	r0, r2, #31
 80a14ca:	bf5c      	itt	pl
 80a14cc:	2201      	movpl	r2, #1
 80a14ce:	601a      	strpl	r2, [r3, #0]
 80a14d0:	4b0c      	ldr	r3, [pc, #48]	; (80a1504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a14d2:	681a      	ldr	r2, [r3, #0]
 80a14d4:	07d1      	lsls	r1, r2, #31
 80a14d6:	bf5c      	itt	pl
 80a14d8:	2201      	movpl	r2, #1
 80a14da:	601a      	strpl	r2, [r3, #0]
 80a14dc:	4b0a      	ldr	r3, [pc, #40]	; (80a1508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a14de:	681a      	ldr	r2, [r3, #0]
 80a14e0:	07d2      	lsls	r2, r2, #31
 80a14e2:	bf5c      	itt	pl
 80a14e4:	2201      	movpl	r2, #1
 80a14e6:	601a      	strpl	r2, [r3, #0]
 80a14e8:	4770      	bx	lr
 80a14ea:	bf00      	nop
 80a14ec:	200005a8 	.word	0x200005a8
 80a14f0:	200005a4 	.word	0x200005a4
 80a14f4:	200005a0 	.word	0x200005a0
 80a14f8:	2000059c 	.word	0x2000059c
 80a14fc:	20000598 	.word	0x20000598
 80a1500:	20000594 	.word	0x20000594
 80a1504:	20000590 	.word	0x20000590
 80a1508:	2000058c 	.word	0x2000058c

080a150c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a150c:	4b24      	ldr	r3, [pc, #144]	; (80a15a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a150e:	681a      	ldr	r2, [r3, #0]
 80a1510:	07d0      	lsls	r0, r2, #31
 80a1512:	bf5c      	itt	pl
 80a1514:	2201      	movpl	r2, #1
 80a1516:	601a      	strpl	r2, [r3, #0]
 80a1518:	4b22      	ldr	r3, [pc, #136]	; (80a15a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a151a:	681a      	ldr	r2, [r3, #0]
 80a151c:	07d1      	lsls	r1, r2, #31
 80a151e:	bf5c      	itt	pl
 80a1520:	2201      	movpl	r2, #1
 80a1522:	601a      	strpl	r2, [r3, #0]
 80a1524:	4b20      	ldr	r3, [pc, #128]	; (80a15a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1526:	681a      	ldr	r2, [r3, #0]
 80a1528:	07d2      	lsls	r2, r2, #31
 80a152a:	bf5c      	itt	pl
 80a152c:	2201      	movpl	r2, #1
 80a152e:	601a      	strpl	r2, [r3, #0]
 80a1530:	4b1e      	ldr	r3, [pc, #120]	; (80a15ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1532:	681a      	ldr	r2, [r3, #0]
 80a1534:	07d0      	lsls	r0, r2, #31
 80a1536:	bf5c      	itt	pl
 80a1538:	2201      	movpl	r2, #1
 80a153a:	601a      	strpl	r2, [r3, #0]
 80a153c:	4b1c      	ldr	r3, [pc, #112]	; (80a15b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a153e:	681a      	ldr	r2, [r3, #0]
 80a1540:	07d1      	lsls	r1, r2, #31
 80a1542:	bf5c      	itt	pl
 80a1544:	2201      	movpl	r2, #1
 80a1546:	601a      	strpl	r2, [r3, #0]
 80a1548:	4b1a      	ldr	r3, [pc, #104]	; (80a15b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a154a:	681a      	ldr	r2, [r3, #0]
 80a154c:	07d2      	lsls	r2, r2, #31
 80a154e:	bf5c      	itt	pl
 80a1550:	2201      	movpl	r2, #1
 80a1552:	601a      	strpl	r2, [r3, #0]
 80a1554:	4b18      	ldr	r3, [pc, #96]	; (80a15b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1556:	681a      	ldr	r2, [r3, #0]
 80a1558:	07d0      	lsls	r0, r2, #31
 80a155a:	bf5c      	itt	pl
 80a155c:	2201      	movpl	r2, #1
 80a155e:	601a      	strpl	r2, [r3, #0]
 80a1560:	4b16      	ldr	r3, [pc, #88]	; (80a15bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1562:	681a      	ldr	r2, [r3, #0]
 80a1564:	07d1      	lsls	r1, r2, #31
 80a1566:	bf5c      	itt	pl
 80a1568:	2201      	movpl	r2, #1
 80a156a:	601a      	strpl	r2, [r3, #0]
 80a156c:	4b14      	ldr	r3, [pc, #80]	; (80a15c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a156e:	681a      	ldr	r2, [r3, #0]
 80a1570:	07d2      	lsls	r2, r2, #31
 80a1572:	bf5c      	itt	pl
 80a1574:	2201      	movpl	r2, #1
 80a1576:	601a      	strpl	r2, [r3, #0]
 80a1578:	4b12      	ldr	r3, [pc, #72]	; (80a15c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a157a:	681a      	ldr	r2, [r3, #0]
 80a157c:	07d0      	lsls	r0, r2, #31
 80a157e:	bf5c      	itt	pl
 80a1580:	2201      	movpl	r2, #1
 80a1582:	601a      	strpl	r2, [r3, #0]
 80a1584:	4b10      	ldr	r3, [pc, #64]	; (80a15c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1586:	681a      	ldr	r2, [r3, #0]
 80a1588:	07d1      	lsls	r1, r2, #31
 80a158a:	bf5c      	itt	pl
 80a158c:	2201      	movpl	r2, #1
 80a158e:	601a      	strpl	r2, [r3, #0]
 80a1590:	4b0e      	ldr	r3, [pc, #56]	; (80a15cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1592:	681a      	ldr	r2, [r3, #0]
 80a1594:	07d2      	lsls	r2, r2, #31
 80a1596:	bf5c      	itt	pl
 80a1598:	2201      	movpl	r2, #1
 80a159a:	601a      	strpl	r2, [r3, #0]
 80a159c:	4770      	bx	lr
 80a159e:	bf00      	nop
 80a15a0:	200005d8 	.word	0x200005d8
 80a15a4:	200005d4 	.word	0x200005d4
 80a15a8:	200005d0 	.word	0x200005d0
 80a15ac:	200005cc 	.word	0x200005cc
 80a15b0:	200005c8 	.word	0x200005c8
 80a15b4:	200005c4 	.word	0x200005c4
 80a15b8:	200005c0 	.word	0x200005c0
 80a15bc:	200005bc 	.word	0x200005bc
 80a15c0:	200005b8 	.word	0x200005b8
 80a15c4:	200005b4 	.word	0x200005b4
 80a15c8:	200005b0 	.word	0x200005b0
 80a15cc:	200005ac 	.word	0x200005ac

080a15d0 <__aeabi_drsub>:
 80a15d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a15d4:	e002      	b.n	80a15dc <__adddf3>
 80a15d6:	bf00      	nop

080a15d8 <__aeabi_dsub>:
 80a15d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a15dc <__adddf3>:
 80a15dc:	b530      	push	{r4, r5, lr}
 80a15de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a15e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a15e6:	ea94 0f05 	teq	r4, r5
 80a15ea:	bf08      	it	eq
 80a15ec:	ea90 0f02 	teqeq	r0, r2
 80a15f0:	bf1f      	itttt	ne
 80a15f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a15f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a15fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a15fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1602:	f000 80e2 	beq.w	80a17ca <__adddf3+0x1ee>
 80a1606:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a160a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a160e:	bfb8      	it	lt
 80a1610:	426d      	neglt	r5, r5
 80a1612:	dd0c      	ble.n	80a162e <__adddf3+0x52>
 80a1614:	442c      	add	r4, r5
 80a1616:	ea80 0202 	eor.w	r2, r0, r2
 80a161a:	ea81 0303 	eor.w	r3, r1, r3
 80a161e:	ea82 0000 	eor.w	r0, r2, r0
 80a1622:	ea83 0101 	eor.w	r1, r3, r1
 80a1626:	ea80 0202 	eor.w	r2, r0, r2
 80a162a:	ea81 0303 	eor.w	r3, r1, r3
 80a162e:	2d36      	cmp	r5, #54	; 0x36
 80a1630:	bf88      	it	hi
 80a1632:	bd30      	pophi	{r4, r5, pc}
 80a1634:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a163c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1640:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1644:	d002      	beq.n	80a164c <__adddf3+0x70>
 80a1646:	4240      	negs	r0, r0
 80a1648:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a164c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1654:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1658:	d002      	beq.n	80a1660 <__adddf3+0x84>
 80a165a:	4252      	negs	r2, r2
 80a165c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1660:	ea94 0f05 	teq	r4, r5
 80a1664:	f000 80a7 	beq.w	80a17b6 <__adddf3+0x1da>
 80a1668:	f1a4 0401 	sub.w	r4, r4, #1
 80a166c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1670:	db0d      	blt.n	80a168e <__adddf3+0xb2>
 80a1672:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1676:	fa22 f205 	lsr.w	r2, r2, r5
 80a167a:	1880      	adds	r0, r0, r2
 80a167c:	f141 0100 	adc.w	r1, r1, #0
 80a1680:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1684:	1880      	adds	r0, r0, r2
 80a1686:	fa43 f305 	asr.w	r3, r3, r5
 80a168a:	4159      	adcs	r1, r3
 80a168c:	e00e      	b.n	80a16ac <__adddf3+0xd0>
 80a168e:	f1a5 0520 	sub.w	r5, r5, #32
 80a1692:	f10e 0e20 	add.w	lr, lr, #32
 80a1696:	2a01      	cmp	r2, #1
 80a1698:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a169c:	bf28      	it	cs
 80a169e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a16a2:	fa43 f305 	asr.w	r3, r3, r5
 80a16a6:	18c0      	adds	r0, r0, r3
 80a16a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a16ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a16b0:	d507      	bpl.n	80a16c2 <__adddf3+0xe6>
 80a16b2:	f04f 0e00 	mov.w	lr, #0
 80a16b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a16ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a16be:	eb6e 0101 	sbc.w	r1, lr, r1
 80a16c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a16c6:	d31b      	bcc.n	80a1700 <__adddf3+0x124>
 80a16c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a16cc:	d30c      	bcc.n	80a16e8 <__adddf3+0x10c>
 80a16ce:	0849      	lsrs	r1, r1, #1
 80a16d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a16d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a16d8:	f104 0401 	add.w	r4, r4, #1
 80a16dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a16e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a16e4:	f080 809a 	bcs.w	80a181c <__adddf3+0x240>
 80a16e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a16ec:	bf08      	it	eq
 80a16ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a16f2:	f150 0000 	adcs.w	r0, r0, #0
 80a16f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a16fa:	ea41 0105 	orr.w	r1, r1, r5
 80a16fe:	bd30      	pop	{r4, r5, pc}
 80a1700:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1704:	4140      	adcs	r0, r0
 80a1706:	eb41 0101 	adc.w	r1, r1, r1
 80a170a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a170e:	f1a4 0401 	sub.w	r4, r4, #1
 80a1712:	d1e9      	bne.n	80a16e8 <__adddf3+0x10c>
 80a1714:	f091 0f00 	teq	r1, #0
 80a1718:	bf04      	itt	eq
 80a171a:	4601      	moveq	r1, r0
 80a171c:	2000      	moveq	r0, #0
 80a171e:	fab1 f381 	clz	r3, r1
 80a1722:	bf08      	it	eq
 80a1724:	3320      	addeq	r3, #32
 80a1726:	f1a3 030b 	sub.w	r3, r3, #11
 80a172a:	f1b3 0220 	subs.w	r2, r3, #32
 80a172e:	da0c      	bge.n	80a174a <__adddf3+0x16e>
 80a1730:	320c      	adds	r2, #12
 80a1732:	dd08      	ble.n	80a1746 <__adddf3+0x16a>
 80a1734:	f102 0c14 	add.w	ip, r2, #20
 80a1738:	f1c2 020c 	rsb	r2, r2, #12
 80a173c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1740:	fa21 f102 	lsr.w	r1, r1, r2
 80a1744:	e00c      	b.n	80a1760 <__adddf3+0x184>
 80a1746:	f102 0214 	add.w	r2, r2, #20
 80a174a:	bfd8      	it	le
 80a174c:	f1c2 0c20 	rsble	ip, r2, #32
 80a1750:	fa01 f102 	lsl.w	r1, r1, r2
 80a1754:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1758:	bfdc      	itt	le
 80a175a:	ea41 010c 	orrle.w	r1, r1, ip
 80a175e:	4090      	lslle	r0, r2
 80a1760:	1ae4      	subs	r4, r4, r3
 80a1762:	bfa2      	ittt	ge
 80a1764:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1768:	4329      	orrge	r1, r5
 80a176a:	bd30      	popge	{r4, r5, pc}
 80a176c:	ea6f 0404 	mvn.w	r4, r4
 80a1770:	3c1f      	subs	r4, #31
 80a1772:	da1c      	bge.n	80a17ae <__adddf3+0x1d2>
 80a1774:	340c      	adds	r4, #12
 80a1776:	dc0e      	bgt.n	80a1796 <__adddf3+0x1ba>
 80a1778:	f104 0414 	add.w	r4, r4, #20
 80a177c:	f1c4 0220 	rsb	r2, r4, #32
 80a1780:	fa20 f004 	lsr.w	r0, r0, r4
 80a1784:	fa01 f302 	lsl.w	r3, r1, r2
 80a1788:	ea40 0003 	orr.w	r0, r0, r3
 80a178c:	fa21 f304 	lsr.w	r3, r1, r4
 80a1790:	ea45 0103 	orr.w	r1, r5, r3
 80a1794:	bd30      	pop	{r4, r5, pc}
 80a1796:	f1c4 040c 	rsb	r4, r4, #12
 80a179a:	f1c4 0220 	rsb	r2, r4, #32
 80a179e:	fa20 f002 	lsr.w	r0, r0, r2
 80a17a2:	fa01 f304 	lsl.w	r3, r1, r4
 80a17a6:	ea40 0003 	orr.w	r0, r0, r3
 80a17aa:	4629      	mov	r1, r5
 80a17ac:	bd30      	pop	{r4, r5, pc}
 80a17ae:	fa21 f004 	lsr.w	r0, r1, r4
 80a17b2:	4629      	mov	r1, r5
 80a17b4:	bd30      	pop	{r4, r5, pc}
 80a17b6:	f094 0f00 	teq	r4, #0
 80a17ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a17be:	bf06      	itte	eq
 80a17c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a17c4:	3401      	addeq	r4, #1
 80a17c6:	3d01      	subne	r5, #1
 80a17c8:	e74e      	b.n	80a1668 <__adddf3+0x8c>
 80a17ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a17ce:	bf18      	it	ne
 80a17d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a17d4:	d029      	beq.n	80a182a <__adddf3+0x24e>
 80a17d6:	ea94 0f05 	teq	r4, r5
 80a17da:	bf08      	it	eq
 80a17dc:	ea90 0f02 	teqeq	r0, r2
 80a17e0:	d005      	beq.n	80a17ee <__adddf3+0x212>
 80a17e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a17e6:	bf04      	itt	eq
 80a17e8:	4619      	moveq	r1, r3
 80a17ea:	4610      	moveq	r0, r2
 80a17ec:	bd30      	pop	{r4, r5, pc}
 80a17ee:	ea91 0f03 	teq	r1, r3
 80a17f2:	bf1e      	ittt	ne
 80a17f4:	2100      	movne	r1, #0
 80a17f6:	2000      	movne	r0, #0
 80a17f8:	bd30      	popne	{r4, r5, pc}
 80a17fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a17fe:	d105      	bne.n	80a180c <__adddf3+0x230>
 80a1800:	0040      	lsls	r0, r0, #1
 80a1802:	4149      	adcs	r1, r1
 80a1804:	bf28      	it	cs
 80a1806:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a180a:	bd30      	pop	{r4, r5, pc}
 80a180c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1810:	bf3c      	itt	cc
 80a1812:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1816:	bd30      	popcc	{r4, r5, pc}
 80a1818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a181c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1824:	f04f 0000 	mov.w	r0, #0
 80a1828:	bd30      	pop	{r4, r5, pc}
 80a182a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a182e:	bf1a      	itte	ne
 80a1830:	4619      	movne	r1, r3
 80a1832:	4610      	movne	r0, r2
 80a1834:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1838:	bf1c      	itt	ne
 80a183a:	460b      	movne	r3, r1
 80a183c:	4602      	movne	r2, r0
 80a183e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1842:	bf06      	itte	eq
 80a1844:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1848:	ea91 0f03 	teqeq	r1, r3
 80a184c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1850:	bd30      	pop	{r4, r5, pc}
 80a1852:	bf00      	nop

080a1854 <__aeabi_ui2d>:
 80a1854:	f090 0f00 	teq	r0, #0
 80a1858:	bf04      	itt	eq
 80a185a:	2100      	moveq	r1, #0
 80a185c:	4770      	bxeq	lr
 80a185e:	b530      	push	{r4, r5, lr}
 80a1860:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1864:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1868:	f04f 0500 	mov.w	r5, #0
 80a186c:	f04f 0100 	mov.w	r1, #0
 80a1870:	e750      	b.n	80a1714 <__adddf3+0x138>
 80a1872:	bf00      	nop

080a1874 <__aeabi_i2d>:
 80a1874:	f090 0f00 	teq	r0, #0
 80a1878:	bf04      	itt	eq
 80a187a:	2100      	moveq	r1, #0
 80a187c:	4770      	bxeq	lr
 80a187e:	b530      	push	{r4, r5, lr}
 80a1880:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1884:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1888:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a188c:	bf48      	it	mi
 80a188e:	4240      	negmi	r0, r0
 80a1890:	f04f 0100 	mov.w	r1, #0
 80a1894:	e73e      	b.n	80a1714 <__adddf3+0x138>
 80a1896:	bf00      	nop

080a1898 <__aeabi_f2d>:
 80a1898:	0042      	lsls	r2, r0, #1
 80a189a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a189e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a18a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a18a6:	bf1f      	itttt	ne
 80a18a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a18ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a18b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a18b4:	4770      	bxne	lr
 80a18b6:	f092 0f00 	teq	r2, #0
 80a18ba:	bf14      	ite	ne
 80a18bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a18c0:	4770      	bxeq	lr
 80a18c2:	b530      	push	{r4, r5, lr}
 80a18c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a18c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a18cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a18d0:	e720      	b.n	80a1714 <__adddf3+0x138>
 80a18d2:	bf00      	nop

080a18d4 <__aeabi_ul2d>:
 80a18d4:	ea50 0201 	orrs.w	r2, r0, r1
 80a18d8:	bf08      	it	eq
 80a18da:	4770      	bxeq	lr
 80a18dc:	b530      	push	{r4, r5, lr}
 80a18de:	f04f 0500 	mov.w	r5, #0
 80a18e2:	e00a      	b.n	80a18fa <__aeabi_l2d+0x16>

080a18e4 <__aeabi_l2d>:
 80a18e4:	ea50 0201 	orrs.w	r2, r0, r1
 80a18e8:	bf08      	it	eq
 80a18ea:	4770      	bxeq	lr
 80a18ec:	b530      	push	{r4, r5, lr}
 80a18ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a18f2:	d502      	bpl.n	80a18fa <__aeabi_l2d+0x16>
 80a18f4:	4240      	negs	r0, r0
 80a18f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a18fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a18fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1902:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1906:	f43f aedc 	beq.w	80a16c2 <__adddf3+0xe6>
 80a190a:	f04f 0203 	mov.w	r2, #3
 80a190e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1912:	bf18      	it	ne
 80a1914:	3203      	addne	r2, #3
 80a1916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a191a:	bf18      	it	ne
 80a191c:	3203      	addne	r2, #3
 80a191e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1922:	f1c2 0320 	rsb	r3, r2, #32
 80a1926:	fa00 fc03 	lsl.w	ip, r0, r3
 80a192a:	fa20 f002 	lsr.w	r0, r0, r2
 80a192e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1932:	ea40 000e 	orr.w	r0, r0, lr
 80a1936:	fa21 f102 	lsr.w	r1, r1, r2
 80a193a:	4414      	add	r4, r2
 80a193c:	e6c1      	b.n	80a16c2 <__adddf3+0xe6>
 80a193e:	bf00      	nop

080a1940 <__aeabi_dmul>:
 80a1940:	b570      	push	{r4, r5, r6, lr}
 80a1942:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1946:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a194a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a194e:	bf1d      	ittte	ne
 80a1950:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1954:	ea94 0f0c 	teqne	r4, ip
 80a1958:	ea95 0f0c 	teqne	r5, ip
 80a195c:	f000 f8de 	bleq	80a1b1c <__aeabi_dmul+0x1dc>
 80a1960:	442c      	add	r4, r5
 80a1962:	ea81 0603 	eor.w	r6, r1, r3
 80a1966:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a196a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a196e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1972:	bf18      	it	ne
 80a1974:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a197c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1980:	d038      	beq.n	80a19f4 <__aeabi_dmul+0xb4>
 80a1982:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1986:	f04f 0500 	mov.w	r5, #0
 80a198a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a198e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1992:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1996:	f04f 0600 	mov.w	r6, #0
 80a199a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a199e:	f09c 0f00 	teq	ip, #0
 80a19a2:	bf18      	it	ne
 80a19a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a19a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a19ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a19b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a19b4:	d204      	bcs.n	80a19c0 <__aeabi_dmul+0x80>
 80a19b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a19ba:	416d      	adcs	r5, r5
 80a19bc:	eb46 0606 	adc.w	r6, r6, r6
 80a19c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a19c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a19c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a19cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a19d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a19d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a19d8:	bf88      	it	hi
 80a19da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a19de:	d81e      	bhi.n	80a1a1e <__aeabi_dmul+0xde>
 80a19e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a19e4:	bf08      	it	eq
 80a19e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a19ea:	f150 0000 	adcs.w	r0, r0, #0
 80a19ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a19f2:	bd70      	pop	{r4, r5, r6, pc}
 80a19f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a19f8:	ea46 0101 	orr.w	r1, r6, r1
 80a19fc:	ea40 0002 	orr.w	r0, r0, r2
 80a1a00:	ea81 0103 	eor.w	r1, r1, r3
 80a1a04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1a08:	bfc2      	ittt	gt
 80a1a0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1a0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1a12:	bd70      	popgt	{r4, r5, r6, pc}
 80a1a14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1a18:	f04f 0e00 	mov.w	lr, #0
 80a1a1c:	3c01      	subs	r4, #1
 80a1a1e:	f300 80ab 	bgt.w	80a1b78 <__aeabi_dmul+0x238>
 80a1a22:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1a26:	bfde      	ittt	le
 80a1a28:	2000      	movle	r0, #0
 80a1a2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1a2e:	bd70      	pople	{r4, r5, r6, pc}
 80a1a30:	f1c4 0400 	rsb	r4, r4, #0
 80a1a34:	3c20      	subs	r4, #32
 80a1a36:	da35      	bge.n	80a1aa4 <__aeabi_dmul+0x164>
 80a1a38:	340c      	adds	r4, #12
 80a1a3a:	dc1b      	bgt.n	80a1a74 <__aeabi_dmul+0x134>
 80a1a3c:	f104 0414 	add.w	r4, r4, #20
 80a1a40:	f1c4 0520 	rsb	r5, r4, #32
 80a1a44:	fa00 f305 	lsl.w	r3, r0, r5
 80a1a48:	fa20 f004 	lsr.w	r0, r0, r4
 80a1a4c:	fa01 f205 	lsl.w	r2, r1, r5
 80a1a50:	ea40 0002 	orr.w	r0, r0, r2
 80a1a54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1a58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1a5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1a60:	fa21 f604 	lsr.w	r6, r1, r4
 80a1a64:	eb42 0106 	adc.w	r1, r2, r6
 80a1a68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1a6c:	bf08      	it	eq
 80a1a6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1a72:	bd70      	pop	{r4, r5, r6, pc}
 80a1a74:	f1c4 040c 	rsb	r4, r4, #12
 80a1a78:	f1c4 0520 	rsb	r5, r4, #32
 80a1a7c:	fa00 f304 	lsl.w	r3, r0, r4
 80a1a80:	fa20 f005 	lsr.w	r0, r0, r5
 80a1a84:	fa01 f204 	lsl.w	r2, r1, r4
 80a1a88:	ea40 0002 	orr.w	r0, r0, r2
 80a1a8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1a90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1a94:	f141 0100 	adc.w	r1, r1, #0
 80a1a98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1a9c:	bf08      	it	eq
 80a1a9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1aa2:	bd70      	pop	{r4, r5, r6, pc}
 80a1aa4:	f1c4 0520 	rsb	r5, r4, #32
 80a1aa8:	fa00 f205 	lsl.w	r2, r0, r5
 80a1aac:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1ab0:	fa20 f304 	lsr.w	r3, r0, r4
 80a1ab4:	fa01 f205 	lsl.w	r2, r1, r5
 80a1ab8:	ea43 0302 	orr.w	r3, r3, r2
 80a1abc:	fa21 f004 	lsr.w	r0, r1, r4
 80a1ac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1ac4:	fa21 f204 	lsr.w	r2, r1, r4
 80a1ac8:	ea20 0002 	bic.w	r0, r0, r2
 80a1acc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1ad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1ad4:	bf08      	it	eq
 80a1ad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1ada:	bd70      	pop	{r4, r5, r6, pc}
 80a1adc:	f094 0f00 	teq	r4, #0
 80a1ae0:	d10f      	bne.n	80a1b02 <__aeabi_dmul+0x1c2>
 80a1ae2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1ae6:	0040      	lsls	r0, r0, #1
 80a1ae8:	eb41 0101 	adc.w	r1, r1, r1
 80a1aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1af0:	bf08      	it	eq
 80a1af2:	3c01      	subeq	r4, #1
 80a1af4:	d0f7      	beq.n	80a1ae6 <__aeabi_dmul+0x1a6>
 80a1af6:	ea41 0106 	orr.w	r1, r1, r6
 80a1afa:	f095 0f00 	teq	r5, #0
 80a1afe:	bf18      	it	ne
 80a1b00:	4770      	bxne	lr
 80a1b02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1b06:	0052      	lsls	r2, r2, #1
 80a1b08:	eb43 0303 	adc.w	r3, r3, r3
 80a1b0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1b10:	bf08      	it	eq
 80a1b12:	3d01      	subeq	r5, #1
 80a1b14:	d0f7      	beq.n	80a1b06 <__aeabi_dmul+0x1c6>
 80a1b16:	ea43 0306 	orr.w	r3, r3, r6
 80a1b1a:	4770      	bx	lr
 80a1b1c:	ea94 0f0c 	teq	r4, ip
 80a1b20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1b24:	bf18      	it	ne
 80a1b26:	ea95 0f0c 	teqne	r5, ip
 80a1b2a:	d00c      	beq.n	80a1b46 <__aeabi_dmul+0x206>
 80a1b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1b30:	bf18      	it	ne
 80a1b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1b36:	d1d1      	bne.n	80a1adc <__aeabi_dmul+0x19c>
 80a1b38:	ea81 0103 	eor.w	r1, r1, r3
 80a1b3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1b40:	f04f 0000 	mov.w	r0, #0
 80a1b44:	bd70      	pop	{r4, r5, r6, pc}
 80a1b46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1b4a:	bf06      	itte	eq
 80a1b4c:	4610      	moveq	r0, r2
 80a1b4e:	4619      	moveq	r1, r3
 80a1b50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1b54:	d019      	beq.n	80a1b8a <__aeabi_dmul+0x24a>
 80a1b56:	ea94 0f0c 	teq	r4, ip
 80a1b5a:	d102      	bne.n	80a1b62 <__aeabi_dmul+0x222>
 80a1b5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1b60:	d113      	bne.n	80a1b8a <__aeabi_dmul+0x24a>
 80a1b62:	ea95 0f0c 	teq	r5, ip
 80a1b66:	d105      	bne.n	80a1b74 <__aeabi_dmul+0x234>
 80a1b68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1b6c:	bf1c      	itt	ne
 80a1b6e:	4610      	movne	r0, r2
 80a1b70:	4619      	movne	r1, r3
 80a1b72:	d10a      	bne.n	80a1b8a <__aeabi_dmul+0x24a>
 80a1b74:	ea81 0103 	eor.w	r1, r1, r3
 80a1b78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1b7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1b80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1b84:	f04f 0000 	mov.w	r0, #0
 80a1b88:	bd70      	pop	{r4, r5, r6, pc}
 80a1b8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1b8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1b92:	bd70      	pop	{r4, r5, r6, pc}

080a1b94 <__aeabi_ddiv>:
 80a1b94:	b570      	push	{r4, r5, r6, lr}
 80a1b96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1b9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1b9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1ba2:	bf1d      	ittte	ne
 80a1ba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1ba8:	ea94 0f0c 	teqne	r4, ip
 80a1bac:	ea95 0f0c 	teqne	r5, ip
 80a1bb0:	f000 f8a7 	bleq	80a1d02 <__aeabi_ddiv+0x16e>
 80a1bb4:	eba4 0405 	sub.w	r4, r4, r5
 80a1bb8:	ea81 0e03 	eor.w	lr, r1, r3
 80a1bbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1bc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1bc4:	f000 8088 	beq.w	80a1cd8 <__aeabi_ddiv+0x144>
 80a1bc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1bcc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1bd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1bd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1bd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1bdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1be0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1be4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1be8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1bec:	429d      	cmp	r5, r3
 80a1bee:	bf08      	it	eq
 80a1bf0:	4296      	cmpeq	r6, r2
 80a1bf2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1bf6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1bfa:	d202      	bcs.n	80a1c02 <__aeabi_ddiv+0x6e>
 80a1bfc:	085b      	lsrs	r3, r3, #1
 80a1bfe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c02:	1ab6      	subs	r6, r6, r2
 80a1c04:	eb65 0503 	sbc.w	r5, r5, r3
 80a1c08:	085b      	lsrs	r3, r3, #1
 80a1c0a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a1c12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a1c16:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c1e:	bf22      	ittt	cs
 80a1c20:	1ab6      	subcs	r6, r6, r2
 80a1c22:	4675      	movcs	r5, lr
 80a1c24:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1c28:	085b      	lsrs	r3, r3, #1
 80a1c2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c2e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c32:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c36:	bf22      	ittt	cs
 80a1c38:	1ab6      	subcs	r6, r6, r2
 80a1c3a:	4675      	movcs	r5, lr
 80a1c3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1c40:	085b      	lsrs	r3, r3, #1
 80a1c42:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c46:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c4e:	bf22      	ittt	cs
 80a1c50:	1ab6      	subcs	r6, r6, r2
 80a1c52:	4675      	movcs	r5, lr
 80a1c54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1c58:	085b      	lsrs	r3, r3, #1
 80a1c5a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c5e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c62:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c66:	bf22      	ittt	cs
 80a1c68:	1ab6      	subcs	r6, r6, r2
 80a1c6a:	4675      	movcs	r5, lr
 80a1c6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1c70:	ea55 0e06 	orrs.w	lr, r5, r6
 80a1c74:	d018      	beq.n	80a1ca8 <__aeabi_ddiv+0x114>
 80a1c76:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a1c7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a1c7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a1c82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a1c86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a1c8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a1c8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a1c92:	d1c0      	bne.n	80a1c16 <__aeabi_ddiv+0x82>
 80a1c94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1c98:	d10b      	bne.n	80a1cb2 <__aeabi_ddiv+0x11e>
 80a1c9a:	ea41 0100 	orr.w	r1, r1, r0
 80a1c9e:	f04f 0000 	mov.w	r0, #0
 80a1ca2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a1ca6:	e7b6      	b.n	80a1c16 <__aeabi_ddiv+0x82>
 80a1ca8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1cac:	bf04      	itt	eq
 80a1cae:	4301      	orreq	r1, r0
 80a1cb0:	2000      	moveq	r0, #0
 80a1cb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1cb6:	bf88      	it	hi
 80a1cb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1cbc:	f63f aeaf 	bhi.w	80a1a1e <__aeabi_dmul+0xde>
 80a1cc0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1cc4:	bf04      	itt	eq
 80a1cc6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1cca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1cce:	f150 0000 	adcs.w	r0, r0, #0
 80a1cd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1cd6:	bd70      	pop	{r4, r5, r6, pc}
 80a1cd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1cdc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1ce0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1ce4:	bfc2      	ittt	gt
 80a1ce6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1cea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1cee:	bd70      	popgt	{r4, r5, r6, pc}
 80a1cf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1cf4:	f04f 0e00 	mov.w	lr, #0
 80a1cf8:	3c01      	subs	r4, #1
 80a1cfa:	e690      	b.n	80a1a1e <__aeabi_dmul+0xde>
 80a1cfc:	ea45 0e06 	orr.w	lr, r5, r6
 80a1d00:	e68d      	b.n	80a1a1e <__aeabi_dmul+0xde>
 80a1d02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1d06:	ea94 0f0c 	teq	r4, ip
 80a1d0a:	bf08      	it	eq
 80a1d0c:	ea95 0f0c 	teqeq	r5, ip
 80a1d10:	f43f af3b 	beq.w	80a1b8a <__aeabi_dmul+0x24a>
 80a1d14:	ea94 0f0c 	teq	r4, ip
 80a1d18:	d10a      	bne.n	80a1d30 <__aeabi_ddiv+0x19c>
 80a1d1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1d1e:	f47f af34 	bne.w	80a1b8a <__aeabi_dmul+0x24a>
 80a1d22:	ea95 0f0c 	teq	r5, ip
 80a1d26:	f47f af25 	bne.w	80a1b74 <__aeabi_dmul+0x234>
 80a1d2a:	4610      	mov	r0, r2
 80a1d2c:	4619      	mov	r1, r3
 80a1d2e:	e72c      	b.n	80a1b8a <__aeabi_dmul+0x24a>
 80a1d30:	ea95 0f0c 	teq	r5, ip
 80a1d34:	d106      	bne.n	80a1d44 <__aeabi_ddiv+0x1b0>
 80a1d36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1d3a:	f43f aefd 	beq.w	80a1b38 <__aeabi_dmul+0x1f8>
 80a1d3e:	4610      	mov	r0, r2
 80a1d40:	4619      	mov	r1, r3
 80a1d42:	e722      	b.n	80a1b8a <__aeabi_dmul+0x24a>
 80a1d44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1d48:	bf18      	it	ne
 80a1d4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1d4e:	f47f aec5 	bne.w	80a1adc <__aeabi_dmul+0x19c>
 80a1d52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a1d56:	f47f af0d 	bne.w	80a1b74 <__aeabi_dmul+0x234>
 80a1d5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a1d5e:	f47f aeeb 	bne.w	80a1b38 <__aeabi_dmul+0x1f8>
 80a1d62:	e712      	b.n	80a1b8a <__aeabi_dmul+0x24a>

080a1d64 <__gedf2>:
 80a1d64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a1d68:	e006      	b.n	80a1d78 <__cmpdf2+0x4>
 80a1d6a:	bf00      	nop

080a1d6c <__ledf2>:
 80a1d6c:	f04f 0c01 	mov.w	ip, #1
 80a1d70:	e002      	b.n	80a1d78 <__cmpdf2+0x4>
 80a1d72:	bf00      	nop

080a1d74 <__cmpdf2>:
 80a1d74:	f04f 0c01 	mov.w	ip, #1
 80a1d78:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a1d7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1d80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1d84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1d88:	bf18      	it	ne
 80a1d8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a1d8e:	d01b      	beq.n	80a1dc8 <__cmpdf2+0x54>
 80a1d90:	b001      	add	sp, #4
 80a1d92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a1d96:	bf0c      	ite	eq
 80a1d98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a1d9c:	ea91 0f03 	teqne	r1, r3
 80a1da0:	bf02      	ittt	eq
 80a1da2:	ea90 0f02 	teqeq	r0, r2
 80a1da6:	2000      	moveq	r0, #0
 80a1da8:	4770      	bxeq	lr
 80a1daa:	f110 0f00 	cmn.w	r0, #0
 80a1dae:	ea91 0f03 	teq	r1, r3
 80a1db2:	bf58      	it	pl
 80a1db4:	4299      	cmppl	r1, r3
 80a1db6:	bf08      	it	eq
 80a1db8:	4290      	cmpeq	r0, r2
 80a1dba:	bf2c      	ite	cs
 80a1dbc:	17d8      	asrcs	r0, r3, #31
 80a1dbe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a1dc2:	f040 0001 	orr.w	r0, r0, #1
 80a1dc6:	4770      	bx	lr
 80a1dc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1dcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1dd0:	d102      	bne.n	80a1dd8 <__cmpdf2+0x64>
 80a1dd2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1dd6:	d107      	bne.n	80a1de8 <__cmpdf2+0x74>
 80a1dd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1ddc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1de0:	d1d6      	bne.n	80a1d90 <__cmpdf2+0x1c>
 80a1de2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1de6:	d0d3      	beq.n	80a1d90 <__cmpdf2+0x1c>
 80a1de8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a1dec:	4770      	bx	lr
 80a1dee:	bf00      	nop

080a1df0 <__aeabi_cdrcmple>:
 80a1df0:	4684      	mov	ip, r0
 80a1df2:	4610      	mov	r0, r2
 80a1df4:	4662      	mov	r2, ip
 80a1df6:	468c      	mov	ip, r1
 80a1df8:	4619      	mov	r1, r3
 80a1dfa:	4663      	mov	r3, ip
 80a1dfc:	e000      	b.n	80a1e00 <__aeabi_cdcmpeq>
 80a1dfe:	bf00      	nop

080a1e00 <__aeabi_cdcmpeq>:
 80a1e00:	b501      	push	{r0, lr}
 80a1e02:	f7ff ffb7 	bl	80a1d74 <__cmpdf2>
 80a1e06:	2800      	cmp	r0, #0
 80a1e08:	bf48      	it	mi
 80a1e0a:	f110 0f00 	cmnmi.w	r0, #0
 80a1e0e:	bd01      	pop	{r0, pc}

080a1e10 <__aeabi_dcmpeq>:
 80a1e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e14:	f7ff fff4 	bl	80a1e00 <__aeabi_cdcmpeq>
 80a1e18:	bf0c      	ite	eq
 80a1e1a:	2001      	moveq	r0, #1
 80a1e1c:	2000      	movne	r0, #0
 80a1e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e22:	bf00      	nop

080a1e24 <__aeabi_dcmplt>:
 80a1e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e28:	f7ff ffea 	bl	80a1e00 <__aeabi_cdcmpeq>
 80a1e2c:	bf34      	ite	cc
 80a1e2e:	2001      	movcc	r0, #1
 80a1e30:	2000      	movcs	r0, #0
 80a1e32:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e36:	bf00      	nop

080a1e38 <__aeabi_dcmple>:
 80a1e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e3c:	f7ff ffe0 	bl	80a1e00 <__aeabi_cdcmpeq>
 80a1e40:	bf94      	ite	ls
 80a1e42:	2001      	movls	r0, #1
 80a1e44:	2000      	movhi	r0, #0
 80a1e46:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e4a:	bf00      	nop

080a1e4c <__aeabi_dcmpge>:
 80a1e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e50:	f7ff ffce 	bl	80a1df0 <__aeabi_cdrcmple>
 80a1e54:	bf94      	ite	ls
 80a1e56:	2001      	movls	r0, #1
 80a1e58:	2000      	movhi	r0, #0
 80a1e5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e5e:	bf00      	nop

080a1e60 <__aeabi_dcmpgt>:
 80a1e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e64:	f7ff ffc4 	bl	80a1df0 <__aeabi_cdrcmple>
 80a1e68:	bf34      	ite	cc
 80a1e6a:	2001      	movcc	r0, #1
 80a1e6c:	2000      	movcs	r0, #0
 80a1e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e72:	bf00      	nop

080a1e74 <__aeabi_dcmpun>:
 80a1e74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1e78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1e7c:	d102      	bne.n	80a1e84 <__aeabi_dcmpun+0x10>
 80a1e7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1e82:	d10a      	bne.n	80a1e9a <__aeabi_dcmpun+0x26>
 80a1e84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1e8c:	d102      	bne.n	80a1e94 <__aeabi_dcmpun+0x20>
 80a1e8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1e92:	d102      	bne.n	80a1e9a <__aeabi_dcmpun+0x26>
 80a1e94:	f04f 0000 	mov.w	r0, #0
 80a1e98:	4770      	bx	lr
 80a1e9a:	f04f 0001 	mov.w	r0, #1
 80a1e9e:	4770      	bx	lr

080a1ea0 <__aeabi_d2iz>:
 80a1ea0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1ea4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1ea8:	d215      	bcs.n	80a1ed6 <__aeabi_d2iz+0x36>
 80a1eaa:	d511      	bpl.n	80a1ed0 <__aeabi_d2iz+0x30>
 80a1eac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1eb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1eb4:	d912      	bls.n	80a1edc <__aeabi_d2iz+0x3c>
 80a1eb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1ebe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1ec2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1ec6:	fa23 f002 	lsr.w	r0, r3, r2
 80a1eca:	bf18      	it	ne
 80a1ecc:	4240      	negne	r0, r0
 80a1ece:	4770      	bx	lr
 80a1ed0:	f04f 0000 	mov.w	r0, #0
 80a1ed4:	4770      	bx	lr
 80a1ed6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1eda:	d105      	bne.n	80a1ee8 <__aeabi_d2iz+0x48>
 80a1edc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1ee0:	bf08      	it	eq
 80a1ee2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1ee6:	4770      	bx	lr
 80a1ee8:	f04f 0000 	mov.w	r0, #0
 80a1eec:	4770      	bx	lr
 80a1eee:	bf00      	nop

080a1ef0 <__aeabi_d2uiz>:
 80a1ef0:	004a      	lsls	r2, r1, #1
 80a1ef2:	d211      	bcs.n	80a1f18 <__aeabi_d2uiz+0x28>
 80a1ef4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1ef8:	d211      	bcs.n	80a1f1e <__aeabi_d2uiz+0x2e>
 80a1efa:	d50d      	bpl.n	80a1f18 <__aeabi_d2uiz+0x28>
 80a1efc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1f00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1f04:	d40e      	bmi.n	80a1f24 <__aeabi_d2uiz+0x34>
 80a1f06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1f0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1f0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1f12:	fa23 f002 	lsr.w	r0, r3, r2
 80a1f16:	4770      	bx	lr
 80a1f18:	f04f 0000 	mov.w	r0, #0
 80a1f1c:	4770      	bx	lr
 80a1f1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1f22:	d102      	bne.n	80a1f2a <__aeabi_d2uiz+0x3a>
 80a1f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1f28:	4770      	bx	lr
 80a1f2a:	f04f 0000 	mov.w	r0, #0
 80a1f2e:	4770      	bx	lr

080a1f30 <__aeabi_d2f>:
 80a1f30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1f34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a1f38:	bf24      	itt	cs
 80a1f3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a1f3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a1f42:	d90d      	bls.n	80a1f60 <__aeabi_d2f+0x30>
 80a1f44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1f48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a1f4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a1f50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a1f54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a1f58:	bf08      	it	eq
 80a1f5a:	f020 0001 	biceq.w	r0, r0, #1
 80a1f5e:	4770      	bx	lr
 80a1f60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a1f64:	d121      	bne.n	80a1faa <__aeabi_d2f+0x7a>
 80a1f66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a1f6a:	bfbc      	itt	lt
 80a1f6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a1f70:	4770      	bxlt	lr
 80a1f72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1f76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a1f7a:	f1c2 0218 	rsb	r2, r2, #24
 80a1f7e:	f1c2 0c20 	rsb	ip, r2, #32
 80a1f82:	fa10 f30c 	lsls.w	r3, r0, ip
 80a1f86:	fa20 f002 	lsr.w	r0, r0, r2
 80a1f8a:	bf18      	it	ne
 80a1f8c:	f040 0001 	orrne.w	r0, r0, #1
 80a1f90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1f94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a1f98:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a1f9c:	ea40 000c 	orr.w	r0, r0, ip
 80a1fa0:	fa23 f302 	lsr.w	r3, r3, r2
 80a1fa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a1fa8:	e7cc      	b.n	80a1f44 <__aeabi_d2f+0x14>
 80a1faa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a1fae:	d107      	bne.n	80a1fc0 <__aeabi_d2f+0x90>
 80a1fb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a1fb4:	bf1e      	ittt	ne
 80a1fb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a1fba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a1fbe:	4770      	bxne	lr
 80a1fc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a1fc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1fc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1fcc:	4770      	bx	lr
 80a1fce:	bf00      	nop

080a1fd0 <__aeabi_frsub>:
 80a1fd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a1fd4:	e002      	b.n	80a1fdc <__addsf3>
 80a1fd6:	bf00      	nop

080a1fd8 <__aeabi_fsub>:
 80a1fd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a1fdc <__addsf3>:
 80a1fdc:	0042      	lsls	r2, r0, #1
 80a1fde:	bf1f      	itttt	ne
 80a1fe0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a1fe4:	ea92 0f03 	teqne	r2, r3
 80a1fe8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a1fec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1ff0:	d06a      	beq.n	80a20c8 <__addsf3+0xec>
 80a1ff2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a1ff6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a1ffa:	bfc1      	itttt	gt
 80a1ffc:	18d2      	addgt	r2, r2, r3
 80a1ffe:	4041      	eorgt	r1, r0
 80a2000:	4048      	eorgt	r0, r1
 80a2002:	4041      	eorgt	r1, r0
 80a2004:	bfb8      	it	lt
 80a2006:	425b      	neglt	r3, r3
 80a2008:	2b19      	cmp	r3, #25
 80a200a:	bf88      	it	hi
 80a200c:	4770      	bxhi	lr
 80a200e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2016:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a201a:	bf18      	it	ne
 80a201c:	4240      	negne	r0, r0
 80a201e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2022:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2026:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a202a:	bf18      	it	ne
 80a202c:	4249      	negne	r1, r1
 80a202e:	ea92 0f03 	teq	r2, r3
 80a2032:	d03f      	beq.n	80a20b4 <__addsf3+0xd8>
 80a2034:	f1a2 0201 	sub.w	r2, r2, #1
 80a2038:	fa41 fc03 	asr.w	ip, r1, r3
 80a203c:	eb10 000c 	adds.w	r0, r0, ip
 80a2040:	f1c3 0320 	rsb	r3, r3, #32
 80a2044:	fa01 f103 	lsl.w	r1, r1, r3
 80a2048:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a204c:	d502      	bpl.n	80a2054 <__addsf3+0x78>
 80a204e:	4249      	negs	r1, r1
 80a2050:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2054:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2058:	d313      	bcc.n	80a2082 <__addsf3+0xa6>
 80a205a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a205e:	d306      	bcc.n	80a206e <__addsf3+0x92>
 80a2060:	0840      	lsrs	r0, r0, #1
 80a2062:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2066:	f102 0201 	add.w	r2, r2, #1
 80a206a:	2afe      	cmp	r2, #254	; 0xfe
 80a206c:	d251      	bcs.n	80a2112 <__addsf3+0x136>
 80a206e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2072:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2076:	bf08      	it	eq
 80a2078:	f020 0001 	biceq.w	r0, r0, #1
 80a207c:	ea40 0003 	orr.w	r0, r0, r3
 80a2080:	4770      	bx	lr
 80a2082:	0049      	lsls	r1, r1, #1
 80a2084:	eb40 0000 	adc.w	r0, r0, r0
 80a2088:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a208c:	f1a2 0201 	sub.w	r2, r2, #1
 80a2090:	d1ed      	bne.n	80a206e <__addsf3+0x92>
 80a2092:	fab0 fc80 	clz	ip, r0
 80a2096:	f1ac 0c08 	sub.w	ip, ip, #8
 80a209a:	ebb2 020c 	subs.w	r2, r2, ip
 80a209e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a20a2:	bfaa      	itet	ge
 80a20a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a20a8:	4252      	neglt	r2, r2
 80a20aa:	4318      	orrge	r0, r3
 80a20ac:	bfbc      	itt	lt
 80a20ae:	40d0      	lsrlt	r0, r2
 80a20b0:	4318      	orrlt	r0, r3
 80a20b2:	4770      	bx	lr
 80a20b4:	f092 0f00 	teq	r2, #0
 80a20b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a20bc:	bf06      	itte	eq
 80a20be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a20c2:	3201      	addeq	r2, #1
 80a20c4:	3b01      	subne	r3, #1
 80a20c6:	e7b5      	b.n	80a2034 <__addsf3+0x58>
 80a20c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a20cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a20d0:	bf18      	it	ne
 80a20d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a20d6:	d021      	beq.n	80a211c <__addsf3+0x140>
 80a20d8:	ea92 0f03 	teq	r2, r3
 80a20dc:	d004      	beq.n	80a20e8 <__addsf3+0x10c>
 80a20de:	f092 0f00 	teq	r2, #0
 80a20e2:	bf08      	it	eq
 80a20e4:	4608      	moveq	r0, r1
 80a20e6:	4770      	bx	lr
 80a20e8:	ea90 0f01 	teq	r0, r1
 80a20ec:	bf1c      	itt	ne
 80a20ee:	2000      	movne	r0, #0
 80a20f0:	4770      	bxne	lr
 80a20f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a20f6:	d104      	bne.n	80a2102 <__addsf3+0x126>
 80a20f8:	0040      	lsls	r0, r0, #1
 80a20fa:	bf28      	it	cs
 80a20fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2100:	4770      	bx	lr
 80a2102:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2106:	bf3c      	itt	cc
 80a2108:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a210c:	4770      	bxcc	lr
 80a210e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2112:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2116:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a211a:	4770      	bx	lr
 80a211c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2120:	bf16      	itet	ne
 80a2122:	4608      	movne	r0, r1
 80a2124:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2128:	4601      	movne	r1, r0
 80a212a:	0242      	lsls	r2, r0, #9
 80a212c:	bf06      	itte	eq
 80a212e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2132:	ea90 0f01 	teqeq	r0, r1
 80a2136:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a213a:	4770      	bx	lr

080a213c <__aeabi_ui2f>:
 80a213c:	f04f 0300 	mov.w	r3, #0
 80a2140:	e004      	b.n	80a214c <__aeabi_i2f+0x8>
 80a2142:	bf00      	nop

080a2144 <__aeabi_i2f>:
 80a2144:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2148:	bf48      	it	mi
 80a214a:	4240      	negmi	r0, r0
 80a214c:	ea5f 0c00 	movs.w	ip, r0
 80a2150:	bf08      	it	eq
 80a2152:	4770      	bxeq	lr
 80a2154:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2158:	4601      	mov	r1, r0
 80a215a:	f04f 0000 	mov.w	r0, #0
 80a215e:	e01c      	b.n	80a219a <__aeabi_l2f+0x2a>

080a2160 <__aeabi_ul2f>:
 80a2160:	ea50 0201 	orrs.w	r2, r0, r1
 80a2164:	bf08      	it	eq
 80a2166:	4770      	bxeq	lr
 80a2168:	f04f 0300 	mov.w	r3, #0
 80a216c:	e00a      	b.n	80a2184 <__aeabi_l2f+0x14>
 80a216e:	bf00      	nop

080a2170 <__aeabi_l2f>:
 80a2170:	ea50 0201 	orrs.w	r2, r0, r1
 80a2174:	bf08      	it	eq
 80a2176:	4770      	bxeq	lr
 80a2178:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a217c:	d502      	bpl.n	80a2184 <__aeabi_l2f+0x14>
 80a217e:	4240      	negs	r0, r0
 80a2180:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2184:	ea5f 0c01 	movs.w	ip, r1
 80a2188:	bf02      	ittt	eq
 80a218a:	4684      	moveq	ip, r0
 80a218c:	4601      	moveq	r1, r0
 80a218e:	2000      	moveq	r0, #0
 80a2190:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2194:	bf08      	it	eq
 80a2196:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a219a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a219e:	fabc f28c 	clz	r2, ip
 80a21a2:	3a08      	subs	r2, #8
 80a21a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a21a8:	db10      	blt.n	80a21cc <__aeabi_l2f+0x5c>
 80a21aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80a21ae:	4463      	add	r3, ip
 80a21b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a21b4:	f1c2 0220 	rsb	r2, r2, #32
 80a21b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a21bc:	fa20 f202 	lsr.w	r2, r0, r2
 80a21c0:	eb43 0002 	adc.w	r0, r3, r2
 80a21c4:	bf08      	it	eq
 80a21c6:	f020 0001 	biceq.w	r0, r0, #1
 80a21ca:	4770      	bx	lr
 80a21cc:	f102 0220 	add.w	r2, r2, #32
 80a21d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a21d4:	f1c2 0220 	rsb	r2, r2, #32
 80a21d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a21dc:	fa21 f202 	lsr.w	r2, r1, r2
 80a21e0:	eb43 0002 	adc.w	r0, r3, r2
 80a21e4:	bf08      	it	eq
 80a21e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a21ea:	4770      	bx	lr

080a21ec <__aeabi_fmul>:
 80a21ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a21f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a21f4:	bf1e      	ittt	ne
 80a21f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a21fa:	ea92 0f0c 	teqne	r2, ip
 80a21fe:	ea93 0f0c 	teqne	r3, ip
 80a2202:	d06f      	beq.n	80a22e4 <__aeabi_fmul+0xf8>
 80a2204:	441a      	add	r2, r3
 80a2206:	ea80 0c01 	eor.w	ip, r0, r1
 80a220a:	0240      	lsls	r0, r0, #9
 80a220c:	bf18      	it	ne
 80a220e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2212:	d01e      	beq.n	80a2252 <__aeabi_fmul+0x66>
 80a2214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2218:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a221c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2220:	fba0 3101 	umull	r3, r1, r0, r1
 80a2224:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2228:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a222c:	bf3e      	ittt	cc
 80a222e:	0049      	lslcc	r1, r1, #1
 80a2230:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2234:	005b      	lslcc	r3, r3, #1
 80a2236:	ea40 0001 	orr.w	r0, r0, r1
 80a223a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a223e:	2afd      	cmp	r2, #253	; 0xfd
 80a2240:	d81d      	bhi.n	80a227e <__aeabi_fmul+0x92>
 80a2242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2246:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a224a:	bf08      	it	eq
 80a224c:	f020 0001 	biceq.w	r0, r0, #1
 80a2250:	4770      	bx	lr
 80a2252:	f090 0f00 	teq	r0, #0
 80a2256:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a225a:	bf08      	it	eq
 80a225c:	0249      	lsleq	r1, r1, #9
 80a225e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2262:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2266:	3a7f      	subs	r2, #127	; 0x7f
 80a2268:	bfc2      	ittt	gt
 80a226a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a226e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2272:	4770      	bxgt	lr
 80a2274:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2278:	f04f 0300 	mov.w	r3, #0
 80a227c:	3a01      	subs	r2, #1
 80a227e:	dc5d      	bgt.n	80a233c <__aeabi_fmul+0x150>
 80a2280:	f112 0f19 	cmn.w	r2, #25
 80a2284:	bfdc      	itt	le
 80a2286:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a228a:	4770      	bxle	lr
 80a228c:	f1c2 0200 	rsb	r2, r2, #0
 80a2290:	0041      	lsls	r1, r0, #1
 80a2292:	fa21 f102 	lsr.w	r1, r1, r2
 80a2296:	f1c2 0220 	rsb	r2, r2, #32
 80a229a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a229e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a22a2:	f140 0000 	adc.w	r0, r0, #0
 80a22a6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a22aa:	bf08      	it	eq
 80a22ac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a22b0:	4770      	bx	lr
 80a22b2:	f092 0f00 	teq	r2, #0
 80a22b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a22ba:	bf02      	ittt	eq
 80a22bc:	0040      	lsleq	r0, r0, #1
 80a22be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a22c2:	3a01      	subeq	r2, #1
 80a22c4:	d0f9      	beq.n	80a22ba <__aeabi_fmul+0xce>
 80a22c6:	ea40 000c 	orr.w	r0, r0, ip
 80a22ca:	f093 0f00 	teq	r3, #0
 80a22ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a22d2:	bf02      	ittt	eq
 80a22d4:	0049      	lsleq	r1, r1, #1
 80a22d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a22da:	3b01      	subeq	r3, #1
 80a22dc:	d0f9      	beq.n	80a22d2 <__aeabi_fmul+0xe6>
 80a22de:	ea41 010c 	orr.w	r1, r1, ip
 80a22e2:	e78f      	b.n	80a2204 <__aeabi_fmul+0x18>
 80a22e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a22e8:	ea92 0f0c 	teq	r2, ip
 80a22ec:	bf18      	it	ne
 80a22ee:	ea93 0f0c 	teqne	r3, ip
 80a22f2:	d00a      	beq.n	80a230a <__aeabi_fmul+0x11e>
 80a22f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a22f8:	bf18      	it	ne
 80a22fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a22fe:	d1d8      	bne.n	80a22b2 <__aeabi_fmul+0xc6>
 80a2300:	ea80 0001 	eor.w	r0, r0, r1
 80a2304:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2308:	4770      	bx	lr
 80a230a:	f090 0f00 	teq	r0, #0
 80a230e:	bf17      	itett	ne
 80a2310:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2314:	4608      	moveq	r0, r1
 80a2316:	f091 0f00 	teqne	r1, #0
 80a231a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a231e:	d014      	beq.n	80a234a <__aeabi_fmul+0x15e>
 80a2320:	ea92 0f0c 	teq	r2, ip
 80a2324:	d101      	bne.n	80a232a <__aeabi_fmul+0x13e>
 80a2326:	0242      	lsls	r2, r0, #9
 80a2328:	d10f      	bne.n	80a234a <__aeabi_fmul+0x15e>
 80a232a:	ea93 0f0c 	teq	r3, ip
 80a232e:	d103      	bne.n	80a2338 <__aeabi_fmul+0x14c>
 80a2330:	024b      	lsls	r3, r1, #9
 80a2332:	bf18      	it	ne
 80a2334:	4608      	movne	r0, r1
 80a2336:	d108      	bne.n	80a234a <__aeabi_fmul+0x15e>
 80a2338:	ea80 0001 	eor.w	r0, r0, r1
 80a233c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2340:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2344:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2348:	4770      	bx	lr
 80a234a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a234e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2352:	4770      	bx	lr

080a2354 <__aeabi_fdiv>:
 80a2354:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2358:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a235c:	bf1e      	ittt	ne
 80a235e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2362:	ea92 0f0c 	teqne	r2, ip
 80a2366:	ea93 0f0c 	teqne	r3, ip
 80a236a:	d069      	beq.n	80a2440 <__aeabi_fdiv+0xec>
 80a236c:	eba2 0203 	sub.w	r2, r2, r3
 80a2370:	ea80 0c01 	eor.w	ip, r0, r1
 80a2374:	0249      	lsls	r1, r1, #9
 80a2376:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a237a:	d037      	beq.n	80a23ec <__aeabi_fdiv+0x98>
 80a237c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2380:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2384:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2388:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a238c:	428b      	cmp	r3, r1
 80a238e:	bf38      	it	cc
 80a2390:	005b      	lslcc	r3, r3, #1
 80a2392:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2396:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a239a:	428b      	cmp	r3, r1
 80a239c:	bf24      	itt	cs
 80a239e:	1a5b      	subcs	r3, r3, r1
 80a23a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a23a4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a23a8:	bf24      	itt	cs
 80a23aa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a23ae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a23b2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a23b6:	bf24      	itt	cs
 80a23b8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a23bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a23c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a23c4:	bf24      	itt	cs
 80a23c6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a23ca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a23ce:	011b      	lsls	r3, r3, #4
 80a23d0:	bf18      	it	ne
 80a23d2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a23d6:	d1e0      	bne.n	80a239a <__aeabi_fdiv+0x46>
 80a23d8:	2afd      	cmp	r2, #253	; 0xfd
 80a23da:	f63f af50 	bhi.w	80a227e <__aeabi_fmul+0x92>
 80a23de:	428b      	cmp	r3, r1
 80a23e0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a23e4:	bf08      	it	eq
 80a23e6:	f020 0001 	biceq.w	r0, r0, #1
 80a23ea:	4770      	bx	lr
 80a23ec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a23f0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a23f4:	327f      	adds	r2, #127	; 0x7f
 80a23f6:	bfc2      	ittt	gt
 80a23f8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a23fc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2400:	4770      	bxgt	lr
 80a2402:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2406:	f04f 0300 	mov.w	r3, #0
 80a240a:	3a01      	subs	r2, #1
 80a240c:	e737      	b.n	80a227e <__aeabi_fmul+0x92>
 80a240e:	f092 0f00 	teq	r2, #0
 80a2412:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2416:	bf02      	ittt	eq
 80a2418:	0040      	lsleq	r0, r0, #1
 80a241a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a241e:	3a01      	subeq	r2, #1
 80a2420:	d0f9      	beq.n	80a2416 <__aeabi_fdiv+0xc2>
 80a2422:	ea40 000c 	orr.w	r0, r0, ip
 80a2426:	f093 0f00 	teq	r3, #0
 80a242a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a242e:	bf02      	ittt	eq
 80a2430:	0049      	lsleq	r1, r1, #1
 80a2432:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2436:	3b01      	subeq	r3, #1
 80a2438:	d0f9      	beq.n	80a242e <__aeabi_fdiv+0xda>
 80a243a:	ea41 010c 	orr.w	r1, r1, ip
 80a243e:	e795      	b.n	80a236c <__aeabi_fdiv+0x18>
 80a2440:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2444:	ea92 0f0c 	teq	r2, ip
 80a2448:	d108      	bne.n	80a245c <__aeabi_fdiv+0x108>
 80a244a:	0242      	lsls	r2, r0, #9
 80a244c:	f47f af7d 	bne.w	80a234a <__aeabi_fmul+0x15e>
 80a2450:	ea93 0f0c 	teq	r3, ip
 80a2454:	f47f af70 	bne.w	80a2338 <__aeabi_fmul+0x14c>
 80a2458:	4608      	mov	r0, r1
 80a245a:	e776      	b.n	80a234a <__aeabi_fmul+0x15e>
 80a245c:	ea93 0f0c 	teq	r3, ip
 80a2460:	d104      	bne.n	80a246c <__aeabi_fdiv+0x118>
 80a2462:	024b      	lsls	r3, r1, #9
 80a2464:	f43f af4c 	beq.w	80a2300 <__aeabi_fmul+0x114>
 80a2468:	4608      	mov	r0, r1
 80a246a:	e76e      	b.n	80a234a <__aeabi_fmul+0x15e>
 80a246c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2470:	bf18      	it	ne
 80a2472:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2476:	d1ca      	bne.n	80a240e <__aeabi_fdiv+0xba>
 80a2478:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a247c:	f47f af5c 	bne.w	80a2338 <__aeabi_fmul+0x14c>
 80a2480:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2484:	f47f af3c 	bne.w	80a2300 <__aeabi_fmul+0x114>
 80a2488:	e75f      	b.n	80a234a <__aeabi_fmul+0x15e>
 80a248a:	bf00      	nop

080a248c <__cxa_atexit>:
 80a248c:	b510      	push	{r4, lr}
 80a248e:	4c05      	ldr	r4, [pc, #20]	; (80a24a4 <__cxa_atexit+0x18>)
 80a2490:	4613      	mov	r3, r2
 80a2492:	b12c      	cbz	r4, 80a24a0 <__cxa_atexit+0x14>
 80a2494:	460a      	mov	r2, r1
 80a2496:	4601      	mov	r1, r0
 80a2498:	2002      	movs	r0, #2
 80a249a:	f3af 8000 	nop.w
 80a249e:	bd10      	pop	{r4, pc}
 80a24a0:	4620      	mov	r0, r4
 80a24a2:	bd10      	pop	{r4, pc}
 80a24a4:	00000000 	.word	0x00000000

080a24a8 <memcpy>:
 80a24a8:	b510      	push	{r4, lr}
 80a24aa:	1e43      	subs	r3, r0, #1
 80a24ac:	440a      	add	r2, r1
 80a24ae:	4291      	cmp	r1, r2
 80a24b0:	d004      	beq.n	80a24bc <memcpy+0x14>
 80a24b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a24b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a24ba:	e7f8      	b.n	80a24ae <memcpy+0x6>
 80a24bc:	bd10      	pop	{r4, pc}

080a24be <memset>:
 80a24be:	4603      	mov	r3, r0
 80a24c0:	4402      	add	r2, r0
 80a24c2:	4293      	cmp	r3, r2
 80a24c4:	d002      	beq.n	80a24cc <memset+0xe>
 80a24c6:	f803 1b01 	strb.w	r1, [r3], #1
 80a24ca:	e7fa      	b.n	80a24c2 <memset+0x4>
 80a24cc:	4770      	bx	lr
	...

080a24d0 <srand>:
 80a24d0:	b538      	push	{r3, r4, r5, lr}
 80a24d2:	4b12      	ldr	r3, [pc, #72]	; (80a251c <srand+0x4c>)
 80a24d4:	4605      	mov	r5, r0
 80a24d6:	681c      	ldr	r4, [r3, #0]
 80a24d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a24da:	b9d3      	cbnz	r3, 80a2512 <srand+0x42>
 80a24dc:	2018      	movs	r0, #24
 80a24de:	f7fe f981 	bl	80a07e4 <malloc>
 80a24e2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a24e6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a24e8:	8003      	strh	r3, [r0, #0]
 80a24ea:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a24ee:	8043      	strh	r3, [r0, #2]
 80a24f0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a24f4:	8083      	strh	r3, [r0, #4]
 80a24f6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a24fa:	80c3      	strh	r3, [r0, #6]
 80a24fc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2500:	8103      	strh	r3, [r0, #8]
 80a2502:	2305      	movs	r3, #5
 80a2504:	8143      	strh	r3, [r0, #10]
 80a2506:	230b      	movs	r3, #11
 80a2508:	8183      	strh	r3, [r0, #12]
 80a250a:	2201      	movs	r2, #1
 80a250c:	2300      	movs	r3, #0
 80a250e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2512:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2514:	2200      	movs	r2, #0
 80a2516:	611d      	str	r5, [r3, #16]
 80a2518:	615a      	str	r2, [r3, #20]
 80a251a:	bd38      	pop	{r3, r4, r5, pc}
 80a251c:	20000064 	.word	0x20000064

080a2520 <strlen>:
 80a2520:	4603      	mov	r3, r0
 80a2522:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2526:	2a00      	cmp	r2, #0
 80a2528:	d1fb      	bne.n	80a2522 <strlen+0x2>
 80a252a:	1a18      	subs	r0, r3, r0
 80a252c:	3801      	subs	r0, #1
 80a252e:	4770      	bx	lr

080a2530 <dynalib_user>:
 80a2530:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a2540:	0000 0000 7543 7272 6e65 2074 203d 4c00     ....Current = .L
 80a2550:	6e69 2065 7246 7165 6575 636e 2079 203d     ine Frequency = 
 80a2560:	4100 616e 6f6c 2067 6e49 7570 2074 6f56     .Analog Input Vo
 80a2570:	746c 6761 2065 203d 5000 776f 7265 4620     ltage = .Power F
 80a2580:	6361 6f74 2072 203d 4100 7463 7669 2065     actor = .Active 
 80a2590:	6f50 6577 2072 203d 5200 6165 7463 7669     Power = .Reactiv
 80a25a0:	2065 6f50 6577 2072 203d 4100 7070 7261     e Power = .Appar
 80a25b0:	6e65 2074 6f50 6577 2072 203d 4900 4332     ent Power = .I2C
 80a25c0:	6220 7375 5320 6174 7574 2073 7553 6363      bus Status Succ
 80a25d0:	7365 3a73 003a 7542 7973 7420 6d69 6f65     ess::.Busy timeo
 80a25e0:	7475 7520 6f70 206e 6e65 6574 6972 676e     ut upon entering
 80a25f0:	6520 646e 7254 6e61 6d73 7369 6973 6e6f      endTransmission
 80a2600:	2928 3a3a 5300 6174 7472 6220 7469 6720     ()::.Start bit g
 80a2610:	6e65 7265 7461 6f69 206e 6974 656d 756f     eneration timeou
 80a2620:	3a74 003a 6e65 2064 666f 6120 6464 6572     t::.end of addre
 80a2630:	7373 7420 6172 736e 696d 7373 6f69 206e     ss transmission 
 80a2640:	6974 656d 756f 3a74 003a 6144 6174 6220     timeout::.Data b
 80a2650:	7479 2065 7274 6e61 6673 7265 7420 6d69     yte transfer tim
 80a2660:	6f65 7475 3a3a 4400 7461 2061 7962 6574     eout::.Data byte
 80a2670:	7420 6172 736e 6566 2072 7573 6363 6565      transfer succee
 80a2680:	6564 2c64 6220 7375 2079 6974 656d 756f     ded, busy timeou
 80a2690:	2074 6d69 656d 6964 7461 6c65 2079 6661     t immediately af
 80a26a0:	6574 3a72 003a 6843 6365 736b 6d75 3d20     ter::.Checksum =
 80a26b0:	0020 6572 7674 6c61 3d20 0020                .retval = .

080a26bc <_ZTV7TwoWire>:
	...
 80a26c4:	081d 080a 0867 080a 083f 080a 081f 080a     ....g...?.......
 80a26d4:	0847 080a 084f 080a 0857 080a 085f 080a     G...O...W..._...

080a26e4 <_ZTV9IPAddress>:
	...
 80a26ec:	092d 080a 091d 080a 091f 080a 6162 6475     -...........baud
 80a26fc:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a270c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a271c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a272c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a273c:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a274c:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a275c:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a276c:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a277c:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a278c:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a279c:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a27ac:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a27bc:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a27cc:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a27dc <_ZTVN5spark12NetworkClassE>:
	...
 80a27e4:	09f5 080a 09ff 080a 0a09 080a 0a13 080a     ................
 80a27f4:	0a1d 080a 0a29 080a 0a35 080a 0a41 080a     ....)...5...A...
 80a2804:	0a49 080a 0a53 080a 0a5d 080a 616e 006e     I...S...]...nan.
 80a2814:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
 80a2824:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a2834:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a2844:	656d 0000                                   me..

080a2848 <_ZTV11USARTSerial>:
	...
 80a2850:	0db5 080a 0e05 080a 0e13 080a 0ac1 080a     ................
 80a2860:	0dc9 080a 0deb 080a 0dd7 080a 0dff 080a     ................
 80a2870:	0db7 080a 0dbb 080a                         ........

080a2878 <_ZTV9USBSerial>:
	...
 80a2880:	0eb5 080a 0f05 080a 0f13 080a 0ac1 080a     ................
 80a2890:	0ef1 080a 0eb7 080a 0ecd 080a 0eff 080a     ................
 80a28a0:	0ee3 080a 0eb1 080a                         ........

080a28a8 <_ZTVN5spark9WiFiClassE>:
	...
 80a28b0:	10f7 080a 10ed 080a 10e3 080a 1055 080a     ............U...
 80a28c0:	10d7 080a 10cb 080a 10bf 080a 10b7 080a     ................
 80a28d0:	10ad 080a 10a3 080a 105f 080a               ........_...

080a28dc <_ZSt7nothrow>:
 80a28dc:	0000 0000                                   ....

080a28e0 <__sf_fake_stdin>:
	...

080a2900 <__sf_fake_stdout>:
	...

080a2920 <__sf_fake_stderr>:
	...
 80a2940:	0043                                        C.

080a2942 <link_const_variable_data_end>:
	...

080a2944 <link_constructors_location>:
 80a2944:	080a0521 	.word	0x080a0521
 80a2948:	080a09e5 	.word	0x080a09e5
 80a294c:	080a0aad 	.word	0x080a0aad
 80a2950:	080a0d31 	.word	0x080a0d31
 80a2954:	080a0d6d 	.word	0x080a0d6d
 80a2958:	080a0da1 	.word	0x080a0da1
 80a295c:	080a1101 	.word	0x080a1101
 80a2960:	080a12cd 	.word	0x080a12cd
 80a2964:	080a1341 	.word	0x080a1341
 80a2968:	080a1405 	.word	0x080a1405
 80a296c:	080a1489 	.word	0x080a1489
 80a2970:	080a150d 	.word	0x080a150d

080a2974 <link_constructors_end>:
	...
