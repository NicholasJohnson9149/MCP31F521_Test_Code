
/Users/nicholas/Documents/Particle/I2C-MCP32F521/target/1.5.2/argon/I2C-MCP32F521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001864  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5880  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e338  000d5884  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000044c  2003e3a4  2003e3a4  0002e3a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d58f0  000d58f0  000258f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5918  000d5918  00025918  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c40c0  00000000  00000000  0002591c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e6df  00000000  00000000  000e99dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a886  00000000  00000000  000f80bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002030  00000000  00000000  00112941  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003f80  00000000  00000000  00114971  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000315f6  00000000  00000000  001188f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021b3a  00000000  00000000  00149ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001069fd  00000000  00000000  0016ba21  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000beb8  00000000  00000000  00272420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 f9cf 	bl	d53d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 f9d4 	bl	d53e6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e338 	.word	0x2003e338
   d4048:	000d5884 	.word	0x000d5884
   d404c:	2003e3a4 	.word	0x2003e3a4
   d4050:	2003e3a4 	.word	0x2003e3a4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 ffd5 	bl	d5008 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5874 	.word	0x000d5874
   d4080:	000d583c 	.word	0x000d583c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b814 	b.w	d40b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f87d 	bl	d4188 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bf7b 	b.w	d4f8c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bab9 	b.w	d460c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bab7 	b.w	d460c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:
uint8_t byteArray[32];
uint32_t checksumTotal = 0;
uint8_t i2c_bus_Status = 0;
int i;

void setup() {
   d40b0:	b508      	push	{r3, lr}
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d40b2:	480e      	ldr	r0, [pc, #56]	; (d40ec <setup+0x3c>)
   d40b4:	2300      	movs	r3, #0
   d40b6:	4619      	mov	r1, r3
   d40b8:	461a      	mov	r2, r3
   d40ba:	6840      	ldr	r0, [r0, #4]
   d40bc:	f000 fa76 	bl	d45ac <network_off>
    WiFi.off();
    Serial.begin(115200);
   d40c0:	f000 fee2 	bl	d4e88 <_Z16_fetch_usbserialv>
   d40c4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d40c8:	f000 fed2 	bl	d4e70 <_ZN9USBSerial5beginEl>
    Wire.setSpeed(CLOCK_SPEED_100KHZ);
   d40cc:	f000 ffe2 	bl	d5094 <_Z19__fetch_global_Wirev>
   d40d0:	4907      	ldr	r1, [pc, #28]	; (d40f0 <setup+0x40>)
   d40d2:	f000 fb49 	bl	d4768 <_ZN7TwoWire8setSpeedEm>
    Wire.stretchClock(true);
   d40d6:	f000 ffdd 	bl	d5094 <_Z19__fetch_global_Wirev>
   d40da:	2101      	movs	r1, #1
   d40dc:	f000 fb48 	bl	d4770 <_ZN7TwoWire12stretchClockEb>
    Wire.begin();
   d40e0:	f000 ffd8 	bl	d5094 <_Z19__fetch_global_Wirev>
}
   d40e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {
    WiFi.off();
    Serial.begin(115200);
    Wire.setSpeed(CLOCK_SPEED_100KHZ);
    Wire.stretchClock(true);
    Wire.begin();
   d40e8:	f000 bb46 	b.w	d4778 <_ZN7TwoWire5beginEv>
   d40ec:	2003e720 	.word	0x2003e720
   d40f0:	000186a0 	.word	0x000186a0

000d40f4 <_ZN5Print7printlnIhLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d40f4:	b538      	push	{r3, r4, r5, lr}
   d40f6:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d40f8:	b91a      	cbnz	r2, d4102 <_ZN5Print7printlnIhLi0EEEjT_i+0xe>
        return write(n);
   d40fa:	6803      	ldr	r3, [r0, #0]
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4798      	blx	r3
   d4100:	e002      	b.n	d4108 <_ZN5Print7printlnIhLi0EEEjT_i+0x14>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4102:	b2d2      	uxtb	r2, r2
   d4104:	f000 fd77 	bl	d4bf6 <_ZN5Print11printNumberEmh>
   d4108:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d410a:	4628      	mov	r0, r5
   d410c:	f000 fd67 	bl	d4bde <_ZN5Print7printlnEv>
        return n;
    }
   d4110:	4420      	add	r0, r4
   d4112:	bd38      	pop	{r3, r4, r5, pc}

000d4114 <_Z10wireErrorsh>:
	float activePower;
	float reactivePower;
	float apparentPower;
} UMCP39F521_FormattedData;

void wireErrors(uint8_t i2c_bus_Status){
   d4114:	b510      	push	{r4, lr}
  if(i2c_bus_Status == 0){
   d4116:	4604      	mov	r4, r0
   d4118:	b918      	cbnz	r0, d4122 <_Z10wireErrorsh+0xe>
    Serial.print("success = "); Serial.println(i2c_bus_Status);
   d411a:	f000 feb5 	bl	d4e88 <_Z16_fetch_usbserialv>
   d411e:	4914      	ldr	r1, [pc, #80]	; (d4170 <_Z10wireErrorsh+0x5c>)
   d4120:	e01c      	b.n	d415c <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 1){
   d4122:	2801      	cmp	r0, #1
   d4124:	d103      	bne.n	d412e <_Z10wireErrorsh+0x1a>
    Serial.print("Busy timeout upon entering endTransmission() = "); Serial.println(i2c_bus_Status);
   d4126:	f000 feaf 	bl	d4e88 <_Z16_fetch_usbserialv>
   d412a:	4912      	ldr	r1, [pc, #72]	; (d4174 <_Z10wireErrorsh+0x60>)
   d412c:	e016      	b.n	d415c <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 2){
   d412e:	2802      	cmp	r0, #2
   d4130:	d103      	bne.n	d413a <_Z10wireErrorsh+0x26>
    Serial.print("START bit generation timeout = "); Serial.println(i2c_bus_Status);
   d4132:	f000 fea9 	bl	d4e88 <_Z16_fetch_usbserialv>
   d4136:	4910      	ldr	r1, [pc, #64]	; (d4178 <_Z10wireErrorsh+0x64>)
   d4138:	e010      	b.n	d415c <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 3){
   d413a:	2803      	cmp	r0, #3
   d413c:	d103      	bne.n	d4146 <_Z10wireErrorsh+0x32>
    Serial.print("end of address transmission timeout = "); Serial.println(i2c_bus_Status);
   d413e:	f000 fea3 	bl	d4e88 <_Z16_fetch_usbserialv>
   d4142:	490e      	ldr	r1, [pc, #56]	; (d417c <_Z10wireErrorsh+0x68>)
   d4144:	e00a      	b.n	d415c <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 4){
   d4146:	2804      	cmp	r0, #4
   d4148:	d103      	bne.n	d4152 <_Z10wireErrorsh+0x3e>
    Serial.print("Data byte transfer timeout = "); Serial.println(i2c_bus_Status);
   d414a:	f000 fe9d 	bl	d4e88 <_Z16_fetch_usbserialv>
   d414e:	490c      	ldr	r1, [pc, #48]	; (d4180 <_Z10wireErrorsh+0x6c>)
   d4150:	e004      	b.n	d415c <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 5){
   d4152:	2805      	cmp	r0, #5
   d4154:	d10a      	bne.n	d416c <_Z10wireErrorsh+0x58>
    Serial.print("Data byte transfer succeeded, busy timeout immediately after = "); Serial.println(i2c_bus_Status);
   d4156:	f000 fe97 	bl	d4e88 <_Z16_fetch_usbserialv>
   d415a:	490a      	ldr	r1, [pc, #40]	; (d4184 <_Z10wireErrorsh+0x70>)
   d415c:	f000 fd38 	bl	d4bd0 <_ZN5Print5printEPKc>
   d4160:	f000 fe92 	bl	d4e88 <_Z16_fetch_usbserialv>
   d4164:	220a      	movs	r2, #10
   d4166:	4621      	mov	r1, r4
   d4168:	f7ff ffc4 	bl	d40f4 <_ZN5Print7printlnIhLi0EEEjT_i>
   d416c:	bd10      	pop	{r4, pc}
   d416e:	bf00      	nop
   d4170:	000d546c 	.word	0x000d546c
   d4174:	000d5477 	.word	0x000d5477
   d4178:	000d54a7 	.word	0x000d54a7
   d417c:	000d54c7 	.word	0x000d54c7
   d4180:	000d54ee 	.word	0x000d54ee
   d4184:	000d550c 	.word	0x000d550c

000d4188 <loop>:
    Wire.stretchClock(true);
    Wire.begin();
}

void loop() 
{ 
   d4188:	b5f0      	push	{r4, r5, r6, r7, lr}
  ReadDataBuf[0] = 0xA5; // Header
   d418a:	4b41      	ldr	r3, [pc, #260]	; (d4290 <loop+0x108>)
   d418c:	4841      	ldr	r0, [pc, #260]	; (d4294 <loop+0x10c>)
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
   d418e:	2102      	movs	r1, #2
    Wire.begin();
}

void loop() 
{ 
  ReadDataBuf[0] = 0xA5; // Header
   d4190:	22a5      	movs	r2, #165	; 0xa5
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
   d4192:	7119      	strb	r1, [r3, #4]
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
   d4194:	214e      	movs	r1, #78	; 0x4e
    Wire.begin();
}

void loop() 
{ 
  ReadDataBuf[0] = 0xA5; // Header
   d4196:	701a      	strb	r2, [r3, #0]
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
   d4198:	7159      	strb	r1, [r3, #5]
}

void loop() 
{ 
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
   d419a:	2208      	movs	r2, #8
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
   d419c:	2120      	movs	r1, #32
}

void loop() 
{ 
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
   d419e:	705a      	strb	r2, [r3, #1]
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
   d41a0:	7199      	strb	r1, [r3, #6]

void loop() 
{ 
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
   d41a2:	2241      	movs	r2, #65	; 0x41
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
   d41a4:	215e      	movs	r1, #94	; 0x5e

void loop() 
{ 
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
   d41a6:	709a      	strb	r2, [r3, #2]
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
   d41a8:	71d9      	strb	r1, [r3, #7]
void loop() 
{ 
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
   d41aa:	2200      	movs	r2, #0
   d41ac:	6801      	ldr	r1, [r0, #0]
   d41ae:	70da      	strb	r2, [r3, #3]
    Wire.stretchClock(true);
    Wire.begin();
}

void loop() 
{ 
   d41b0:	b085      	sub	sp, #20
   d41b2:	461c      	mov	r4, r3
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
    checksumTotal += ReadDataBuf[i];
   d41b4:	5ca3      	ldrb	r3, [r4, r2]
   d41b6:	4e36      	ldr	r6, [pc, #216]	; (d4290 <loop+0x108>)
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
   d41b8:	3201      	adds	r2, #1
   d41ba:	2a07      	cmp	r2, #7
    checksumTotal += ReadDataBuf[i];
   d41bc:	4419      	add	r1, r3
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
   d41be:	d1f9      	bne.n	d41b4 <loop+0x2c>
   d41c0:	4d35      	ldr	r5, [pc, #212]	; (d4298 <loop+0x110>)
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
   d41c2:	71f1      	strb	r1, [r6, #7]
   d41c4:	602a      	str	r2, [r5, #0]
   d41c6:	6001      	str	r1, [r0, #0]
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7]);
  Wire.beginTransmission(I2C_ADDRESS);
   d41c8:	4f34      	ldr	r7, [pc, #208]	; (d429c <loop+0x114>)
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7]);
   d41ca:	f000 fe5d 	bl	d4e88 <_Z16_fetch_usbserialv>
   d41ce:	4934      	ldr	r1, [pc, #208]	; (d42a0 <loop+0x118>)
   d41d0:	f000 fcfe 	bl	d4bd0 <_ZN5Print5printEPKc>
   d41d4:	f000 fe58 	bl	d4e88 <_Z16_fetch_usbserialv>
   d41d8:	79f1      	ldrb	r1, [r6, #7]
   d41da:	220a      	movs	r2, #10
   d41dc:	f7ff ff8a 	bl	d40f4 <_ZN5Print7printlnIhLi0EEEjT_i>
  Wire.beginTransmission(I2C_ADDRESS);
   d41e0:	f000 ff58 	bl	d5094 <_Z19__fetch_global_Wirev>
   d41e4:	7839      	ldrb	r1, [r7, #0]
   d41e6:	f000 fae9 	bl	d47bc <_ZN7TwoWire17beginTransmissionEh>
  for(i= 0; i < 8; i++) {
   d41ea:	2300      	movs	r3, #0
   d41ec:	602b      	str	r3, [r5, #0]
   d41ee:	462e      	mov	r6, r5
   d41f0:	6833      	ldr	r3, [r6, #0]
   d41f2:	2b07      	cmp	r3, #7
   d41f4:	dc0a      	bgt.n	d420c <loop+0x84>
    Wire.write(ReadDataBuf[i]);
   d41f6:	f000 ff4d 	bl	d5094 <_Z19__fetch_global_Wirev>
   d41fa:	682a      	ldr	r2, [r5, #0]
   d41fc:	6803      	ldr	r3, [r0, #0]
   d41fe:	5ca1      	ldrb	r1, [r4, r2]
   d4200:	689b      	ldr	r3, [r3, #8]
   d4202:	4798      	blx	r3
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7]);
  Wire.beginTransmission(I2C_ADDRESS);
  for(i= 0; i < 8; i++) {
   d4204:	682b      	ldr	r3, [r5, #0]
   d4206:	3301      	adds	r3, #1
   d4208:	602b      	str	r3, [r5, #0]
   d420a:	e7f1      	b.n	d41f0 <loop+0x68>
    Wire.write(ReadDataBuf[i]);
  }
  i2c_bus_Status = Wire.endTransmission(true);
   d420c:	f000 ff42 	bl	d5094 <_Z19__fetch_global_Wirev>
   d4210:	2101      	movs	r1, #1
   d4212:	f000 fad7 	bl	d47c4 <_ZN7TwoWire15endTransmissionEh>
   d4216:	4b23      	ldr	r3, [pc, #140]	; (d42a4 <loop+0x11c>)
   d4218:	7018      	strb	r0, [r3, #0]
  wireErrors(i2c_bus_Status);
   d421a:	f7ff ff7b 	bl	d4114 <_Z10wireErrorsh>
  delay(30);
   d421e:	201e      	movs	r0, #30
   d4220:	f000 f9fc 	bl	d461c <delay>
  size_t bytes_read = Wire.requestFrom(WireTransmission(I2C_ADDRESS).quantity(I2C_BUFFER_SIZE).timeout(100ms));
   d4224:	f000 ff36 	bl	d5094 <_Z19__fetch_global_Wirev>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4228:	783b      	ldrb	r3, [r7, #0]
   d422a:	f88d 3000 	strb.w	r3, [sp]
   d422e:	2301      	movs	r3, #1
   d4230:	f88d 3008 	strb.w	r3, [sp, #8]
   d4234:	2364      	movs	r3, #100	; 0x64
   d4236:	9303      	str	r3, [sp, #12]
   d4238:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d423a:	231f      	movs	r3, #31
   d423c:	9301      	str	r3, [sp, #4]
   d423e:	f000 faa1 	bl	d4784 <_ZN7TwoWire11requestFromERK16WireTransmission>
  //uint8_t baseline[I2C_BUFFER_SIZE];
  if ( bytes_read == I2C_BUFFER_SIZE ) {
   d4242:	281f      	cmp	r0, #31
   d4244:	d118      	bne.n	d4278 <loop+0xf0>
    uint8_t index = 0;
    while( Wire.available() ) {
      // Sock away the data
      byteArray[index++] = Wire.read();
   d4246:	4e18      	ldr	r6, [pc, #96]	; (d42a8 <loop+0x120>)
   d4248:	2400      	movs	r4, #0
  delay(30);
  size_t bytes_read = Wire.requestFrom(WireTransmission(I2C_ADDRESS).quantity(I2C_BUFFER_SIZE).timeout(100ms));
  //uint8_t baseline[I2C_BUFFER_SIZE];
  if ( bytes_read == I2C_BUFFER_SIZE ) {
    uint8_t index = 0;
    while( Wire.available() ) {
   d424a:	f000 ff23 	bl	d5094 <_Z19__fetch_global_Wirev>
   d424e:	6803      	ldr	r3, [r0, #0]
   d4250:	691b      	ldr	r3, [r3, #16]
   d4252:	4798      	blx	r3
   d4254:	1c65      	adds	r5, r4, #1
   d4256:	b178      	cbz	r0, d4278 <loop+0xf0>
      // Sock away the data
      byteArray[index++] = Wire.read();
   d4258:	f000 ff1c 	bl	d5094 <_Z19__fetch_global_Wirev>
   d425c:	6803      	ldr	r3, [r0, #0]
   d425e:	695b      	ldr	r3, [r3, #20]
   d4260:	4798      	blx	r3
   d4262:	b2e4      	uxtb	r4, r4
   d4264:	5530      	strb	r0, [r6, r4]
      Serial.print(byteArray[index]);
   d4266:	f000 fe0f 	bl	d4e88 <_Z16_fetch_usbserialv>
   d426a:	b2eb      	uxtb	r3, r5
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d426c:	220a      	movs	r2, #10
   d426e:	5cf1      	ldrb	r1, [r6, r3]
   d4270:	f000 fcc1 	bl	d4bf6 <_ZN5Print11printNumberEmh>
   d4274:	462c      	mov	r4, r5
   d4276:	e7e8      	b.n	d424a <loop+0xc2>
    }
  }
  Serial.print("\n");
   d4278:	f000 fe06 	bl	d4e88 <_Z16_fetch_usbserialv>
   d427c:	490b      	ldr	r1, [pc, #44]	; (d42ac <loop+0x124>)
   d427e:	f000 fca7 	bl	d4bd0 <_ZN5Print5printEPKc>
  delay(1000);
   d4282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4286:	f000 f9c9 	bl	d461c <delay>
   d428a:	b005      	add	sp, #20
   d428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d428e:	bf00      	nop
   d4290:	2003e3d0 	.word	0x2003e3d0
   d4294:	2003e3ac 	.word	0x2003e3ac
   d4298:	2003e3a8 	.word	0x2003e3a8
   d429c:	2003e338 	.word	0x2003e338
   d42a0:	000d554c 	.word	0x000d554c
   d42a4:	2003e3d8 	.word	0x2003e3d8
   d42a8:	2003e3b0 	.word	0x2003e3b0
   d42ac:	000d566e 	.word	0x000d566e

000d42b0 <_GLOBAL__sub_I__Z10wireErrorsh>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42b0:	f000 b838 	b.w	d4324 <HAL_Pin_Map>

000d42b4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <os_thread_is_current+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	689b      	ldr	r3, [r3, #8]
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	00030248 	.word	0x00030248

000d42c4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <os_thread_join+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	691b      	ldr	r3, [r3, #16]
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030248 	.word	0x00030248

000d42d4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <os_thread_cleanup+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	695b      	ldr	r3, [r3, #20]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030248 	.word	0x00030248

000d42e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <os_mutex_recursive_create+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	00030248 	.word	0x00030248

000d42f4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <os_mutex_recursive_destroy+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	00030248 	.word	0x00030248

000d4304 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <HAL_RNG_GetRandomNumber+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	685b      	ldr	r3, [r3, #4]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030218 	.word	0x00030218

000d4314 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	695b      	ldr	r3, [r3, #20]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030218 	.word	0x00030218

000d4324 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <HAL_Pin_Map+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	681b      	ldr	r3, [r3, #0]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	0003022c 	.word	0x0003022c

000d4334 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <HAL_I2C_Set_Speed+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	681b      	ldr	r3, [r3, #0]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030228 	.word	0x00030228

000d4344 <HAL_I2C_Stretch_Clock>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <HAL_I2C_Stretch_Clock+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	689b      	ldr	r3, [r3, #8]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030228 	.word	0x00030228

000d4354 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <HAL_I2C_Begin+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	68db      	ldr	r3, [r3, #12]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030228 	.word	0x00030228

000d4364 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_I2C_Begin_Transmission+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	699b      	ldr	r3, [r3, #24]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030228 	.word	0x00030228

000d4374 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_I2C_End_Transmission+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	69db      	ldr	r3, [r3, #28]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030228 	.word	0x00030228

000d4384 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_I2C_Write_Data+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	6a1b      	ldr	r3, [r3, #32]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030228 	.word	0x00030228

000d4394 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_I2C_Available_Data+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030228 	.word	0x00030228

000d43a4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_I2C_Read_Data+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030228 	.word	0x00030228

000d43b4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_I2C_Peek_Data+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030228 	.word	0x00030228

000d43c4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_I2C_Flush_Data+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030228 	.word	0x00030228

000d43d4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_I2C_Init+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030228 	.word	0x00030228

000d43e4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_I2C_Request_Data_Ex+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030228 	.word	0x00030228

000d43f4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <inet_inet_ntop+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	695b      	ldr	r3, [r3, #20]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030264 	.word	0x00030264

000d4404 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <netdb_freeaddrinfo+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	689b      	ldr	r3, [r3, #8]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030268 	.word	0x00030268

000d4414 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <netdb_getaddrinfo+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	68db      	ldr	r3, [r3, #12]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030268 	.word	0x00030268

000d4424 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_USART_Init+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	681b      	ldr	r3, [r3, #0]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003023c 	.word	0x0003023c

000d4434 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_USART_Write_Data+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	68db      	ldr	r3, [r3, #12]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003023c 	.word	0x0003023c

000d4444 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_USART_Available_Data+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	691b      	ldr	r3, [r3, #16]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003023c 	.word	0x0003023c

000d4454 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_USART_Read_Data+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	695b      	ldr	r3, [r3, #20]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003023c 	.word	0x0003023c

000d4464 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_USART_Peek_Data+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	699b      	ldr	r3, [r3, #24]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003023c 	.word	0x0003023c

000d4474 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_USART_Flush_Data+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	69db      	ldr	r3, [r3, #28]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	0003023c 	.word	0x0003023c

000d4484 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_USART_Available_Data_For_Write+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	0003023c 	.word	0x0003023c

000d4494 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_USB_USART_Init+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	681b      	ldr	r3, [r3, #0]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	0003024c 	.word	0x0003024c

000d44a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_USB_USART_Begin+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	685b      	ldr	r3, [r3, #4]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003024c 	.word	0x0003024c

000d44b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_USB_USART_Available_Data+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	691b      	ldr	r3, [r3, #16]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003024c 	.word	0x0003024c

000d44c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003024c 	.word	0x0003024c

000d44d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_USB_USART_Receive_Data+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	699b      	ldr	r3, [r3, #24]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003024c 	.word	0x0003024c

000d44e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_USB_USART_Send_Data+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	69db      	ldr	r3, [r3, #28]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003024c 	.word	0x0003024c

000d44f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_USB_USART_Flush_Data+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6a1b      	ldr	r3, [r3, #32]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003024c 	.word	0x0003024c

000d4504 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <set_system_mode+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	685b      	ldr	r3, [r3, #4]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030220 	.word	0x00030220

000d4514 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <system_delay_ms+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	695b      	ldr	r3, [r3, #20]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030220 	.word	0x00030220

000d4524 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b03      	ldr	r3, [pc, #12]	; (d4534 <system_ctrl_set_app_request_handler+0x10>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d452e:	9301      	str	r3, [sp, #4]
   d4530:	bd08      	pop	{r3, pc}
   d4532:	0000      	.short	0x0000
   d4534:	00030220 	.word	0x00030220

000d4538 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b03      	ldr	r3, [pc, #12]	; (d4548 <system_ctrl_set_result+0x10>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4542:	9301      	str	r3, [sp, #4]
   d4544:	bd08      	pop	{r3, pc}
   d4546:	0000      	.short	0x0000
   d4548:	00030220 	.word	0x00030220

000d454c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030244 	.word	0x00030244

000d455c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <network_connect+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	685b      	ldr	r3, [r3, #4]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030240 	.word	0x00030240

000d456c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <network_connecting+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	689b      	ldr	r3, [r3, #8]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030240 	.word	0x00030240

000d457c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <network_disconnect+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	68db      	ldr	r3, [r3, #12]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030240 	.word	0x00030240

000d458c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <network_ready+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	691b      	ldr	r3, [r3, #16]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030240 	.word	0x00030240

000d459c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <network_on+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	695b      	ldr	r3, [r3, #20]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030240 	.word	0x00030240

000d45ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <network_off+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	699b      	ldr	r3, [r3, #24]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030240 	.word	0x00030240

000d45bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <network_listen+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	69db      	ldr	r3, [r3, #28]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030240 	.word	0x00030240

000d45cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <network_listening+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	6a1b      	ldr	r3, [r3, #32]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030240 	.word	0x00030240

000d45dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <network_set_listen_timeout+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030240 	.word	0x00030240

000d45ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <network_get_listen_timeout+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030240 	.word	0x00030240

000d45fc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <malloc+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	681b      	ldr	r3, [r3, #0]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	0003021c 	.word	0x0003021c

000d460c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <free+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	685b      	ldr	r3, [r3, #4]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003021c 	.word	0x0003021c

000d461c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d461c:	2100      	movs	r1, #0
   d461e:	f7ff bf79 	b.w	d4514 <system_delay_ms>

000d4622 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4622:	b510      	push	{r4, lr}
   d4624:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4626:	6800      	ldr	r0, [r0, #0]
   d4628:	b108      	cbz	r0, d462e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d462a:	f7ff fe63 	bl	d42f4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d462e:	4620      	mov	r0, r4
   d4630:	bd10      	pop	{r4, pc}
	...

000d4634 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4634:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4636:	4c06      	ldr	r4, [pc, #24]	; (d4650 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4638:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d463a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d463c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d463e:	f7ff fe51 	bl	d42e4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4642:	4620      	mov	r0, r4
   d4644:	4a03      	ldr	r2, [pc, #12]	; (d4654 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4646:	4904      	ldr	r1, [pc, #16]	; (d4658 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d464c:	f000 bd48 	b.w	d50e0 <__aeabi_atexit>
   d4650:	2003e3dc 	.word	0x2003e3dc
   d4654:	2003e3a4 	.word	0x2003e3a4
   d4658:	000d4623 	.word	0x000d4623

000d465c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d465c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d465e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4660:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4662:	b113      	cbz	r3, d466a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4664:	2203      	movs	r2, #3
   d4666:	4601      	mov	r1, r0
   d4668:	4798      	blx	r3
    }
   d466a:	4620      	mov	r0, r4
   d466c:	bd10      	pop	{r4, pc}

000d466e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d466e:	2200      	movs	r2, #0
   d4670:	4611      	mov	r1, r2
   d4672:	6840      	ldr	r0, [r0, #4]
   d4674:	f7ff bfaa 	b.w	d45cc <network_listening>

000d4678 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4678:	2200      	movs	r2, #0
   d467a:	4611      	mov	r1, r2
   d467c:	6840      	ldr	r0, [r0, #4]
   d467e:	f7ff bfb5 	b.w	d45ec <network_get_listen_timeout>

000d4682 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4682:	2200      	movs	r2, #0
   d4684:	6840      	ldr	r0, [r0, #4]
   d4686:	f7ff bfa9 	b.w	d45dc <network_set_listen_timeout>

000d468a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d468a:	2200      	movs	r2, #0
   d468c:	f081 0101 	eor.w	r1, r1, #1
   d4690:	6840      	ldr	r0, [r0, #4]
   d4692:	f7ff bf93 	b.w	d45bc <network_listen>

000d4696 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4696:	2300      	movs	r3, #0
   d4698:	461a      	mov	r2, r3
   d469a:	4619      	mov	r1, r3
   d469c:	6840      	ldr	r0, [r0, #4]
   d469e:	f7ff bf85 	b.w	d45ac <network_off>

000d46a2 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46a2:	2300      	movs	r3, #0
   d46a4:	461a      	mov	r2, r3
   d46a6:	4619      	mov	r1, r3
   d46a8:	6840      	ldr	r0, [r0, #4]
   d46aa:	f7ff bf77 	b.w	d459c <network_on>

000d46ae <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46ae:	2200      	movs	r2, #0
   d46b0:	4611      	mov	r1, r2
   d46b2:	6840      	ldr	r0, [r0, #4]
   d46b4:	f7ff bf6a 	b.w	d458c <network_ready>

000d46b8 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46b8:	2200      	movs	r2, #0
   d46ba:	4611      	mov	r1, r2
   d46bc:	6840      	ldr	r0, [r0, #4]
   d46be:	f7ff bf55 	b.w	d456c <network_connecting>

000d46c2 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46c2:	2200      	movs	r2, #0
   d46c4:	2102      	movs	r1, #2
   d46c6:	6840      	ldr	r0, [r0, #4]
   d46c8:	f7ff bf58 	b.w	d457c <network_disconnect>

000d46cc <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46cc:	2300      	movs	r3, #0
   d46ce:	461a      	mov	r2, r3
   d46d0:	6840      	ldr	r0, [r0, #4]
   d46d2:	f7ff bf43 	b.w	d455c <network_connect>
	...

000d46d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46d8:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46da:	2203      	movs	r2, #3
   d46dc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46de:	4a02      	ldr	r2, [pc, #8]	; (d46e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46e0:	601a      	str	r2, [r3, #0]
   d46e2:	4770      	bx	lr
   d46e4:	2003e3e0 	.word	0x2003e3e0
   d46e8:	000d5560 	.word	0x000d5560

000d46ec <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d46ec:	4770      	bx	lr

000d46ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d46ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46f0:	4606      	mov	r6, r0
   d46f2:	4615      	mov	r5, r2
   d46f4:	460c      	mov	r4, r1
   d46f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d46f8:	42bc      	cmp	r4, r7
   d46fa:	d006      	beq.n	d470a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d46fc:	6833      	ldr	r3, [r6, #0]
   d46fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4702:	689b      	ldr	r3, [r3, #8]
   d4704:	4630      	mov	r0, r6
   d4706:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4708:	e7f6      	b.n	d46f8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d470a:	4628      	mov	r0, r5
   d470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d470e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d470e:	2200      	movs	r2, #0
   d4710:	7c00      	ldrb	r0, [r0, #16]
   d4712:	f7ff be37 	b.w	d4384 <HAL_I2C_Write_Data>

000d4716 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4716:	2100      	movs	r1, #0
   d4718:	7c00      	ldrb	r0, [r0, #16]
   d471a:	f7ff be3b 	b.w	d4394 <HAL_I2C_Available_Data>

000d471e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d471e:	2100      	movs	r1, #0
   d4720:	7c00      	ldrb	r0, [r0, #16]
   d4722:	f7ff be3f 	b.w	d43a4 <HAL_I2C_Read_Data>

000d4726 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4726:	2100      	movs	r1, #0
   d4728:	7c00      	ldrb	r0, [r0, #16]
   d472a:	f7ff be43 	b.w	d43b4 <HAL_I2C_Peek_Data>

000d472e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d472e:	2100      	movs	r1, #0
   d4730:	7c00      	ldrb	r0, [r0, #16]
   d4732:	f7ff be47 	b.w	d43c4 <HAL_I2C_Flush_Data>

000d4736 <_ZN7TwoWireD0Ev>:
   d4736:	b510      	push	{r4, lr}
   d4738:	2114      	movs	r1, #20
   d473a:	4604      	mov	r4, r0
   d473c:	f000 fcd5 	bl	d50ea <_ZdlPvj>
   d4740:	4620      	mov	r0, r4
   d4742:	bd10      	pop	{r4, pc}

000d4744 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4744:	b510      	push	{r4, lr}
   d4746:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4748:	2300      	movs	r3, #0
   d474a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d474c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4750:	60a3      	str	r3, [r4, #8]
   d4752:	4b04      	ldr	r3, [pc, #16]	; (d4764 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4754:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4756:	4608      	mov	r0, r1
   d4758:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d475a:	4611      	mov	r1, r2
   d475c:	f7ff fe3a 	bl	d43d4 <HAL_I2C_Init>
}
   d4760:	4620      	mov	r0, r4
   d4762:	bd10      	pop	{r4, pc}
   d4764:	000d5594 	.word	0x000d5594

000d4768 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d4768:	2200      	movs	r2, #0
   d476a:	7c00      	ldrb	r0, [r0, #16]
   d476c:	f7ff bde2 	b.w	d4334 <HAL_I2C_Set_Speed>

000d4770 <_ZN7TwoWire12stretchClockEb>:
  HAL_I2C_Enable_DMA_Mode(_i2c, enableDMAMode, NULL);
}

void TwoWire::stretchClock(bool stretch)
{
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
   d4770:	2200      	movs	r2, #0
   d4772:	7c00      	ldrb	r0, [r0, #16]
   d4774:	f7ff bde6 	b.w	d4344 <HAL_I2C_Stretch_Clock>

000d4778 <_ZN7TwoWire5beginEv>:
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4778:	2300      	movs	r3, #0
   d477a:	461a      	mov	r2, r3
   d477c:	4619      	mov	r1, r3
   d477e:	7c00      	ldrb	r0, [r0, #16]
   d4780:	f7ff bde8 	b.w	d4354 <HAL_I2C_Begin>

000d4784 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4784:	b570      	push	{r4, r5, r6, lr}
   d4786:	460c      	mov	r4, r1
   d4788:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d478a:	2514      	movs	r5, #20
   d478c:	4606      	mov	r6, r0
   d478e:	462a      	mov	r2, r5
   d4790:	2100      	movs	r1, #0
   d4792:	a801      	add	r0, sp, #4
   d4794:	f000 fe27 	bl	d53e6 <memset>
   d4798:	7823      	ldrb	r3, [r4, #0]
   d479a:	f88d 3008 	strb.w	r3, [sp, #8]
   d479e:	6863      	ldr	r3, [r4, #4]
   d47a0:	9303      	str	r3, [sp, #12]
   d47a2:	68e3      	ldr	r3, [r4, #12]
   d47a4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d47a6:	2200      	movs	r2, #0
   d47a8:	7a23      	ldrb	r3, [r4, #8]
   d47aa:	7c30      	ldrb	r0, [r6, #16]
   d47ac:	f8ad 5004 	strh.w	r5, [sp, #4]
   d47b0:	a901      	add	r1, sp, #4
   d47b2:	9305      	str	r3, [sp, #20]
   d47b4:	f7ff fe16 	bl	d43e4 <HAL_I2C_Request_Data_Ex>
}
   d47b8:	b006      	add	sp, #24
   d47ba:	bd70      	pop	{r4, r5, r6, pc}

000d47bc <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d47bc:	2200      	movs	r2, #0
   d47be:	7c00      	ldrb	r0, [r0, #16]
   d47c0:	f7ff bdd0 	b.w	d4364 <HAL_I2C_Begin_Transmission>

000d47c4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d47c4:	2200      	movs	r2, #0
   d47c6:	7c00      	ldrb	r0, [r0, #16]
   d47c8:	f7ff bdd4 	b.w	d4374 <HAL_I2C_End_Transmission>

000d47cc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d47cc:	4770      	bx	lr

000d47ce <_ZN9IPAddressD0Ev>:
   d47ce:	b510      	push	{r4, lr}
   d47d0:	2118      	movs	r1, #24
   d47d2:	4604      	mov	r4, r0
   d47d4:	f000 fc89 	bl	d50ea <_ZdlPvj>
   d47d8:	4620      	mov	r0, r4
   d47da:	bd10      	pop	{r4, pc}

000d47dc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47dc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47de:	7d03      	ldrb	r3, [r0, #20]
   d47e0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47e2:	b08d      	sub	sp, #52	; 0x34
   d47e4:	460e      	mov	r6, r1
   d47e6:	f100 0704 	add.w	r7, r0, #4
   d47ea:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47ee:	d002      	beq.n	d47f6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d47f0:	f100 0508 	add.w	r5, r0, #8
   d47f4:	e018      	b.n	d4828 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d47f6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d47f8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d47fa:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d47fe:	232f      	movs	r3, #47	; 0x2f
   d4800:	462a      	mov	r2, r5
   d4802:	200a      	movs	r0, #10
   d4804:	f7ff fdf6 	bl	d43f4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4808:	4628      	mov	r0, r5
   d480a:	f000 fe1d 	bl	d5448 <strlen>
   d480e:	6833      	ldr	r3, [r6, #0]
   d4810:	4602      	mov	r2, r0
   d4812:	68db      	ldr	r3, [r3, #12]
   d4814:	4629      	mov	r1, r5
   d4816:	4630      	mov	r0, r6
   d4818:	4798      	blx	r3
   d481a:	e00f      	b.n	d483c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d481c:	b124      	cbz	r4, d4828 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d481e:	212e      	movs	r1, #46	; 0x2e
   d4820:	4630      	mov	r0, r6
   d4822:	f000 f9d9 	bl	d4bd8 <_ZN5Print5printEc>
   d4826:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4828:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d482c:	220a      	movs	r2, #10
   d482e:	4630      	mov	r0, r6
   d4830:	f000 f9e1 	bl	d4bf6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4834:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4836:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4838:	d1f0      	bne.n	d481c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d483a:	4620      	mov	r0, r4
    }
    return n;
}
   d483c:	b00d      	add	sp, #52	; 0x34
   d483e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4840 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4840:	b510      	push	{r4, lr}
   d4842:	4b05      	ldr	r3, [pc, #20]	; (d4858 <_ZN9IPAddressC1Ev+0x18>)
   d4844:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4846:	2211      	movs	r2, #17
   d4848:	f840 3b04 	str.w	r3, [r0], #4
   d484c:	2100      	movs	r1, #0
   d484e:	f000 fdca 	bl	d53e6 <memset>
{
    clear();
}
   d4852:	4620      	mov	r0, r4
   d4854:	bd10      	pop	{r4, pc}
   d4856:	bf00      	nop
   d4858:	000d55bc 	.word	0x000d55bc

000d485c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d485c:	4603      	mov	r3, r0
   d485e:	4a07      	ldr	r2, [pc, #28]	; (d487c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4860:	b510      	push	{r4, lr}
   d4862:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4866:	f101 0210 	add.w	r2, r1, #16
   d486a:	f851 4b04 	ldr.w	r4, [r1], #4
   d486e:	f843 4b04 	str.w	r4, [r3], #4
   d4872:	4291      	cmp	r1, r2
   d4874:	d1f9      	bne.n	d486a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4876:	780a      	ldrb	r2, [r1, #0]
   d4878:	701a      	strb	r2, [r3, #0]
}
   d487a:	bd10      	pop	{r4, pc}
   d487c:	000d55bc 	.word	0x000d55bc

000d4880 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4880:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4882:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4886:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d488a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d488e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4892:	2304      	movs	r3, #4
   d4894:	6041      	str	r1, [r0, #4]
   d4896:	7503      	strb	r3, [r0, #20]
   d4898:	bd10      	pop	{r4, pc}

000d489a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d489a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d489c:	780d      	ldrb	r5, [r1, #0]
   d489e:	788b      	ldrb	r3, [r1, #2]
   d48a0:	784a      	ldrb	r2, [r1, #1]
   d48a2:	78c9      	ldrb	r1, [r1, #3]
   d48a4:	9100      	str	r1, [sp, #0]
   d48a6:	4629      	mov	r1, r5
   d48a8:	f7ff ffea 	bl	d4880 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d48ac:	b003      	add	sp, #12
   d48ae:	bd30      	pop	{r4, r5, pc}

000d48b0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d48b0:	4b01      	ldr	r3, [pc, #4]	; (d48b8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d48b2:	4a02      	ldr	r2, [pc, #8]	; (d48bc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d48b4:	601a      	str	r2, [r3, #0]
   d48b6:	4770      	bx	lr
   d48b8:	2003e3e8 	.word	0x2003e3e8
   d48bc:	000d563b 	.word	0x000d563b

000d48c0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48c0:	2200      	movs	r2, #0
   d48c2:	4611      	mov	r1, r2
   d48c4:	6840      	ldr	r0, [r0, #4]
   d48c6:	f7ff be81 	b.w	d45cc <network_listening>

000d48ca <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48ca:	2200      	movs	r2, #0
   d48cc:	4611      	mov	r1, r2
   d48ce:	6840      	ldr	r0, [r0, #4]
   d48d0:	f7ff be8c 	b.w	d45ec <network_get_listen_timeout>

000d48d4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48d4:	2200      	movs	r2, #0
   d48d6:	6840      	ldr	r0, [r0, #4]
   d48d8:	f7ff be80 	b.w	d45dc <network_set_listen_timeout>

000d48dc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48dc:	2200      	movs	r2, #0
   d48de:	f081 0101 	eor.w	r1, r1, #1
   d48e2:	6840      	ldr	r0, [r0, #4]
   d48e4:	f7ff be6a 	b.w	d45bc <network_listen>

000d48e8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d48e8:	2300      	movs	r3, #0
   d48ea:	461a      	mov	r2, r3
   d48ec:	2101      	movs	r1, #1
   d48ee:	6840      	ldr	r0, [r0, #4]
   d48f0:	f7ff be5c 	b.w	d45ac <network_off>

000d48f4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48f4:	2300      	movs	r3, #0
   d48f6:	461a      	mov	r2, r3
   d48f8:	4619      	mov	r1, r3
   d48fa:	6840      	ldr	r0, [r0, #4]
   d48fc:	f7ff be4e 	b.w	d459c <network_on>

000d4900 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4900:	2200      	movs	r2, #0
   d4902:	4611      	mov	r1, r2
   d4904:	6840      	ldr	r0, [r0, #4]
   d4906:	f7ff be41 	b.w	d458c <network_ready>

000d490a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d490a:	2200      	movs	r2, #0
   d490c:	4611      	mov	r1, r2
   d490e:	6840      	ldr	r0, [r0, #4]
   d4910:	f7ff be2c 	b.w	d456c <network_connecting>

000d4914 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4914:	2200      	movs	r2, #0
   d4916:	2102      	movs	r1, #2
   d4918:	6840      	ldr	r0, [r0, #4]
   d491a:	f7ff be2f 	b.w	d457c <network_disconnect>

000d491e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d491e:	2300      	movs	r3, #0
   d4920:	461a      	mov	r2, r3
   d4922:	6840      	ldr	r0, [r0, #4]
   d4924:	f7ff be1a 	b.w	d455c <network_connect>

000d4928 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4928:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d492a:	4605      	mov	r5, r0
   d492c:	b188      	cbz	r0, d4952 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d492e:	6804      	ldr	r4, [r0, #0]
   d4930:	b14c      	cbz	r4, d4946 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4932:	68a3      	ldr	r3, [r4, #8]
   d4934:	b11b      	cbz	r3, d493e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4936:	2203      	movs	r2, #3
   d4938:	4621      	mov	r1, r4
   d493a:	4620      	mov	r0, r4
   d493c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d493e:	2110      	movs	r1, #16
   d4940:	4620      	mov	r0, r4
   d4942:	f000 fbd2 	bl	d50ea <_ZdlPvj>
   d4946:	4628      	mov	r0, r5
   d4948:	2114      	movs	r1, #20
      }
   d494a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d494e:	f000 bbcc 	b.w	d50ea <_ZdlPvj>
   d4952:	bd38      	pop	{r3, r4, r5, pc}

000d4954 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4954:	b110      	cbz	r0, d495c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4956:	6803      	ldr	r3, [r0, #0]
   d4958:	685b      	ldr	r3, [r3, #4]
   d495a:	4718      	bx	r3
   d495c:	4770      	bx	lr

000d495e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d495e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4960:	6803      	ldr	r3, [r0, #0]
   d4962:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4964:	b1bb      	cbz	r3, d4996 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4966:	6858      	ldr	r0, [r3, #4]
   d4968:	f7ff fca4 	bl	d42b4 <os_thread_is_current>
   d496c:	b978      	cbnz	r0, d498e <_ZN6ThreadD1Ev+0x30>
   d496e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4970:	7c5a      	ldrb	r2, [r3, #17]
   d4972:	b912      	cbnz	r2, d497a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4974:	6858      	ldr	r0, [r3, #4]
   d4976:	f7ff fca5 	bl	d42c4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d497a:	6823      	ldr	r3, [r4, #0]
   d497c:	6858      	ldr	r0, [r3, #4]
   d497e:	f7ff fca9 	bl	d42d4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4982:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4984:	2300      	movs	r3, #0
   d4986:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4988:	b128      	cbz	r0, d4996 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d498a:	f7ff ffcd 	bl	d4928 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d498e:	6820      	ldr	r0, [r4, #0]
   d4990:	b108      	cbz	r0, d4996 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4992:	f7ff ffc9 	bl	d4928 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4996:	4620      	mov	r0, r4
   d4998:	bd10      	pop	{r4, pc}

000d499a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d499a:	b538      	push	{r3, r4, r5, lr}
   d499c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d499e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d49a2:	b108      	cbz	r0, d49a8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d49a4:	f7ff fb79 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d49a8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d49ac:	b108      	cbz	r0, d49b2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d49ae:	f7ff fca1 	bl	d42f4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49b2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d49b6:	b135      	cbz	r5, d49c6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49b8:	4628      	mov	r0, r5
   d49ba:	f7ff ffd0 	bl	d495e <_ZN6ThreadD1Ev>
   d49be:	2104      	movs	r1, #4
   d49c0:	4628      	mov	r0, r5
   d49c2:	f000 fb92 	bl	d50ea <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49c6:	6820      	ldr	r0, [r4, #0]
   d49c8:	b108      	cbz	r0, d49ce <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d49ca:	f7ff ffc3 	bl	d4954 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d49ce:	4620      	mov	r0, r4
   d49d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49d4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d49d4:	b510      	push	{r4, lr}
   d49d6:	4b04      	ldr	r3, [pc, #16]	; (d49e8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d49d8:	4604      	mov	r4, r0
   d49da:	f840 3b08 	str.w	r3, [r0], #8
   d49de:	f7ff ffdc 	bl	d499a <_ZN5spark11MeshPublishD1Ev>
   d49e2:	4620      	mov	r0, r4
   d49e4:	bd10      	pop	{r4, pc}
   d49e6:	bf00      	nop
   d49e8:	000d56b4 	.word	0x000d56b4

000d49ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d49ec:	b538      	push	{r3, r4, r5, lr}
   d49ee:	4c0e      	ldr	r4, [pc, #56]	; (d4a28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d49f0:	4b0e      	ldr	r3, [pc, #56]	; (d4a2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d49f2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d49f4:	2500      	movs	r5, #0
   d49f6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d49f8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d49fc:	6063      	str	r3, [r4, #4]
   d49fe:	60a5      	str	r5, [r4, #8]
   d4a00:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a04:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4a08:	f7ff fc6c 	bl	d42e4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4a0c:	4b08      	ldr	r3, [pc, #32]	; (d4a30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4a0e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a12:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4a16:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4a18:	4620      	mov	r0, r4
   d4a1a:	4a06      	ldr	r2, [pc, #24]	; (d4a34 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4a1c:	4906      	ldr	r1, [pc, #24]	; (d4a38 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4a22:	f000 bb5d 	b.w	d50e0 <__aeabi_atexit>
   d4a26:	bf00      	nop
   d4a28:	2003e3ec 	.word	0x2003e3ec
   d4a2c:	000d56e8 	.word	0x000d56e8
   d4a30:	000d56b4 	.word	0x000d56b4
   d4a34:	2003e3a4 	.word	0x2003e3a4
   d4a38:	000d49d5 	.word	0x000d49d5

000d4a3c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4a3c:	2300      	movs	r3, #0
   d4a3e:	461a      	mov	r2, r3
   d4a40:	6840      	ldr	r0, [r0, #4]
   d4a42:	f7ff bd8b 	b.w	d455c <network_connect>

000d4a46 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4a46:	2200      	movs	r2, #0
   d4a48:	2102      	movs	r1, #2
   d4a4a:	6840      	ldr	r0, [r0, #4]
   d4a4c:	f7ff bd96 	b.w	d457c <network_disconnect>

000d4a50 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4a50:	2200      	movs	r2, #0
   d4a52:	4611      	mov	r1, r2
   d4a54:	6840      	ldr	r0, [r0, #4]
   d4a56:	f7ff bd89 	b.w	d456c <network_connecting>

000d4a5a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4a5a:	2200      	movs	r2, #0
   d4a5c:	4611      	mov	r1, r2
   d4a5e:	6840      	ldr	r0, [r0, #4]
   d4a60:	f7ff bd94 	b.w	d458c <network_ready>

000d4a64 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4a64:	2300      	movs	r3, #0
   d4a66:	461a      	mov	r2, r3
   d4a68:	4619      	mov	r1, r3
   d4a6a:	6840      	ldr	r0, [r0, #4]
   d4a6c:	f7ff bd96 	b.w	d459c <network_on>

000d4a70 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4a70:	2300      	movs	r3, #0
   d4a72:	461a      	mov	r2, r3
   d4a74:	4619      	mov	r1, r3
   d4a76:	6840      	ldr	r0, [r0, #4]
   d4a78:	f7ff bd98 	b.w	d45ac <network_off>

000d4a7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4a7c:	2200      	movs	r2, #0
   d4a7e:	f081 0101 	eor.w	r1, r1, #1
   d4a82:	6840      	ldr	r0, [r0, #4]
   d4a84:	f7ff bd9a 	b.w	d45bc <network_listen>

000d4a88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4a88:	2200      	movs	r2, #0
   d4a8a:	6840      	ldr	r0, [r0, #4]
   d4a8c:	f7ff bda6 	b.w	d45dc <network_set_listen_timeout>

000d4a90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4a90:	2200      	movs	r2, #0
   d4a92:	4611      	mov	r1, r2
   d4a94:	6840      	ldr	r0, [r0, #4]
   d4a96:	f7ff bda9 	b.w	d45ec <network_get_listen_timeout>

000d4a9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4a9a:	2200      	movs	r2, #0
   d4a9c:	4611      	mov	r1, r2
   d4a9e:	6840      	ldr	r0, [r0, #4]
   d4aa0:	f7ff bd94 	b.w	d45cc <network_listening>

000d4aa4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4aa8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4aaa:	b095      	sub	sp, #84	; 0x54
   d4aac:	4616      	mov	r6, r2
   d4aae:	460d      	mov	r5, r1
   d4ab0:	4607      	mov	r7, r0
    IPAddress addr;
   d4ab2:	f7ff fec5 	bl	d4840 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4ab6:	4621      	mov	r1, r4
   d4ab8:	2220      	movs	r2, #32
   d4aba:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4abc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4abe:	f000 fc92 	bl	d53e6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4ac2:	2340      	movs	r3, #64	; 0x40
   d4ac4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4ac6:	4621      	mov	r1, r4
   d4ac8:	466b      	mov	r3, sp
   d4aca:	aa0c      	add	r2, sp, #48	; 0x30
   d4acc:	4630      	mov	r0, r6
   d4ace:	f7ff fca1 	bl	d4414 <netdb_getaddrinfo>
    if (!r) {
   d4ad2:	4604      	mov	r4, r0
   d4ad4:	2800      	cmp	r0, #0
   d4ad6:	d144      	bne.n	d4b62 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4ad8:	4602      	mov	r2, r0
   d4ada:	2101      	movs	r1, #1
   d4adc:	6868      	ldr	r0, [r5, #4]
   d4ade:	f7ff fd55 	bl	d458c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ae2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4ae4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ae6:	4622      	mov	r2, r4
   d4ae8:	6868      	ldr	r0, [r5, #4]
   d4aea:	f7ff fd4f 	bl	d458c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4aee:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4af0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4af2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4af4:	2e00      	cmp	r6, #0
   d4af6:	d034      	beq.n	d4b62 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4af8:	2900      	cmp	r1, #0
   d4afa:	d132      	bne.n	d4b62 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4afc:	6873      	ldr	r3, [r6, #4]
   d4afe:	2b02      	cmp	r3, #2
   d4b00:	d002      	beq.n	d4b08 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4b02:	2b0a      	cmp	r3, #10
   d4b04:	d009      	beq.n	d4b1a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4b06:	e02a      	b.n	d4b5e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4b08:	f1b8 0f00 	cmp.w	r8, #0
   d4b0c:	d027      	beq.n	d4b5e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4b0e:	6971      	ldr	r1, [r6, #20]
   d4b10:	4638      	mov	r0, r7
   d4b12:	3104      	adds	r1, #4
   d4b14:	f7ff fec1 	bl	d489a <_ZN9IPAddressaSEPKh>
   d4b18:	e020      	b.n	d4b5c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4b1a:	f1b9 0f00 	cmp.w	r9, #0
   d4b1e:	d01e      	beq.n	d4b5e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4b20:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4b22:	2211      	movs	r2, #17
   d4b24:	a801      	add	r0, sp, #4
   d4b26:	f000 fc5e 	bl	d53e6 <memset>
                    a.v = 6;
   d4b2a:	2306      	movs	r3, #6
   d4b2c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4b30:	ad01      	add	r5, sp, #4
   d4b32:	f104 0308 	add.w	r3, r4, #8
   d4b36:	3418      	adds	r4, #24
   d4b38:	6818      	ldr	r0, [r3, #0]
   d4b3a:	6859      	ldr	r1, [r3, #4]
   d4b3c:	462a      	mov	r2, r5
   d4b3e:	c203      	stmia	r2!, {r0, r1}
   d4b40:	3308      	adds	r3, #8
   d4b42:	42a3      	cmp	r3, r4
   d4b44:	4615      	mov	r5, r2
   d4b46:	d1f7      	bne.n	d4b38 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4b48:	a901      	add	r1, sp, #4
   d4b4a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4b4c:	ad07      	add	r5, sp, #28
   d4b4e:	f7ff fe85 	bl	d485c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b54:	1d3c      	adds	r4, r7, #4
   d4b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b58:	682b      	ldr	r3, [r5, #0]
   d4b5a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4b5c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b5e:	69f6      	ldr	r6, [r6, #28]
   d4b60:	e7c8      	b.n	d4af4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4b62:	9800      	ldr	r0, [sp, #0]
   d4b64:	f7ff fc4e 	bl	d4404 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4b68:	4638      	mov	r0, r7
   d4b6a:	b015      	add	sp, #84	; 0x54
   d4b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4b70 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4b70:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4b72:	4a03      	ldr	r2, [pc, #12]	; (d4b80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4b74:	601a      	str	r2, [r3, #0]
   d4b76:	2200      	movs	r2, #0
   d4b78:	605a      	str	r2, [r3, #4]
   d4b7a:	4770      	bx	lr
   d4b7c:	2003e5c0 	.word	0x2003e5c0
   d4b80:	000d56e8 	.word	0x000d56e8

000d4b84 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b86:	4606      	mov	r6, r0
   d4b88:	460d      	mov	r5, r1
   d4b8a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4b8c:	2400      	movs	r4, #0
  while (size--) {
   d4b8e:	42bd      	cmp	r5, r7
   d4b90:	d00c      	beq.n	d4bac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b92:	6833      	ldr	r3, [r6, #0]
   d4b94:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b98:	689b      	ldr	r3, [r3, #8]
   d4b9a:	4630      	mov	r0, r6
   d4b9c:	4798      	blx	r3
     if (chunk>=0)
   d4b9e:	2800      	cmp	r0, #0
   d4ba0:	db01      	blt.n	d4ba6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4ba2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4ba4:	e7f3      	b.n	d4b8e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4ba6:	2c00      	cmp	r4, #0
   d4ba8:	bf08      	it	eq
   d4baa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4bac:	4620      	mov	r0, r4
   d4bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bb0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4bb0:	b570      	push	{r4, r5, r6, lr}
   d4bb2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4bb4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4bb6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4bb8:	b149      	cbz	r1, d4bce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4bba:	f000 fc45 	bl	d5448 <strlen>
   d4bbe:	682b      	ldr	r3, [r5, #0]
   d4bc0:	4602      	mov	r2, r0
   d4bc2:	4621      	mov	r1, r4
   d4bc4:	4628      	mov	r0, r5
   d4bc6:	68db      	ldr	r3, [r3, #12]
    }
   d4bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4bcc:	4718      	bx	r3
    }
   d4bce:	bd70      	pop	{r4, r5, r6, pc}

000d4bd0 <_ZN5Print5printEPKc>:
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	f7ff ffed 	bl	d4bb0 <_ZN5Print5writeEPKc>
   d4bd6:	bd08      	pop	{r3, pc}

000d4bd8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4bd8:	6803      	ldr	r3, [r0, #0]
   d4bda:	689b      	ldr	r3, [r3, #8]
   d4bdc:	4718      	bx	r3

000d4bde <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4bde:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4be0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4be2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4be4:	f7ff fff8 	bl	d4bd8 <_ZN5Print5printEc>
  n += print('\n');
   d4be8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4bea:	4604      	mov	r4, r0
  n += print('\n');
   d4bec:	4628      	mov	r0, r5
   d4bee:	f7ff fff3 	bl	d4bd8 <_ZN5Print5printEc>
  return n;
}
   d4bf2:	4420      	add	r0, r4
   d4bf4:	bd38      	pop	{r3, r4, r5, pc}

000d4bf6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4bf6:	b530      	push	{r4, r5, lr}
   d4bf8:	b08b      	sub	sp, #44	; 0x2c
   d4bfa:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4bfc:	2100      	movs	r1, #0
   d4bfe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c02:	2a01      	cmp	r2, #1
   d4c04:	bf98      	it	ls
   d4c06:	220a      	movls	r2, #10
   d4c08:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4c0c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4c10:	fb05 3312 	mls	r3, r5, r2, r3
   d4c14:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c18:	2b09      	cmp	r3, #9
   d4c1a:	bf94      	ite	ls
   d4c1c:	3330      	addls	r3, #48	; 0x30
   d4c1e:	3337      	addhi	r3, #55	; 0x37
   d4c20:	b2db      	uxtb	r3, r3
   d4c22:	4621      	mov	r1, r4
   d4c24:	f804 3901 	strb.w	r3, [r4], #-1
   d4c28:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4c2a:	2d00      	cmp	r5, #0
   d4c2c:	d1ee      	bne.n	d4c0c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4c2e:	f7ff ffbf 	bl	d4bb0 <_ZN5Print5writeEPKc>
}
   d4c32:	b00b      	add	sp, #44	; 0x2c
   d4c34:	bd30      	pop	{r4, r5, pc}

000d4c36 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4c36:	b510      	push	{r4, lr}
   d4c38:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c3a:	f7ff fd0f 	bl	d465c <_ZNSt14_Function_baseD1Ev>
   d4c3e:	4620      	mov	r0, r4
   d4c40:	bd10      	pop	{r4, pc}
	...

000d4c44 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c44:	4803      	ldr	r0, [pc, #12]	; (d4c54 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c46:	4a04      	ldr	r2, [pc, #16]	; (d4c58 <_GLOBAL__sub_I_RGB+0x14>)
   d4c48:	4904      	ldr	r1, [pc, #16]	; (d4c5c <_GLOBAL__sub_I_RGB+0x18>)
   d4c4a:	2300      	movs	r3, #0
   d4c4c:	6083      	str	r3, [r0, #8]
   d4c4e:	f000 ba47 	b.w	d50e0 <__aeabi_atexit>
   d4c52:	bf00      	nop
   d4c54:	2003e5c8 	.word	0x2003e5c8
   d4c58:	2003e3a4 	.word	0x2003e3a4
   d4c5c:	000d4c37 	.word	0x000d4c37

000d4c60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4c60:	b510      	push	{r4, lr}
   d4c62:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4c64:	6800      	ldr	r0, [r0, #0]
   d4c66:	b118      	cbz	r0, d4c70 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4c68:	f7ff fcd0 	bl	d460c <free>
            wakeupSource_ = nullptr;
   d4c6c:	2300      	movs	r3, #0
   d4c6e:	6023      	str	r3, [r4, #0]
   d4c70:	bd10      	pop	{r4, pc}

000d4c72 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4c72:	b510      	push	{r4, lr}
   d4c74:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4c76:	f7ff fff3 	bl	d4c60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	bd10      	pop	{r4, pc}
	...

000d4c80 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c80:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c82:	4c09      	ldr	r4, [pc, #36]	; (d4ca8 <_GLOBAL__sub_I_System+0x28>)
   d4c84:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c86:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c8a:	6020      	str	r0, [r4, #0]
   d4c8c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c8e:	71a0      	strb	r0, [r4, #6]
   d4c90:	8120      	strh	r0, [r4, #8]
   d4c92:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c94:	f7ff fc36 	bl	d4504 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4c98:	4620      	mov	r0, r4
   d4c9a:	4a04      	ldr	r2, [pc, #16]	; (d4cac <_GLOBAL__sub_I_System+0x2c>)
   d4c9c:	4904      	ldr	r1, [pc, #16]	; (d4cb0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4ca2:	f000 ba1d 	b.w	d50e0 <__aeabi_atexit>
   d4ca6:	bf00      	nop
   d4ca8:	2003e5d8 	.word	0x2003e5d8
   d4cac:	2003e3a4 	.word	0x2003e3a4
   d4cb0:	000d4c73 	.word	0x000d4c73

000d4cb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4cb4:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4cb6:	681a      	ldr	r2, [r3, #0]
   d4cb8:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4cba:	601a      	str	r2, [r3, #0]
   d4cbc:	4770      	bx	lr
   d4cbe:	bf00      	nop
   d4cc0:	2003e33c 	.word	0x2003e33c
   d4cc4:	2003e5e4 	.word	0x2003e5e4

000d4cc8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4cc8:	4770      	bx	lr

000d4cca <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4cca:	7441      	strb	r1, [r0, #17]
   d4ccc:	4770      	bx	lr

000d4cce <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4cce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4cd0:	7c00      	ldrb	r0, [r0, #16]
   d4cd2:	f7ff fbd7 	bl	d4484 <HAL_USART_Available_Data_For_Write>
}
   d4cd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4cda:	bd08      	pop	{r3, pc}

000d4cdc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4cdc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4cde:	7c00      	ldrb	r0, [r0, #16]
   d4ce0:	f7ff fbb0 	bl	d4444 <HAL_USART_Available_Data>
}
   d4ce4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ce8:	bd08      	pop	{r3, pc}

000d4cea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4cea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4cec:	7c00      	ldrb	r0, [r0, #16]
   d4cee:	f7ff fbb9 	bl	d4464 <HAL_USART_Peek_Data>
}
   d4cf2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4cf6:	bf28      	it	cs
   d4cf8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4cfc:	bd08      	pop	{r3, pc}

000d4cfe <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4cfe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4d00:	7c00      	ldrb	r0, [r0, #16]
   d4d02:	f7ff fba7 	bl	d4454 <HAL_USART_Read_Data>
}
   d4d06:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d0a:	bf28      	it	cs
   d4d0c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4d10:	bd08      	pop	{r3, pc}

000d4d12 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4d12:	7c00      	ldrb	r0, [r0, #16]
   d4d14:	f7ff bbae 	b.w	d4474 <HAL_USART_Flush_Data>

000d4d18 <_ZN11USARTSerialD0Ev>:
   d4d18:	b510      	push	{r4, lr}
   d4d1a:	2114      	movs	r1, #20
   d4d1c:	4604      	mov	r4, r0
   d4d1e:	f000 f9e4 	bl	d50ea <_ZdlPvj>
   d4d22:	4620      	mov	r0, r4
   d4d24:	bd10      	pop	{r4, pc}

000d4d26 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4d26:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d28:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4d2a:	4604      	mov	r4, r0
   d4d2c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d2e:	b925      	cbnz	r5, d4d3a <_ZN11USARTSerial5writeEh+0x14>
   d4d30:	7c00      	ldrb	r0, [r0, #16]
   d4d32:	f7ff fba7 	bl	d4484 <HAL_USART_Available_Data_For_Write>
   d4d36:	2800      	cmp	r0, #0
   d4d38:	dd05      	ble.n	d4d46 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d3a:	4631      	mov	r1, r6
   d4d3c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d42:	f7ff bb77 	b.w	d4434 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4d46:	4628      	mov	r0, r5
   d4d48:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4d4c:	b510      	push	{r4, lr}
   d4d4e:	4604      	mov	r4, r0
   d4d50:	4608      	mov	r0, r1
   d4d52:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d54:	2200      	movs	r2, #0
   d4d56:	6062      	str	r2, [r4, #4]
   d4d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4d5c:	60a2      	str	r2, [r4, #8]
   d4d5e:	4a05      	ldr	r2, [pc, #20]	; (d4d74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4d60:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4d62:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4d64:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4d66:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4d68:	461a      	mov	r2, r3
   d4d6a:	f7ff fb5b 	bl	d4424 <HAL_USART_Init>
}
   d4d6e:	4620      	mov	r0, r4
   d4d70:	bd10      	pop	{r4, pc}
   d4d72:	bf00      	nop
   d4d74:	000d5748 	.word	0x000d5748

000d4d78 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4d78:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4d7a:	4d0c      	ldr	r5, [pc, #48]	; (d4dac <_Z22__fetch_global_Serial1v+0x34>)
   d4d7c:	6829      	ldr	r1, [r5, #0]
   d4d7e:	f011 0401 	ands.w	r4, r1, #1
   d4d82:	d111      	bne.n	d4da8 <_Z22__fetch_global_Serial1v+0x30>
   d4d84:	4628      	mov	r0, r5
   d4d86:	f7ff f98a 	bl	d409e <__cxa_guard_acquire>
   d4d8a:	b168      	cbz	r0, d4da8 <_Z22__fetch_global_Serial1v+0x30>
   d4d8c:	4a08      	ldr	r2, [pc, #32]	; (d4db0 <_Z22__fetch_global_Serial1v+0x38>)
   d4d8e:	4b09      	ldr	r3, [pc, #36]	; (d4db4 <_Z22__fetch_global_Serial1v+0x3c>)
   d4d90:	4809      	ldr	r0, [pc, #36]	; (d4db8 <_Z22__fetch_global_Serial1v+0x40>)
   d4d92:	4621      	mov	r1, r4
   d4d94:	f7ff ffda 	bl	d4d4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4d98:	4628      	mov	r0, r5
   d4d9a:	f7ff f985 	bl	d40a8 <__cxa_guard_release>
   d4d9e:	4a07      	ldr	r2, [pc, #28]	; (d4dbc <_Z22__fetch_global_Serial1v+0x44>)
   d4da0:	4907      	ldr	r1, [pc, #28]	; (d4dc0 <_Z22__fetch_global_Serial1v+0x48>)
   d4da2:	4805      	ldr	r0, [pc, #20]	; (d4db8 <_Z22__fetch_global_Serial1v+0x40>)
   d4da4:	f000 f99c 	bl	d50e0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4da8:	4803      	ldr	r0, [pc, #12]	; (d4db8 <_Z22__fetch_global_Serial1v+0x40>)
   d4daa:	bd38      	pop	{r3, r4, r5, pc}
   d4dac:	2003e680 	.word	0x2003e680
   d4db0:	2003e684 	.word	0x2003e684
   d4db4:	2003e5fc 	.word	0x2003e5fc
   d4db8:	2003e5e8 	.word	0x2003e5e8
   d4dbc:	2003e3a4 	.word	0x2003e3a4
   d4dc0:	000d4cc9 	.word	0x000d4cc9

000d4dc4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4dc4:	7441      	strb	r1, [r0, #17]
   d4dc6:	4770      	bx	lr

000d4dc8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4dc8:	4770      	bx	lr

000d4dca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4dca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4dcc:	2100      	movs	r1, #0
   d4dce:	7c00      	ldrb	r0, [r0, #16]
   d4dd0:	f7ff fb80 	bl	d44d4 <HAL_USB_USART_Receive_Data>
}
   d4dd4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dd8:	bf28      	it	cs
   d4dda:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4dde:	bd08      	pop	{r3, pc}

000d4de0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4de0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4de2:	2101      	movs	r1, #1
   d4de4:	7c00      	ldrb	r0, [r0, #16]
   d4de6:	f7ff fb75 	bl	d44d4 <HAL_USB_USART_Receive_Data>
}
   d4dea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dee:	bf28      	it	cs
   d4df0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4df4:	bd08      	pop	{r3, pc}

000d4df6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4df6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4df8:	7c00      	ldrb	r0, [r0, #16]
   d4dfa:	f7ff fb63 	bl	d44c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d4dfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e02:	bd08      	pop	{r3, pc}

000d4e04 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4e04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4e06:	7c00      	ldrb	r0, [r0, #16]
   d4e08:	f7ff fb54 	bl	d44b4 <HAL_USB_USART_Available_Data>
}
   d4e0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e10:	bd08      	pop	{r3, pc}

000d4e12 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4e12:	7c00      	ldrb	r0, [r0, #16]
   d4e14:	f7ff bb6e 	b.w	d44f4 <HAL_USB_USART_Flush_Data>

000d4e18 <_ZN9USBSerialD0Ev>:
   d4e18:	b510      	push	{r4, lr}
   d4e1a:	2114      	movs	r1, #20
   d4e1c:	4604      	mov	r4, r0
   d4e1e:	f000 f964 	bl	d50ea <_ZdlPvj>
   d4e22:	4620      	mov	r0, r4
   d4e24:	bd10      	pop	{r4, pc}

000d4e26 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4e26:	b538      	push	{r3, r4, r5, lr}
   d4e28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4e2a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4e2c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4e2e:	f7ff fb49 	bl	d44c4 <HAL_USB_USART_Available_Data_For_Write>
   d4e32:	2800      	cmp	r0, #0
   d4e34:	dc01      	bgt.n	d4e3a <_ZN9USBSerial5writeEh+0x14>
   d4e36:	7c60      	ldrb	r0, [r4, #17]
   d4e38:	b128      	cbz	r0, d4e46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4e3a:	4629      	mov	r1, r5
   d4e3c:	7c20      	ldrb	r0, [r4, #16]
   d4e3e:	f7ff fb51 	bl	d44e4 <HAL_USB_USART_Send_Data>
   d4e42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4e46:	bd38      	pop	{r3, r4, r5, pc}

000d4e48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4e48:	b510      	push	{r4, lr}
   d4e4a:	4604      	mov	r4, r0
   d4e4c:	2300      	movs	r3, #0
   d4e4e:	6063      	str	r3, [r4, #4]
   d4e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e54:	60a3      	str	r3, [r4, #8]
   d4e56:	4b05      	ldr	r3, [pc, #20]	; (d4e6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4e58:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4e5a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4e5c:	4608      	mov	r0, r1
{
  _serial = serial;
   d4e5e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4e60:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4e62:	4611      	mov	r1, r2
   d4e64:	f7ff fb16 	bl	d4494 <HAL_USB_USART_Init>
}
   d4e68:	4620      	mov	r0, r4
   d4e6a:	bd10      	pop	{r4, pc}
   d4e6c:	000d5778 	.word	0x000d5778

000d4e70 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4e70:	2200      	movs	r2, #0
   d4e72:	7c00      	ldrb	r0, [r0, #16]
   d4e74:	f7ff bb16 	b.w	d44a4 <HAL_USB_USART_Begin>

000d4e78 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4e78:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4e7a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4e7c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4e7e:	2100      	movs	r1, #0
   d4e80:	f000 fab1 	bl	d53e6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4e84:	4620      	mov	r0, r4
   d4e86:	bd10      	pop	{r4, pc}

000d4e88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4e88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e8a:	4d0e      	ldr	r5, [pc, #56]	; (d4ec4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4e8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4e8e:	a801      	add	r0, sp, #4
   d4e90:	f7ff fff2 	bl	d4e78 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e94:	6829      	ldr	r1, [r5, #0]
   d4e96:	f011 0401 	ands.w	r4, r1, #1
   d4e9a:	d110      	bne.n	d4ebe <_Z16_fetch_usbserialv+0x36>
   d4e9c:	4628      	mov	r0, r5
   d4e9e:	f7ff f8fe 	bl	d409e <__cxa_guard_acquire>
   d4ea2:	b160      	cbz	r0, d4ebe <_Z16_fetch_usbserialv+0x36>
   d4ea4:	aa01      	add	r2, sp, #4
   d4ea6:	4621      	mov	r1, r4
   d4ea8:	4807      	ldr	r0, [pc, #28]	; (d4ec8 <_Z16_fetch_usbserialv+0x40>)
   d4eaa:	f7ff ffcd 	bl	d4e48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4eae:	4628      	mov	r0, r5
   d4eb0:	f7ff f8fa 	bl	d40a8 <__cxa_guard_release>
   d4eb4:	4a05      	ldr	r2, [pc, #20]	; (d4ecc <_Z16_fetch_usbserialv+0x44>)
   d4eb6:	4906      	ldr	r1, [pc, #24]	; (d4ed0 <_Z16_fetch_usbserialv+0x48>)
   d4eb8:	4803      	ldr	r0, [pc, #12]	; (d4ec8 <_Z16_fetch_usbserialv+0x40>)
   d4eba:	f000 f911 	bl	d50e0 <__aeabi_atexit>
	return _usbserial;
}
   d4ebe:	4802      	ldr	r0, [pc, #8]	; (d4ec8 <_Z16_fetch_usbserialv+0x40>)
   d4ec0:	b007      	add	sp, #28
   d4ec2:	bd30      	pop	{r4, r5, pc}
   d4ec4:	2003e708 	.word	0x2003e708
   d4ec8:	2003e70c 	.word	0x2003e70c
   d4ecc:	2003e3a4 	.word	0x2003e3a4
   d4ed0:	000d4dc9 	.word	0x000d4dc9

000d4ed4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4ed4:	2200      	movs	r2, #0
   d4ed6:	4611      	mov	r1, r2
   d4ed8:	6840      	ldr	r0, [r0, #4]
   d4eda:	f7ff bb57 	b.w	d458c <network_ready>

000d4ede <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ede:	2200      	movs	r2, #0
   d4ee0:	4611      	mov	r1, r2
   d4ee2:	6840      	ldr	r0, [r0, #4]
   d4ee4:	f7ff bb72 	b.w	d45cc <network_listening>

000d4ee8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ee8:	2200      	movs	r2, #0
   d4eea:	4611      	mov	r1, r2
   d4eec:	6840      	ldr	r0, [r0, #4]
   d4eee:	f7ff bb7d 	b.w	d45ec <network_get_listen_timeout>

000d4ef2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ef2:	2200      	movs	r2, #0
   d4ef4:	6840      	ldr	r0, [r0, #4]
   d4ef6:	f7ff bb71 	b.w	d45dc <network_set_listen_timeout>

000d4efa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4efa:	2200      	movs	r2, #0
   d4efc:	f081 0101 	eor.w	r1, r1, #1
   d4f00:	6840      	ldr	r0, [r0, #4]
   d4f02:	f7ff bb5b 	b.w	d45bc <network_listen>

000d4f06 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4f06:	2300      	movs	r3, #0
   d4f08:	461a      	mov	r2, r3
   d4f0a:	4619      	mov	r1, r3
   d4f0c:	6840      	ldr	r0, [r0, #4]
   d4f0e:	f7ff bb4d 	b.w	d45ac <network_off>

000d4f12 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4f12:	2300      	movs	r3, #0
   d4f14:	461a      	mov	r2, r3
   d4f16:	4619      	mov	r1, r3
   d4f18:	6840      	ldr	r0, [r0, #4]
   d4f1a:	f7ff bb3f 	b.w	d459c <network_on>

000d4f1e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f1e:	2200      	movs	r2, #0
   d4f20:	4611      	mov	r1, r2
   d4f22:	6840      	ldr	r0, [r0, #4]
   d4f24:	f7ff bb22 	b.w	d456c <network_connecting>

000d4f28 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f28:	2200      	movs	r2, #0
   d4f2a:	2102      	movs	r1, #2
   d4f2c:	6840      	ldr	r0, [r0, #4]
   d4f2e:	f7ff bb25 	b.w	d457c <network_disconnect>

000d4f32 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f32:	2300      	movs	r3, #0
   d4f34:	461a      	mov	r2, r3
   d4f36:	6840      	ldr	r0, [r0, #4]
   d4f38:	f7ff bb10 	b.w	d455c <network_connect>

000d4f3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4f3c:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4f3e:	2204      	movs	r2, #4
   d4f40:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4f42:	4a02      	ldr	r2, [pc, #8]	; (d4f4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4f44:	601a      	str	r2, [r3, #0]
   d4f46:	4770      	bx	lr
   d4f48:	2003e720 	.word	0x2003e720
   d4f4c:	000d57a8 	.word	0x000d57a8

000d4f50 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4f50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4f52:	4b0c      	ldr	r3, [pc, #48]	; (d4f84 <serialEventRun+0x34>)
   d4f54:	b133      	cbz	r3, d4f64 <serialEventRun+0x14>
   d4f56:	f7ff ff97 	bl	d4e88 <_Z16_fetch_usbserialv>
   d4f5a:	6803      	ldr	r3, [r0, #0]
   d4f5c:	691b      	ldr	r3, [r3, #16]
   d4f5e:	4798      	blx	r3
   d4f60:	2800      	cmp	r0, #0
   d4f62:	dc09      	bgt.n	d4f78 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4f64:	4b08      	ldr	r3, [pc, #32]	; (d4f88 <serialEventRun+0x38>)
   d4f66:	b163      	cbz	r3, d4f82 <serialEventRun+0x32>
   d4f68:	f7ff ff06 	bl	d4d78 <_Z22__fetch_global_Serial1v>
   d4f6c:	6803      	ldr	r3, [r0, #0]
   d4f6e:	691b      	ldr	r3, [r3, #16]
   d4f70:	4798      	blx	r3
   d4f72:	2800      	cmp	r0, #0
   d4f74:	dc03      	bgt.n	d4f7e <serialEventRun+0x2e>
   d4f76:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4f78:	f3af 8000 	nop.w
   d4f7c:	e7f2      	b.n	d4f64 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4f7e:	f3af 8000 	nop.w
   d4f82:	bd08      	pop	{r3, pc}
	...

000d4f8c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4f8c:	b508      	push	{r3, lr}
	serialEventRun();
   d4f8e:	f7ff ffdf 	bl	d4f50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f92:	f7ff f9bf 	bl	d4314 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f96:	4b01      	ldr	r3, [pc, #4]	; (d4f9c <_post_loop+0x10>)
   d4f98:	6018      	str	r0, [r3, #0]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	2003e730 	.word	0x2003e730

000d4fa0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4fa0:	4802      	ldr	r0, [pc, #8]	; (d4fac <_Z33system_initialize_user_backup_ramv+0xc>)
   d4fa2:	4a03      	ldr	r2, [pc, #12]	; (d4fb0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4fa4:	4903      	ldr	r1, [pc, #12]	; (d4fb4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4fa6:	1a12      	subs	r2, r2, r0
   d4fa8:	f000 ba12 	b.w	d53d0 <memcpy>
   d4fac:	2003f400 	.word	0x2003f400
   d4fb0:	2003f404 	.word	0x2003f404
   d4fb4:	000d5880 	.word	0x000d5880

000d4fb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4fb8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4fba:	2300      	movs	r3, #0
   d4fbc:	9300      	str	r3, [sp, #0]
   d4fbe:	461a      	mov	r2, r3
   d4fc0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4fc4:	f7ff fab8 	bl	d4538 <system_ctrl_set_result>
}
   d4fc8:	b003      	add	sp, #12
   d4fca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4fd0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4fd0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4fd2:	8843      	ldrh	r3, [r0, #2]
   d4fd4:	2b0a      	cmp	r3, #10
   d4fd6:	d008      	beq.n	d4fea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4fd8:	2b50      	cmp	r3, #80	; 0x50
   d4fda:	d109      	bne.n	d4ff0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4fdc:	4b09      	ldr	r3, [pc, #36]	; (d5004 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4fde:	681b      	ldr	r3, [r3, #0]
   d4fe0:	b13b      	cbz	r3, d4ff2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4fe2:	b003      	add	sp, #12
   d4fe4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4fe8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4fea:	f7ff ffe5 	bl	d4fb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4fee:	e006      	b.n	d4ffe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ff0:	2300      	movs	r3, #0
   d4ff2:	9300      	str	r3, [sp, #0]
   d4ff4:	461a      	mov	r2, r3
   d4ff6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ffa:	f7ff fa9d 	bl	d4538 <system_ctrl_set_result>
        break;
    }
}
   d4ffe:	b003      	add	sp, #12
   d5000:	f85d fb04 	ldr.w	pc, [sp], #4
   d5004:	2003e728 	.word	0x2003e728

000d5008 <module_user_init_hook>:

void module_user_init_hook()
{
   d5008:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d500a:	4c10      	ldr	r4, [pc, #64]	; (d504c <module_user_init_hook+0x44>)
   d500c:	4d10      	ldr	r5, [pc, #64]	; (d5050 <module_user_init_hook+0x48>)
   d500e:	6823      	ldr	r3, [r4, #0]
   d5010:	42ab      	cmp	r3, r5
   d5012:	4b10      	ldr	r3, [pc, #64]	; (d5054 <module_user_init_hook+0x4c>)
   d5014:	bf0c      	ite	eq
   d5016:	2201      	moveq	r2, #1
   d5018:	2200      	movne	r2, #0
   d501a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d501c:	d002      	beq.n	d5024 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d501e:	f7ff ffbf 	bl	d4fa0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5022:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5024:	f7ff f96e 	bl	d4304 <HAL_RNG_GetRandomNumber>
   d5028:	4604      	mov	r4, r0
    srand(seed);
   d502a:	f000 f9e5 	bl	d53f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d502e:	4b0a      	ldr	r3, [pc, #40]	; (d5058 <module_user_init_hook+0x50>)
   d5030:	b113      	cbz	r3, d5038 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5032:	4620      	mov	r0, r4
   d5034:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5038:	2100      	movs	r1, #0
   d503a:	4807      	ldr	r0, [pc, #28]	; (d5058 <module_user_init_hook+0x50>)
   d503c:	f7ff fa86 	bl	d454c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5040:	2100      	movs	r1, #0
   d5042:	4806      	ldr	r0, [pc, #24]	; (d505c <module_user_init_hook+0x54>)
}
   d5044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5048:	f7ff ba6c 	b.w	d4524 <system_ctrl_set_app_request_handler>
   d504c:	2003f400 	.word	0x2003f400
   d5050:	9a271c1e 	.word	0x9a271c1e
   d5054:	2003e72c 	.word	0x2003e72c
   d5058:	00000000 	.word	0x00000000
   d505c:	000d4fd1 	.word	0x000d4fd1

000d5060 <_Z17acquireWireBufferv>:
   d5060:	b570      	push	{r4, r5, r6, lr}
   d5062:	4604      	mov	r4, r0
   d5064:	2514      	movs	r5, #20
   d5066:	462a      	mov	r2, r5
   d5068:	4e09      	ldr	r6, [pc, #36]	; (d5090 <_Z17acquireWireBufferv+0x30>)
   d506a:	2100      	movs	r1, #0
   d506c:	f000 f9bb 	bl	d53e6 <memset>
   d5070:	8025      	strh	r5, [r4, #0]
   d5072:	2520      	movs	r5, #32
   d5074:	4631      	mov	r1, r6
   d5076:	60a5      	str	r5, [r4, #8]
   d5078:	6125      	str	r5, [r4, #16]
   d507a:	4628      	mov	r0, r5
   d507c:	f000 f84f 	bl	d511e <_ZnajRKSt9nothrow_t>
   d5080:	4631      	mov	r1, r6
   d5082:	6060      	str	r0, [r4, #4]
   d5084:	4628      	mov	r0, r5
   d5086:	f000 f84a 	bl	d511e <_ZnajRKSt9nothrow_t>
   d508a:	60e0      	str	r0, [r4, #12]
   d508c:	4620      	mov	r0, r4
   d508e:	bd70      	pop	{r4, r5, r6, pc}
   d5090:	000d57d4 	.word	0x000d57d4

000d5094 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5094:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5096:	4d0e      	ldr	r5, [pc, #56]	; (d50d0 <_Z19__fetch_global_Wirev+0x3c>)
   d5098:	6829      	ldr	r1, [r5, #0]
   d509a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d509e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d50a0:	d113      	bne.n	d50ca <_Z19__fetch_global_Wirev+0x36>
   d50a2:	4628      	mov	r0, r5
   d50a4:	f7fe fffb 	bl	d409e <__cxa_guard_acquire>
   d50a8:	b178      	cbz	r0, d50ca <_Z19__fetch_global_Wirev+0x36>
   d50aa:	a801      	add	r0, sp, #4
   d50ac:	f7ff ffd8 	bl	d5060 <_Z17acquireWireBufferv>
   d50b0:	aa01      	add	r2, sp, #4
   d50b2:	4621      	mov	r1, r4
   d50b4:	4807      	ldr	r0, [pc, #28]	; (d50d4 <_Z19__fetch_global_Wirev+0x40>)
   d50b6:	f7ff fb45 	bl	d4744 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d50ba:	4628      	mov	r0, r5
   d50bc:	f7fe fff4 	bl	d40a8 <__cxa_guard_release>
   d50c0:	4a05      	ldr	r2, [pc, #20]	; (d50d8 <_Z19__fetch_global_Wirev+0x44>)
   d50c2:	4906      	ldr	r1, [pc, #24]	; (d50dc <_Z19__fetch_global_Wirev+0x48>)
   d50c4:	4803      	ldr	r0, [pc, #12]	; (d50d4 <_Z19__fetch_global_Wirev+0x40>)
   d50c6:	f000 f80b 	bl	d50e0 <__aeabi_atexit>
	return wire;
}
   d50ca:	4802      	ldr	r0, [pc, #8]	; (d50d4 <_Z19__fetch_global_Wirev+0x40>)
   d50cc:	b007      	add	sp, #28
   d50ce:	bd30      	pop	{r4, r5, pc}
   d50d0:	2003e734 	.word	0x2003e734
   d50d4:	2003e738 	.word	0x2003e738
   d50d8:	2003e3a4 	.word	0x2003e3a4
   d50dc:	000d46ed 	.word	0x000d46ed

000d50e0 <__aeabi_atexit>:
   d50e0:	460b      	mov	r3, r1
   d50e2:	4601      	mov	r1, r0
   d50e4:	4618      	mov	r0, r3
   d50e6:	f000 b965 	b.w	d53b4 <__cxa_atexit>

000d50ea <_ZdlPvj>:
   d50ea:	f7fe bfd4 	b.w	d4096 <_ZdlPv>
	...

000d50f0 <_ZSt15get_new_handlerv>:
   d50f0:	4b02      	ldr	r3, [pc, #8]	; (d50fc <_ZSt15get_new_handlerv+0xc>)
   d50f2:	6818      	ldr	r0, [r3, #0]
   d50f4:	f3bf 8f5f 	dmb	sy
   d50f8:	4770      	bx	lr
   d50fa:	bf00      	nop
   d50fc:	2003e74c 	.word	0x2003e74c

000d5100 <_ZnwjRKSt9nothrow_t>:
   d5100:	b510      	push	{r4, lr}
   d5102:	2800      	cmp	r0, #0
   d5104:	bf14      	ite	ne
   d5106:	4604      	movne	r4, r0
   d5108:	2401      	moveq	r4, #1
   d510a:	4620      	mov	r0, r4
   d510c:	f7ff fa76 	bl	d45fc <malloc>
   d5110:	b920      	cbnz	r0, d511c <_ZnwjRKSt9nothrow_t+0x1c>
   d5112:	f7ff ffed 	bl	d50f0 <_ZSt15get_new_handlerv>
   d5116:	b108      	cbz	r0, d511c <_ZnwjRKSt9nothrow_t+0x1c>
   d5118:	4780      	blx	r0
   d511a:	e7f6      	b.n	d510a <_ZnwjRKSt9nothrow_t+0xa>
   d511c:	bd10      	pop	{r4, pc}

000d511e <_ZnajRKSt9nothrow_t>:
   d511e:	f7ff bfef 	b.w	d5100 <_ZnwjRKSt9nothrow_t>
	...

000d5124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5124:	4b24      	ldr	r3, [pc, #144]	; (d51b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5126:	681a      	ldr	r2, [r3, #0]
   d5128:	07d0      	lsls	r0, r2, #31
   d512a:	bf5c      	itt	pl
   d512c:	2201      	movpl	r2, #1
   d512e:	601a      	strpl	r2, [r3, #0]
   d5130:	4b22      	ldr	r3, [pc, #136]	; (d51bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5132:	681a      	ldr	r2, [r3, #0]
   d5134:	07d1      	lsls	r1, r2, #31
   d5136:	bf5c      	itt	pl
   d5138:	2201      	movpl	r2, #1
   d513a:	601a      	strpl	r2, [r3, #0]
   d513c:	4b20      	ldr	r3, [pc, #128]	; (d51c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d513e:	681a      	ldr	r2, [r3, #0]
   d5140:	07d2      	lsls	r2, r2, #31
   d5142:	bf5c      	itt	pl
   d5144:	2201      	movpl	r2, #1
   d5146:	601a      	strpl	r2, [r3, #0]
   d5148:	4b1e      	ldr	r3, [pc, #120]	; (d51c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d514a:	681a      	ldr	r2, [r3, #0]
   d514c:	07d0      	lsls	r0, r2, #31
   d514e:	bf5c      	itt	pl
   d5150:	2201      	movpl	r2, #1
   d5152:	601a      	strpl	r2, [r3, #0]
   d5154:	4b1c      	ldr	r3, [pc, #112]	; (d51c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5156:	681a      	ldr	r2, [r3, #0]
   d5158:	07d1      	lsls	r1, r2, #31
   d515a:	bf5c      	itt	pl
   d515c:	2201      	movpl	r2, #1
   d515e:	601a      	strpl	r2, [r3, #0]
   d5160:	4b1a      	ldr	r3, [pc, #104]	; (d51cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5162:	681a      	ldr	r2, [r3, #0]
   d5164:	07d2      	lsls	r2, r2, #31
   d5166:	bf5c      	itt	pl
   d5168:	2201      	movpl	r2, #1
   d516a:	601a      	strpl	r2, [r3, #0]
   d516c:	4b18      	ldr	r3, [pc, #96]	; (d51d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d516e:	681a      	ldr	r2, [r3, #0]
   d5170:	07d0      	lsls	r0, r2, #31
   d5172:	bf5c      	itt	pl
   d5174:	2201      	movpl	r2, #1
   d5176:	601a      	strpl	r2, [r3, #0]
   d5178:	4b16      	ldr	r3, [pc, #88]	; (d51d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d517a:	681a      	ldr	r2, [r3, #0]
   d517c:	07d1      	lsls	r1, r2, #31
   d517e:	bf5c      	itt	pl
   d5180:	2201      	movpl	r2, #1
   d5182:	601a      	strpl	r2, [r3, #0]
   d5184:	4b14      	ldr	r3, [pc, #80]	; (d51d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5186:	681a      	ldr	r2, [r3, #0]
   d5188:	07d2      	lsls	r2, r2, #31
   d518a:	bf5c      	itt	pl
   d518c:	2201      	movpl	r2, #1
   d518e:	601a      	strpl	r2, [r3, #0]
   d5190:	4b12      	ldr	r3, [pc, #72]	; (d51dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5192:	681a      	ldr	r2, [r3, #0]
   d5194:	07d0      	lsls	r0, r2, #31
   d5196:	bf5c      	itt	pl
   d5198:	2201      	movpl	r2, #1
   d519a:	601a      	strpl	r2, [r3, #0]
   d519c:	4b10      	ldr	r3, [pc, #64]	; (d51e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d519e:	681a      	ldr	r2, [r3, #0]
   d51a0:	07d1      	lsls	r1, r2, #31
   d51a2:	bf5c      	itt	pl
   d51a4:	2201      	movpl	r2, #1
   d51a6:	601a      	strpl	r2, [r3, #0]
   d51a8:	4b0e      	ldr	r3, [pc, #56]	; (d51e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d51aa:	681a      	ldr	r2, [r3, #0]
   d51ac:	07d2      	lsls	r2, r2, #31
   d51ae:	bf5c      	itt	pl
   d51b0:	2201      	movpl	r2, #1
   d51b2:	601a      	strpl	r2, [r3, #0]
   d51b4:	4770      	bx	lr
   d51b6:	bf00      	nop
   d51b8:	2003e77c 	.word	0x2003e77c
   d51bc:	2003e778 	.word	0x2003e778
   d51c0:	2003e774 	.word	0x2003e774
   d51c4:	2003e770 	.word	0x2003e770
   d51c8:	2003e76c 	.word	0x2003e76c
   d51cc:	2003e768 	.word	0x2003e768
   d51d0:	2003e764 	.word	0x2003e764
   d51d4:	2003e760 	.word	0x2003e760
   d51d8:	2003e75c 	.word	0x2003e75c
   d51dc:	2003e758 	.word	0x2003e758
   d51e0:	2003e754 	.word	0x2003e754
   d51e4:	2003e750 	.word	0x2003e750

000d51e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d51e8:	4b18      	ldr	r3, [pc, #96]	; (d524c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d51ea:	681a      	ldr	r2, [r3, #0]
   d51ec:	07d1      	lsls	r1, r2, #31
   d51ee:	bf5c      	itt	pl
   d51f0:	2201      	movpl	r2, #1
   d51f2:	601a      	strpl	r2, [r3, #0]
   d51f4:	4b16      	ldr	r3, [pc, #88]	; (d5250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d51f6:	681a      	ldr	r2, [r3, #0]
   d51f8:	07d2      	lsls	r2, r2, #31
   d51fa:	bf5c      	itt	pl
   d51fc:	2201      	movpl	r2, #1
   d51fe:	601a      	strpl	r2, [r3, #0]
   d5200:	4b14      	ldr	r3, [pc, #80]	; (d5254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5202:	681a      	ldr	r2, [r3, #0]
   d5204:	07d0      	lsls	r0, r2, #31
   d5206:	bf5c      	itt	pl
   d5208:	2201      	movpl	r2, #1
   d520a:	601a      	strpl	r2, [r3, #0]
   d520c:	4b12      	ldr	r3, [pc, #72]	; (d5258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d520e:	681a      	ldr	r2, [r3, #0]
   d5210:	07d1      	lsls	r1, r2, #31
   d5212:	bf5c      	itt	pl
   d5214:	2201      	movpl	r2, #1
   d5216:	601a      	strpl	r2, [r3, #0]
   d5218:	4b10      	ldr	r3, [pc, #64]	; (d525c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d521a:	681a      	ldr	r2, [r3, #0]
   d521c:	07d2      	lsls	r2, r2, #31
   d521e:	bf5c      	itt	pl
   d5220:	2201      	movpl	r2, #1
   d5222:	601a      	strpl	r2, [r3, #0]
   d5224:	4b0e      	ldr	r3, [pc, #56]	; (d5260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5226:	681a      	ldr	r2, [r3, #0]
   d5228:	07d0      	lsls	r0, r2, #31
   d522a:	bf5c      	itt	pl
   d522c:	2201      	movpl	r2, #1
   d522e:	601a      	strpl	r2, [r3, #0]
   d5230:	4b0c      	ldr	r3, [pc, #48]	; (d5264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5232:	681a      	ldr	r2, [r3, #0]
   d5234:	07d1      	lsls	r1, r2, #31
   d5236:	bf5c      	itt	pl
   d5238:	2201      	movpl	r2, #1
   d523a:	601a      	strpl	r2, [r3, #0]
   d523c:	4b0a      	ldr	r3, [pc, #40]	; (d5268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d523e:	681a      	ldr	r2, [r3, #0]
   d5240:	07d2      	lsls	r2, r2, #31
   d5242:	bf5c      	itt	pl
   d5244:	2201      	movpl	r2, #1
   d5246:	601a      	strpl	r2, [r3, #0]
   d5248:	4770      	bx	lr
   d524a:	bf00      	nop
   d524c:	2003e79c 	.word	0x2003e79c
   d5250:	2003e798 	.word	0x2003e798
   d5254:	2003e794 	.word	0x2003e794
   d5258:	2003e790 	.word	0x2003e790
   d525c:	2003e78c 	.word	0x2003e78c
   d5260:	2003e788 	.word	0x2003e788
   d5264:	2003e784 	.word	0x2003e784
   d5268:	2003e780 	.word	0x2003e780

000d526c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d526c:	4b18      	ldr	r3, [pc, #96]	; (d52d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d526e:	681a      	ldr	r2, [r3, #0]
   d5270:	07d1      	lsls	r1, r2, #31
   d5272:	bf5c      	itt	pl
   d5274:	2201      	movpl	r2, #1
   d5276:	601a      	strpl	r2, [r3, #0]
   d5278:	4b16      	ldr	r3, [pc, #88]	; (d52d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d527a:	681a      	ldr	r2, [r3, #0]
   d527c:	07d2      	lsls	r2, r2, #31
   d527e:	bf5c      	itt	pl
   d5280:	2201      	movpl	r2, #1
   d5282:	601a      	strpl	r2, [r3, #0]
   d5284:	4b14      	ldr	r3, [pc, #80]	; (d52d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5286:	681a      	ldr	r2, [r3, #0]
   d5288:	07d0      	lsls	r0, r2, #31
   d528a:	bf5c      	itt	pl
   d528c:	2201      	movpl	r2, #1
   d528e:	601a      	strpl	r2, [r3, #0]
   d5290:	4b12      	ldr	r3, [pc, #72]	; (d52dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5292:	681a      	ldr	r2, [r3, #0]
   d5294:	07d1      	lsls	r1, r2, #31
   d5296:	bf5c      	itt	pl
   d5298:	2201      	movpl	r2, #1
   d529a:	601a      	strpl	r2, [r3, #0]
   d529c:	4b10      	ldr	r3, [pc, #64]	; (d52e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d529e:	681a      	ldr	r2, [r3, #0]
   d52a0:	07d2      	lsls	r2, r2, #31
   d52a2:	bf5c      	itt	pl
   d52a4:	2201      	movpl	r2, #1
   d52a6:	601a      	strpl	r2, [r3, #0]
   d52a8:	4b0e      	ldr	r3, [pc, #56]	; (d52e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d52aa:	681a      	ldr	r2, [r3, #0]
   d52ac:	07d0      	lsls	r0, r2, #31
   d52ae:	bf5c      	itt	pl
   d52b0:	2201      	movpl	r2, #1
   d52b2:	601a      	strpl	r2, [r3, #0]
   d52b4:	4b0c      	ldr	r3, [pc, #48]	; (d52e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d52b6:	681a      	ldr	r2, [r3, #0]
   d52b8:	07d1      	lsls	r1, r2, #31
   d52ba:	bf5c      	itt	pl
   d52bc:	2201      	movpl	r2, #1
   d52be:	601a      	strpl	r2, [r3, #0]
   d52c0:	4b0a      	ldr	r3, [pc, #40]	; (d52ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d52c2:	681a      	ldr	r2, [r3, #0]
   d52c4:	07d2      	lsls	r2, r2, #31
   d52c6:	bf5c      	itt	pl
   d52c8:	2201      	movpl	r2, #1
   d52ca:	601a      	strpl	r2, [r3, #0]
   d52cc:	4770      	bx	lr
   d52ce:	bf00      	nop
   d52d0:	2003e7bc 	.word	0x2003e7bc
   d52d4:	2003e7b8 	.word	0x2003e7b8
   d52d8:	2003e7b4 	.word	0x2003e7b4
   d52dc:	2003e7b0 	.word	0x2003e7b0
   d52e0:	2003e7ac 	.word	0x2003e7ac
   d52e4:	2003e7a8 	.word	0x2003e7a8
   d52e8:	2003e7a4 	.word	0x2003e7a4
   d52ec:	2003e7a0 	.word	0x2003e7a0

000d52f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d52f0:	4b24      	ldr	r3, [pc, #144]	; (d5384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d52f2:	681a      	ldr	r2, [r3, #0]
   d52f4:	07d0      	lsls	r0, r2, #31
   d52f6:	bf5c      	itt	pl
   d52f8:	2201      	movpl	r2, #1
   d52fa:	601a      	strpl	r2, [r3, #0]
   d52fc:	4b22      	ldr	r3, [pc, #136]	; (d5388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d52fe:	681a      	ldr	r2, [r3, #0]
   d5300:	07d1      	lsls	r1, r2, #31
   d5302:	bf5c      	itt	pl
   d5304:	2201      	movpl	r2, #1
   d5306:	601a      	strpl	r2, [r3, #0]
   d5308:	4b20      	ldr	r3, [pc, #128]	; (d538c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d530a:	681a      	ldr	r2, [r3, #0]
   d530c:	07d2      	lsls	r2, r2, #31
   d530e:	bf5c      	itt	pl
   d5310:	2201      	movpl	r2, #1
   d5312:	601a      	strpl	r2, [r3, #0]
   d5314:	4b1e      	ldr	r3, [pc, #120]	; (d5390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5316:	681a      	ldr	r2, [r3, #0]
   d5318:	07d0      	lsls	r0, r2, #31
   d531a:	bf5c      	itt	pl
   d531c:	2201      	movpl	r2, #1
   d531e:	601a      	strpl	r2, [r3, #0]
   d5320:	4b1c      	ldr	r3, [pc, #112]	; (d5394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5322:	681a      	ldr	r2, [r3, #0]
   d5324:	07d1      	lsls	r1, r2, #31
   d5326:	bf5c      	itt	pl
   d5328:	2201      	movpl	r2, #1
   d532a:	601a      	strpl	r2, [r3, #0]
   d532c:	4b1a      	ldr	r3, [pc, #104]	; (d5398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d532e:	681a      	ldr	r2, [r3, #0]
   d5330:	07d2      	lsls	r2, r2, #31
   d5332:	bf5c      	itt	pl
   d5334:	2201      	movpl	r2, #1
   d5336:	601a      	strpl	r2, [r3, #0]
   d5338:	4b18      	ldr	r3, [pc, #96]	; (d539c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d533a:	681a      	ldr	r2, [r3, #0]
   d533c:	07d0      	lsls	r0, r2, #31
   d533e:	bf5c      	itt	pl
   d5340:	2201      	movpl	r2, #1
   d5342:	601a      	strpl	r2, [r3, #0]
   d5344:	4b16      	ldr	r3, [pc, #88]	; (d53a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5346:	681a      	ldr	r2, [r3, #0]
   d5348:	07d1      	lsls	r1, r2, #31
   d534a:	bf5c      	itt	pl
   d534c:	2201      	movpl	r2, #1
   d534e:	601a      	strpl	r2, [r3, #0]
   d5350:	4b14      	ldr	r3, [pc, #80]	; (d53a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5352:	681a      	ldr	r2, [r3, #0]
   d5354:	07d2      	lsls	r2, r2, #31
   d5356:	bf5c      	itt	pl
   d5358:	2201      	movpl	r2, #1
   d535a:	601a      	strpl	r2, [r3, #0]
   d535c:	4b12      	ldr	r3, [pc, #72]	; (d53a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d535e:	681a      	ldr	r2, [r3, #0]
   d5360:	07d0      	lsls	r0, r2, #31
   d5362:	bf5c      	itt	pl
   d5364:	2201      	movpl	r2, #1
   d5366:	601a      	strpl	r2, [r3, #0]
   d5368:	4b10      	ldr	r3, [pc, #64]	; (d53ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d536a:	681a      	ldr	r2, [r3, #0]
   d536c:	07d1      	lsls	r1, r2, #31
   d536e:	bf5c      	itt	pl
   d5370:	2201      	movpl	r2, #1
   d5372:	601a      	strpl	r2, [r3, #0]
   d5374:	4b0e      	ldr	r3, [pc, #56]	; (d53b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5376:	681a      	ldr	r2, [r3, #0]
   d5378:	07d2      	lsls	r2, r2, #31
   d537a:	bf5c      	itt	pl
   d537c:	2201      	movpl	r2, #1
   d537e:	601a      	strpl	r2, [r3, #0]
   d5380:	4770      	bx	lr
   d5382:	bf00      	nop
   d5384:	2003e7ec 	.word	0x2003e7ec
   d5388:	2003e7e8 	.word	0x2003e7e8
   d538c:	2003e7e4 	.word	0x2003e7e4
   d5390:	2003e7e0 	.word	0x2003e7e0
   d5394:	2003e7dc 	.word	0x2003e7dc
   d5398:	2003e7d8 	.word	0x2003e7d8
   d539c:	2003e7d4 	.word	0x2003e7d4
   d53a0:	2003e7d0 	.word	0x2003e7d0
   d53a4:	2003e7cc 	.word	0x2003e7cc
   d53a8:	2003e7c8 	.word	0x2003e7c8
   d53ac:	2003e7c4 	.word	0x2003e7c4
   d53b0:	2003e7c0 	.word	0x2003e7c0

000d53b4 <__cxa_atexit>:
   d53b4:	b510      	push	{r4, lr}
   d53b6:	4c05      	ldr	r4, [pc, #20]	; (d53cc <__cxa_atexit+0x18>)
   d53b8:	4613      	mov	r3, r2
   d53ba:	b12c      	cbz	r4, d53c8 <__cxa_atexit+0x14>
   d53bc:	460a      	mov	r2, r1
   d53be:	4601      	mov	r1, r0
   d53c0:	2002      	movs	r0, #2
   d53c2:	f3af 8000 	nop.w
   d53c6:	bd10      	pop	{r4, pc}
   d53c8:	4620      	mov	r0, r4
   d53ca:	bd10      	pop	{r4, pc}
   d53cc:	00000000 	.word	0x00000000

000d53d0 <memcpy>:
   d53d0:	b510      	push	{r4, lr}
   d53d2:	1e43      	subs	r3, r0, #1
   d53d4:	440a      	add	r2, r1
   d53d6:	4291      	cmp	r1, r2
   d53d8:	d004      	beq.n	d53e4 <memcpy+0x14>
   d53da:	f811 4b01 	ldrb.w	r4, [r1], #1
   d53de:	f803 4f01 	strb.w	r4, [r3, #1]!
   d53e2:	e7f8      	b.n	d53d6 <memcpy+0x6>
   d53e4:	bd10      	pop	{r4, pc}

000d53e6 <memset>:
   d53e6:	4402      	add	r2, r0
   d53e8:	4603      	mov	r3, r0
   d53ea:	4293      	cmp	r3, r2
   d53ec:	d002      	beq.n	d53f4 <memset+0xe>
   d53ee:	f803 1b01 	strb.w	r1, [r3], #1
   d53f2:	e7fa      	b.n	d53ea <memset+0x4>
   d53f4:	4770      	bx	lr
	...

000d53f8 <srand>:
   d53f8:	b538      	push	{r3, r4, r5, lr}
   d53fa:	4b12      	ldr	r3, [pc, #72]	; (d5444 <srand+0x4c>)
   d53fc:	681c      	ldr	r4, [r3, #0]
   d53fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5400:	4605      	mov	r5, r0
   d5402:	b9d3      	cbnz	r3, d543a <srand+0x42>
   d5404:	2018      	movs	r0, #24
   d5406:	f7ff f8f9 	bl	d45fc <malloc>
   d540a:	f243 330e 	movw	r3, #13070	; 0x330e
   d540e:	63a0      	str	r0, [r4, #56]	; 0x38
   d5410:	8003      	strh	r3, [r0, #0]
   d5412:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5416:	8043      	strh	r3, [r0, #2]
   d5418:	f241 2334 	movw	r3, #4660	; 0x1234
   d541c:	8083      	strh	r3, [r0, #4]
   d541e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5422:	80c3      	strh	r3, [r0, #6]
   d5424:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5428:	8103      	strh	r3, [r0, #8]
   d542a:	2305      	movs	r3, #5
   d542c:	8143      	strh	r3, [r0, #10]
   d542e:	230b      	movs	r3, #11
   d5430:	8183      	strh	r3, [r0, #12]
   d5432:	2201      	movs	r2, #1
   d5434:	2300      	movs	r3, #0
   d5436:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d543a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d543c:	2200      	movs	r2, #0
   d543e:	611d      	str	r5, [r3, #16]
   d5440:	615a      	str	r2, [r3, #20]
   d5442:	bd38      	pop	{r3, r4, r5, pc}
   d5444:	2003e3a0 	.word	0x2003e3a0

000d5448 <strlen>:
   d5448:	4603      	mov	r3, r0
   d544a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d544e:	2a00      	cmp	r2, #0
   d5450:	d1fb      	bne.n	d544a <strlen+0x2>
   d5452:	1a18      	subs	r0, r3, r0
   d5454:	3801      	subs	r0, #1
   d5456:	4770      	bx	lr

000d5458 <dynalib_user>:
   d5458:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5468:	0000 0000 7573 6363 7365 2073 203d 4200     ....success = .B
   d5478:	7375 2079 6974 656d 756f 2074 7075 6e6f     usy timeout upon
   d5488:	6520 746e 7265 6e69 2067 6e65 5464 6172      entering endTra
   d5498:	736e 696d 7373 6f69 286e 2029 203d 5300     nsmission() = .S
   d54a8:	4154 5452 6220 7469 6720 6e65 7265 7461     TART bit generat
   d54b8:	6f69 206e 6974 656d 756f 2074 203d 6500     ion timeout = .e
   d54c8:	646e 6f20 2066 6461 7264 7365 2073 7274     nd of address tr
   d54d8:	6e61 6d73 7369 6973 6e6f 7420 6d69 6f65     ansmission timeo
   d54e8:	7475 3d20 0020 6144 6174 6220 7479 2065     ut = .Data byte 
   d54f8:	7274 6e61 6673 7265 7420 6d69 6f65 7475     transfer timeout
   d5508:	3d20 0020 6144 6174 6220 7479 2065 7274      = .Data byte tr
   d5518:	6e61 6673 7265 7320 6375 6563 6465 6465     ansfer succeeded
   d5528:	202c 7562 7973 7420 6d69 6f65 7475 6920     , busy timeout i
   d5538:	6d6d 6465 6169 6574 796c 6120 7466 7265     mmediately after
   d5548:	3d20 0020 6843 6365 736b 6d75 3d20 0020      = .Checksum = .

000d5558 <_ZTVN5spark13EthernetClassE>:
	...
   d5560:	46cd 000d 46c3 000d 46b9 000d 46af 000d     .F...F...F...F..
   d5570:	46a3 000d 4697 000d 468b 000d 4683 000d     .F...F...F...F..
   d5580:	4679 000d 466f 000d 4aa5 000d               yF..oF...J..

000d558c <_ZTV7TwoWire>:
	...
   d5594:	46ed 000d 4737 000d 470f 000d 46ef 000d     .F..7G...G...F..
   d55a4:	4717 000d 471f 000d 4727 000d 472f 000d     .G...G..'G../G..

000d55b4 <_ZTV9IPAddress>:
	...
   d55bc:	47dd 000d 47cd 000d 47cf 000d 6162 6475     .G...G...G..baud
   d55cc:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d55dc:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d55ec:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d55fc:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d560c:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d561c:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d562c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d563c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d564c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d565c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d566c:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d567c:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d568c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d569c:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d56ac <_ZTVN5spark9MeshClassE>:
	...
   d56b4:	491f 000d 4915 000d 490b 000d 4901 000d     .I...I...I...I..
   d56c4:	48f5 000d 48e9 000d 48dd 000d 48d5 000d     .H...H...H...H..
   d56d4:	48cb 000d 48c1 000d 4aa5 000d               .H...H...J..

000d56e0 <_ZTVN5spark12NetworkClassE>:
	...
   d56e8:	4a3d 000d 4a47 000d 4a51 000d 4a5b 000d     =J..GJ..QJ..[J..
   d56f8:	4a65 000d 4a71 000d 4a7d 000d 4a89 000d     eJ..qJ..}J...J..
   d5708:	4a91 000d 4a9b 000d 4aa5 000d 005a 2b25     .J...J...J..Z.%+
   d5718:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d5728:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d5738:	6974 656d 0000 0000                         time....

000d5740 <_ZTV11USARTSerial>:
	...
   d5748:	4cc9 000d 4d19 000d 4d27 000d 4b85 000d     .L...M..'M...K..
   d5758:	4cdd 000d 4cff 000d 4ceb 000d 4d13 000d     .L...L...L...M..
   d5768:	4ccb 000d 4ccf 000d                         .L...L..

000d5770 <_ZTV9USBSerial>:
	...
   d5778:	4dc9 000d 4e19 000d 4e27 000d 4b85 000d     .M...N..'N...K..
   d5788:	4e05 000d 4dcb 000d 4de1 000d 4e13 000d     .N...M...M...N..
   d5798:	4df7 000d 4dc5 000d                         .M...M..

000d57a0 <_ZTVN5spark9WiFiClassE>:
	...
   d57a8:	4f33 000d 4f29 000d 4f1f 000d 4ed5 000d     3O..)O...O...N..
   d57b8:	4f13 000d 4f07 000d 4efb 000d 4ef3 000d     .O...O...N...N..
   d57c8:	4ee9 000d 4edf 000d 4aa5 000d               .N...N...J..

000d57d4 <_ZSt7nothrow>:
   d57d4:	0000 0000                                   ....

000d57d8 <__sf_fake_stdin>:
	...

000d57f8 <__sf_fake_stdout>:
	...

000d5818 <__sf_fake_stderr>:
	...
   d5838:	0043                                        C.

000d583a <link_const_variable_data_end>:
	...

000d583c <link_constructors_location>:
   d583c:	000d42b1 	.word	0x000d42b1
   d5840:	000d4635 	.word	0x000d4635
   d5844:	000d46d9 	.word	0x000d46d9
   d5848:	000d48b1 	.word	0x000d48b1
   d584c:	000d49ed 	.word	0x000d49ed
   d5850:	000d4b71 	.word	0x000d4b71
   d5854:	000d4c45 	.word	0x000d4c45
   d5858:	000d4c81 	.word	0x000d4c81
   d585c:	000d4cb5 	.word	0x000d4cb5
   d5860:	000d4f3d 	.word	0x000d4f3d
   d5864:	000d5125 	.word	0x000d5125
   d5868:	000d51e9 	.word	0x000d51e9
   d586c:	000d526d 	.word	0x000d526d
   d5870:	000d52f1 	.word	0x000d52f1

000d5874 <link_constructors_end>:
	...
