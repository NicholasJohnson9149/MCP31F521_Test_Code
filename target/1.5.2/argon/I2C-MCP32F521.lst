
/Users/nicholas/Documents/Particle/I2C-MCP32F521/target/1.5.2/argon/I2C-MCP32F521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002760  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6780  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e338  000d6784  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000044c  2003e3a4  2003e3a4  0002e3a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d67f0  000d67f0  000267f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6818  000d6818  00026818  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c3ae7  00000000  00000000  0002681c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e680  00000000  00000000  000ea303  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a875  00000000  00000000  000f8983  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002038  00000000  00000000  001131f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003f70  00000000  00000000  00115230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000315f6  00000000  00000000  001191a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021b62  00000000  00000000  0014a796  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106231  00000000  00000000  0016c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bedc  00000000  00000000  0027252c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f907 	bl	d6244 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f90c 	bl	d625a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e338 	.word	0x2003e338
   d404c:	000d6784 	.word	0x000d6784
   d4050:	2003e3a4 	.word	0x2003e3a4
   d4054:	2003e3a4 	.word	0x2003e3a4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fa0d 	bl	d547c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6778 	.word	0x000d6778
   d4084:	000d6740 	.word	0x000d6740

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b922 	b.w	d42d0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f987 	bl	d43a0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 b9b3 	b.w	d5400 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f000 bc03 	b.w	d48a4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bc01 	b.w	d48a4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
   d40b2:	0000      	movs	r0, r0
   d40b4:	0000      	movs	r0, r0
	...

000d40b8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData>:
    Serial.print("Data byte transfer succeeded, busy timeout immediately after = "); Serial.println(i2c_bus_Status);
  }
}

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
   d40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fData->voltageRMS = data->voltageRMS/10.0f;
   d40bc:	8883      	ldrh	r3, [r0, #4]
   d40be:	ee07 3a90 	vmov	s15, r3
   d40c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d40c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d40ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    Serial.print("Data byte transfer succeeded, busy timeout immediately after = "); Serial.println(i2c_bus_Status);
  }
}

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
   d40ce:	4605      	mov	r5, r0
   d40d0:	460c      	mov	r4, r1
  // analogInputVoltage = RegData/1023.0 * 3.3;
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
   d40d2:	260e      	movs	r6, #14
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d40d4:	f04f 0a01 	mov.w	sl, #1
}

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
  fData->currentRMS = data->currentRMS/10000.0f;
   d40d8:	eddf 6a3f 	vldr	s13, [pc, #252]	; d41d8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x120>
  }
}

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
   d40dc:	ed81 7a01 	vstr	s14, [r1, #4]
  fData->currentRMS = data->currentRMS/10000.0f;
   d40e0:	edd0 7a03 	vldr	s15, [r0, #12]
   d40e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d40e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  fData->lineFrequency = data->lineFrequency/1000.0f;
   d40ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; d41dc <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x124>
}

void convertdata(MCP39F521_Data *data, MCP39F521_FormattedData *fData)
{
  fData->voltageRMS = data->voltageRMS/10.0f;
  fData->currentRMS = data->currentRMS/10000.0f;
   d40f0:	ed81 7a05 	vstr	s14, [r1, #20]
  fData->lineFrequency = data->lineFrequency/1000.0f;
   d40f4:	88c3      	ldrh	r3, [r0, #6]
   d40f6:	ee07 3a90 	vmov	s15, r3
   d40fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d40fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4102:	ed81 7a02 	vstr	s14, [r1, #8]
  // Analog Input Voltage represents ADC data for 10 bit ADC
  // By trial, it's been found that it has a ref voltage of 3.3v
  // So the register value/1023 * 3.3v will give the analog input voltage in volts.
  // analogInputVoltage = RegData/1023.0 * 3.3;
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
   d4106:	8903      	ldrh	r3, [r0, #8]
   d4108:	ed9f 7a35 	vldr	s14, [pc, #212]	; d41e0 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x128>
   d410c:	ee07 3a90 	vmov	s15, r3
   d4110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4114:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d4118:	ee16 0a90 	vmov	r0, s13
   d411c:	f001 fce8 	bl	d5af0 <__aeabi_f2d>
   d4120:	a32b      	add	r3, pc, #172	; (adr r3, d41d0 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x118>)
   d4122:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4126:	f001 fd37 	bl	d5b98 <__aeabi_dmul>
   d412a:	f002 f82d 	bl	d6188 <__aeabi_d2f>
   d412e:	60e0      	str	r0, [r4, #12]
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
   d4130:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
   d4134:	ea4f 70db 	mov.w	r0, fp, lsr #31
   d4138:	f001 fcc8 	bl	d5acc <__aeabi_i2d>
   d413c:	f002 f824 	bl	d6188 <__aeabi_d2f>
   d4140:	f080 4700 	eor.w	r7, r0, #2147483648	; 0x80000000
  for(ch=14; ch > 3; ch--)
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d4144:	fa0a f006 	lsl.w	r0, sl, r6
   d4148:	ea00 000b 	and.w	r0, r0, fp
   d414c:	4130      	asrs	r0, r6
   d414e:	f001 fcbd 	bl	d5acc <__aeabi_i2d>
   d4152:	4680      	mov	r8, r0
   d4154:	f1c6 000f 	rsb	r0, r6, #15
   d4158:	fa0a f000 	lsl.w	r0, sl, r0
   d415c:	4689      	mov	r9, r1
   d415e:	f001 fcb5 	bl	d5acc <__aeabi_i2d>
   d4162:	4602      	mov	r2, r0
   d4164:	460b      	mov	r3, r1
   d4166:	4640      	mov	r0, r8
   d4168:	4649      	mov	r1, r9
   d416a:	f001 fe3f 	bl	d5dec <__aeabi_ddiv>
   d416e:	4680      	mov	r8, r0
   d4170:	4638      	mov	r0, r7
   d4172:	4689      	mov	r9, r1
   d4174:	f001 fcbc 	bl	d5af0 <__aeabi_f2d>
   d4178:	4602      	mov	r2, r0
   d417a:	460b      	mov	r3, r1
   d417c:	4640      	mov	r0, r8
   d417e:	4649      	mov	r1, r9
   d4180:	f001 fb58 	bl	d5834 <__adddf3>
   d4184:	f002 f800 	bl	d6188 <__aeabi_d2f>
   d4188:	3e01      	subs	r6, #1
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  for(ch=14; ch > 3; ch--)
   d418a:	2e03      	cmp	r6, #3
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
   d418c:	4607      	mov	r7, r0
  // Do this on the application side?  
  fData->analogInputVoltage = data->analogInputVoltage/1023.0f*3.3;
  float f;
  unsigned char ch;
  f = ((data->powerFactor & 0x8000)>>15) * -1.0;
  for(ch=14; ch > 3; ch--)
   d418e:	d1d9      	bne.n	d4144 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x8c>
    f += ((data->powerFactor & (1 << ch)) >> ch) * 1.0 / (1 << (15 - ch));
  fData->powerFactor = f;
   d4190:	6120      	str	r0, [r4, #16]
  fData->activePower = data->activePower/100.0f;
   d4192:	edd5 7a04 	vldr	s15, [r5, #16]
   d4196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   d419a:	eddf 7a12 	vldr	s15, [pc, #72]	; d41e4 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData+0x12c>
   d419e:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d41a2:	edc4 6a06 	vstr	s13, [r4, #24]
  fData->reactivePower = data->reactivePower/100.0f;
   d41a6:	ed95 7a05 	vldr	s14, [r5, #20]
   d41aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d41ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d41b2:	edc4 6a07 	vstr	s13, [r4, #28]
  fData->apparentPower = data->apparentPower/100.0f;
   d41b6:	ed95 7a06 	vldr	s14, [r5, #24]
   d41ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d41be:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d41c2:	edc4 6a08 	vstr	s13, [r4, #32]
   d41c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d41ca:	bf00      	nop
   d41cc:	f3af 8000 	nop.w
   d41d0:	66666666 	.word	0x66666666
   d41d4:	400a6666 	.word	0x400a6666
   d41d8:	461c4000 	.word	0x461c4000
   d41dc:	447a0000 	.word	0x447a0000
   d41e0:	447fc000 	.word	0x447fc000
   d41e4:	42c80000 	.word	0x42c80000

000d41e8 <_Z18printMCP39F521DataP23MCP39F521_FormattedData>:
}

void printMCP39F521Data(MCP39F521_FormattedData *data)
{
   d41e8:	b510      	push	{r4, lr}
   d41ea:	4604      	mov	r4, r0
  Serial.print(F("Voltage = ")); Serial.println(data->voltageRMS, 4);
   d41ec:	f001 f886 	bl	d52fc <_Z16_fetch_usbserialv>
   d41f0:	492f      	ldr	r1, [pc, #188]	; (d42b0 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xc8>)
   d41f2:	f000 fe52 	bl	d4e9a <_ZN5Print5printEPK19__FlashStringHelper>
   d41f6:	f001 f881 	bl	d52fc <_Z16_fetch_usbserialv>
   d41fa:	ed94 0a01 	vldr	s0, [r4, #4]
   d41fe:	2104      	movs	r1, #4
   d4200:	f000 ff45 	bl	d508e <_ZN5Print7printlnEfi>
  Serial.print(F("Current = ")); Serial.println(data->currentRMS, 4);
   d4204:	f001 f87a 	bl	d52fc <_Z16_fetch_usbserialv>
   d4208:	492a      	ldr	r1, [pc, #168]	; (d42b4 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xcc>)
   d420a:	f000 fe46 	bl	d4e9a <_ZN5Print5printEPK19__FlashStringHelper>
   d420e:	f001 f875 	bl	d52fc <_Z16_fetch_usbserialv>
   d4212:	ed94 0a05 	vldr	s0, [r4, #20]
   d4216:	2104      	movs	r1, #4
   d4218:	f000 ff39 	bl	d508e <_ZN5Print7printlnEfi>
  Serial.print(F("Line Frequency = ")); Serial.println(data->lineFrequency, 4);
   d421c:	f001 f86e 	bl	d52fc <_Z16_fetch_usbserialv>
   d4220:	4925      	ldr	r1, [pc, #148]	; (d42b8 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xd0>)
   d4222:	f000 fe3a 	bl	d4e9a <_ZN5Print5printEPK19__FlashStringHelper>
   d4226:	f001 f869 	bl	d52fc <_Z16_fetch_usbserialv>
   d422a:	ed94 0a02 	vldr	s0, [r4, #8]
   d422e:	2104      	movs	r1, #4
   d4230:	f000 ff2d 	bl	d508e <_ZN5Print7printlnEfi>
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
   d4234:	f001 f862 	bl	d52fc <_Z16_fetch_usbserialv>
   d4238:	4920      	ldr	r1, [pc, #128]	; (d42bc <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xd4>)
   d423a:	f000 fe27 	bl	d4e8c <_ZN5Print5printEPKc>
   d423e:	f001 f85d 	bl	d52fc <_Z16_fetch_usbserialv>
   d4242:	ed94 0a03 	vldr	s0, [r4, #12]
   d4246:	2104      	movs	r1, #4
   d4248:	f000 ff21 	bl	d508e <_ZN5Print7printlnEfi>
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
   d424c:	f001 f856 	bl	d52fc <_Z16_fetch_usbserialv>
   d4250:	491b      	ldr	r1, [pc, #108]	; (d42c0 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xd8>)
   d4252:	f000 fe22 	bl	d4e9a <_ZN5Print5printEPK19__FlashStringHelper>
   d4256:	f001 f851 	bl	d52fc <_Z16_fetch_usbserialv>
   d425a:	ed94 0a04 	vldr	s0, [r4, #16]
   d425e:	2104      	movs	r1, #4
   d4260:	f000 ff15 	bl	d508e <_ZN5Print7printlnEfi>
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
   d4264:	f001 f84a 	bl	d52fc <_Z16_fetch_usbserialv>
   d4268:	4916      	ldr	r1, [pc, #88]	; (d42c4 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xdc>)
   d426a:	f000 fe16 	bl	d4e9a <_ZN5Print5printEPK19__FlashStringHelper>
   d426e:	f001 f845 	bl	d52fc <_Z16_fetch_usbserialv>
   d4272:	ed94 0a06 	vldr	s0, [r4, #24]
   d4276:	2104      	movs	r1, #4
   d4278:	f000 ff09 	bl	d508e <_ZN5Print7printlnEfi>
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
   d427c:	f001 f83e 	bl	d52fc <_Z16_fetch_usbserialv>
   d4280:	4911      	ldr	r1, [pc, #68]	; (d42c8 <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xe0>)
   d4282:	f000 fe0a 	bl	d4e9a <_ZN5Print5printEPK19__FlashStringHelper>
   d4286:	f001 f839 	bl	d52fc <_Z16_fetch_usbserialv>
   d428a:	ed94 0a07 	vldr	s0, [r4, #28]
   d428e:	2104      	movs	r1, #4
   d4290:	f000 fefd 	bl	d508e <_ZN5Print7printlnEfi>
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d4294:	f001 f832 	bl	d52fc <_Z16_fetch_usbserialv>
   d4298:	490c      	ldr	r1, [pc, #48]	; (d42cc <_Z18printMCP39F521DataP23MCP39F521_FormattedData+0xe4>)
   d429a:	f000 fdfe 	bl	d4e9a <_ZN5Print5printEPK19__FlashStringHelper>
   d429e:	f001 f82d 	bl	d52fc <_Z16_fetch_usbserialv>
   d42a2:	ed94 0a08 	vldr	s0, [r4, #32]
   d42a6:	2104      	movs	r1, #4
}
   d42a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.print(F("Line Frequency = ")); Serial.println(data->lineFrequency, 4);
  Serial.print("Analog Input Voltage = "); Serial.println(data->analogInputVoltage, 4);
  Serial.print(F("Power Factor = ")); Serial.println(data->powerFactor, 4);
  Serial.print(F("Active Power = ")); Serial.println(data->activePower, 4);
  Serial.print(F("Reactive Power = ")); Serial.println(data->reactivePower, 4);
  Serial.print(F("Apparent Power = ")); Serial.println(data->apparentPower, 4);
   d42ac:	f000 beef 	b.w	d508e <_ZN5Print7printlnEfi>
   d42b0:	000d630a 	.word	0x000d630a
   d42b4:	000d62e0 	.word	0x000d62e0
   d42b8:	000d62eb 	.word	0x000d62eb
   d42bc:	000d62fd 	.word	0x000d62fd
   d42c0:	000d6315 	.word	0x000d6315
   d42c4:	000d6325 	.word	0x000d6325
   d42c8:	000d6335 	.word	0x000d6335
   d42cc:	000d6347 	.word	0x000d6347

000d42d0 <setup>:
uint8_t byteArray[32];
uint32_t checksumTotal = 0;
uint8_t i2c_bus_Status = 0;
int i;

void setup() {
   d42d0:	b508      	push	{r3, lr}
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d42d2:	480c      	ldr	r0, [pc, #48]	; (d4304 <setup+0x34>)
   d42d4:	2300      	movs	r3, #0
   d42d6:	4619      	mov	r1, r3
   d42d8:	461a      	mov	r2, r3
   d42da:	6840      	ldr	r0, [r0, #4]
   d42dc:	f000 fab2 	bl	d4844 <network_off>
    WiFi.off();
    Serial.begin(115200);
   d42e0:	f001 f80c 	bl	d52fc <_Z16_fetch_usbserialv>
   d42e4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d42e8:	f000 fffc 	bl	d52e4 <_ZN9USBSerial5beginEl>
    Wire.setSpeed(CLOCK_SPEED_100KHZ);
   d42ec:	f001 f90c 	bl	d5508 <_Z19__fetch_global_Wirev>
   d42f0:	4905      	ldr	r1, [pc, #20]	; (d4308 <setup+0x38>)
   d42f2:	f000 fb85 	bl	d4a00 <_ZN7TwoWire8setSpeedEm>
    //Wire.stretchClock(true);
    Wire.begin();
   d42f6:	f001 f907 	bl	d5508 <_Z19__fetch_global_Wirev>
}
   d42fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {
    WiFi.off();
    Serial.begin(115200);
    Wire.setSpeed(CLOCK_SPEED_100KHZ);
    //Wire.stretchClock(true);
    Wire.begin();
   d42fe:	f000 bb83 	b.w	d4a08 <_ZN7TwoWire5beginEv>
   d4302:	bf00      	nop
   d4304:	2003e720 	.word	0x2003e720
   d4308:	000186a0 	.word	0x000186a0

000d430c <_ZN5Print7printlnIhLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d430c:	b538      	push	{r3, r4, r5, lr}
   d430e:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4310:	b91a      	cbnz	r2, d431a <_ZN5Print7printlnIhLi0EEEjT_i+0xe>
        return write(n);
   d4312:	6803      	ldr	r3, [r0, #0]
   d4314:	689b      	ldr	r3, [r3, #8]
   d4316:	4798      	blx	r3
   d4318:	e002      	b.n	d4320 <_ZN5Print7printlnIhLi0EEEjT_i+0x14>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d431a:	b2d2      	uxtb	r2, r2
   d431c:	f000 fdcd 	bl	d4eba <_ZN5Print11printNumberEmh>
   d4320:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4322:	4628      	mov	r0, r5
   d4324:	f000 fdbd 	bl	d4ea2 <_ZN5Print7printlnEv>
        return n;
    }
   d4328:	4420      	add	r0, r4
   d432a:	bd38      	pop	{r3, r4, r5, pc}

000d432c <_Z10wireErrorsh>:
	float activePower;
	float reactivePower;
	float apparentPower;
} MCP39F521_FormattedData;

void wireErrors(uint8_t i2c_bus_Status){
   d432c:	b510      	push	{r4, lr}
  if(i2c_bus_Status == 0){
   d432e:	4604      	mov	r4, r0
   d4330:	b918      	cbnz	r0, d433a <_Z10wireErrorsh+0xe>
    Serial.print("I2C bus Status Success = "); Serial.println(i2c_bus_Status);
   d4332:	f000 ffe3 	bl	d52fc <_Z16_fetch_usbserialv>
   d4336:	4914      	ldr	r1, [pc, #80]	; (d4388 <_Z10wireErrorsh+0x5c>)
   d4338:	e01c      	b.n	d4374 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 1){
   d433a:	2801      	cmp	r0, #1
   d433c:	d103      	bne.n	d4346 <_Z10wireErrorsh+0x1a>
    Serial.print("Busy timeout upon entering endTransmission() = "); Serial.println(i2c_bus_Status);
   d433e:	f000 ffdd 	bl	d52fc <_Z16_fetch_usbserialv>
   d4342:	4912      	ldr	r1, [pc, #72]	; (d438c <_Z10wireErrorsh+0x60>)
   d4344:	e016      	b.n	d4374 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 2){
   d4346:	2802      	cmp	r0, #2
   d4348:	d103      	bne.n	d4352 <_Z10wireErrorsh+0x26>
    Serial.print("Start bit generation timeout = "); Serial.println(i2c_bus_Status);
   d434a:	f000 ffd7 	bl	d52fc <_Z16_fetch_usbserialv>
   d434e:	4910      	ldr	r1, [pc, #64]	; (d4390 <_Z10wireErrorsh+0x64>)
   d4350:	e010      	b.n	d4374 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 3){
   d4352:	2803      	cmp	r0, #3
   d4354:	d103      	bne.n	d435e <_Z10wireErrorsh+0x32>
    Serial.print("end of address transmission timeout = "); Serial.println(i2c_bus_Status);
   d4356:	f000 ffd1 	bl	d52fc <_Z16_fetch_usbserialv>
   d435a:	490e      	ldr	r1, [pc, #56]	; (d4394 <_Z10wireErrorsh+0x68>)
   d435c:	e00a      	b.n	d4374 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 4){
   d435e:	2804      	cmp	r0, #4
   d4360:	d103      	bne.n	d436a <_Z10wireErrorsh+0x3e>
    Serial.print("Data byte transfer timeout = "); Serial.println(i2c_bus_Status);
   d4362:	f000 ffcb 	bl	d52fc <_Z16_fetch_usbserialv>
   d4366:	490c      	ldr	r1, [pc, #48]	; (d4398 <_Z10wireErrorsh+0x6c>)
   d4368:	e004      	b.n	d4374 <_Z10wireErrorsh+0x48>
  }else if(i2c_bus_Status == 5){
   d436a:	2805      	cmp	r0, #5
   d436c:	d10a      	bne.n	d4384 <_Z10wireErrorsh+0x58>
    Serial.print("Data byte transfer succeeded, busy timeout immediately after = "); Serial.println(i2c_bus_Status);
   d436e:	f000 ffc5 	bl	d52fc <_Z16_fetch_usbserialv>
   d4372:	490a      	ldr	r1, [pc, #40]	; (d439c <_Z10wireErrorsh+0x70>)
   d4374:	f000 fd8a 	bl	d4e8c <_ZN5Print5printEPKc>
   d4378:	f000 ffc0 	bl	d52fc <_Z16_fetch_usbserialv>
   d437c:	220a      	movs	r2, #10
   d437e:	4621      	mov	r1, r4
   d4380:	f7ff ffc4 	bl	d430c <_ZN5Print7printlnIhLi0EEEjT_i>
   d4384:	bd10      	pop	{r4, pc}
   d4386:	bf00      	nop
   d4388:	000d6359 	.word	0x000d6359
   d438c:	000d6373 	.word	0x000d6373
   d4390:	000d63a3 	.word	0x000d63a3
   d4394:	000d63c3 	.word	0x000d63c3
   d4398:	000d63ea 	.word	0x000d63ea
   d439c:	000d6408 	.word	0x000d6408

000d43a0 <loop>:
    //Wire.stretchClock(true);
    Wire.begin();
}

void loop() 
{ 
   d43a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MCP39F521_Data data;
  MCP39F521_FormattedData fData;
  ReadDataBuf[0] = 0xA5; // Header
   d43a4:	4b63      	ldr	r3, [pc, #396]	; (d4534 <loop+0x194>)
   d43a6:	4864      	ldr	r0, [pc, #400]	; (d4538 <loop+0x198>)
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
   d43a8:	2102      	movs	r1, #2

void loop() 
{ 
  MCP39F521_Data data;
  MCP39F521_FormattedData fData;
  ReadDataBuf[0] = 0xA5; // Header
   d43aa:	22a5      	movs	r2, #165	; 0xa5
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
   d43ac:	7119      	strb	r1, [r3, #4]
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
   d43ae:	214e      	movs	r1, #78	; 0x4e

void loop() 
{ 
  MCP39F521_Data data;
  MCP39F521_FormattedData fData;
  ReadDataBuf[0] = 0xA5; // Header
   d43b0:	701a      	strb	r2, [r3, #0]
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
   d43b2:	7159      	strb	r1, [r3, #5]
void loop() 
{ 
  MCP39F521_Data data;
  MCP39F521_FormattedData fData;
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
   d43b4:	2208      	movs	r2, #8
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
   d43b6:	2120      	movs	r1, #32
void loop() 
{ 
  MCP39F521_Data data;
  MCP39F521_FormattedData fData;
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
   d43b8:	705a      	strb	r2, [r3, #1]
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
   d43ba:	7199      	strb	r1, [r3, #6]
{ 
  MCP39F521_Data data;
  MCP39F521_FormattedData fData;
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
   d43bc:	2241      	movs	r2, #65	; 0x41
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
   d43be:	215e      	movs	r1, #94	; 0x5e
{ 
  MCP39F521_Data data;
  MCP39F521_FormattedData fData;
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
   d43c0:	709a      	strb	r2, [r3, #2]
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
   d43c2:	71d9      	strb	r1, [r3, #7]
  MCP39F521_Data data;
  MCP39F521_FormattedData fData;
  ReadDataBuf[0] = 0xA5; // Header
  ReadDataBuf[1] = 0x08; // Num bytes
  ReadDataBuf[2] = 0x41; // Command - set address pointer
  ReadDataBuf[3] = 0x00;
   d43c4:	2200      	movs	r2, #0
   d43c6:	6801      	ldr	r1, [r0, #0]
   d43c8:	70da      	strb	r2, [r3, #3]
    //Wire.stretchClock(true);
    Wire.begin();
}

void loop() 
{ 
   d43ca:	b090      	sub	sp, #64	; 0x40
   d43cc:	461c      	mov	r4, r3
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
    checksumTotal += ReadDataBuf[i];
   d43ce:	5ca3      	ldrb	r3, [r4, r2]
   d43d0:	4e58      	ldr	r6, [pc, #352]	; (d4534 <loop+0x194>)
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
   d43d2:	3201      	adds	r2, #1
   d43d4:	2a07      	cmp	r2, #7
    checksumTotal += ReadDataBuf[i];
   d43d6:	4419      	add	r1, r3
  ReadDataBuf[3] = 0x00;
  ReadDataBuf[4] = 0x02;
  ReadDataBuf[5] = 0x4E; // Command - read register, N bytes
  ReadDataBuf[6] = 0x20; 
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
   d43d8:	d1f9      	bne.n	d43ce <loop+0x2e>
   d43da:	4d58      	ldr	r5, [pc, #352]	; (d453c <loop+0x19c>)
   d43dc:	6001      	str	r1, [r0, #0]
   d43de:	602a      	str	r2, [r5, #0]
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
   d43e0:	71f1      	strb	r1, [r6, #7]
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7]);
  Wire.beginTransmission(I2C_ADDRESS);
   d43e2:	4f57      	ldr	r7, [pc, #348]	; (d4540 <loop+0x1a0>)
  ReadDataBuf[7] = 0x5e; // Checksum 0x05E - computed below
  for(i = 0; i < 7; i++) {
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7]);
   d43e4:	f000 ff8a 	bl	d52fc <_Z16_fetch_usbserialv>
   d43e8:	4956      	ldr	r1, [pc, #344]	; (d4544 <loop+0x1a4>)
   d43ea:	f000 fd4f 	bl	d4e8c <_ZN5Print5printEPKc>
   d43ee:	f000 ff85 	bl	d52fc <_Z16_fetch_usbserialv>
   d43f2:	220a      	movs	r2, #10
   d43f4:	79f1      	ldrb	r1, [r6, #7]
   d43f6:	f7ff ff89 	bl	d430c <_ZN5Print7printlnIhLi0EEEjT_i>
  Wire.beginTransmission(I2C_ADDRESS);
   d43fa:	f001 f885 	bl	d5508 <_Z19__fetch_global_Wirev>
   d43fe:	7839      	ldrb	r1, [r7, #0]
   d4400:	f000 fb39 	bl	d4a76 <_ZN7TwoWire17beginTransmissionEh>
  for(i= 0; i < 8; i++) {
   d4404:	2300      	movs	r3, #0
   d4406:	602b      	str	r3, [r5, #0]
   d4408:	46a8      	mov	r8, r5
   d440a:	682b      	ldr	r3, [r5, #0]
   d440c:	4e4b      	ldr	r6, [pc, #300]	; (d453c <loop+0x19c>)
   d440e:	2b07      	cmp	r3, #7
   d4410:	dc0d      	bgt.n	d442e <loop+0x8e>
    Wire.write(ReadDataBuf[i]);
   d4412:	f001 f879 	bl	d5508 <_Z19__fetch_global_Wirev>
   d4416:	f8d8 2000 	ldr.w	r2, [r8]
   d441a:	6803      	ldr	r3, [r0, #0]
   d441c:	5ca1      	ldrb	r1, [r4, r2]
   d441e:	689b      	ldr	r3, [r3, #8]
   d4420:	4798      	blx	r3
    checksumTotal += ReadDataBuf[i];
  }
  ReadDataBuf[7] = checksumTotal % 256; // 0x5E = 94 
  Serial.print("Checksum = "); Serial.println(ReadDataBuf[7]);
  Wire.beginTransmission(I2C_ADDRESS);
  for(i= 0; i < 8; i++) {
   d4422:	f8d8 3000 	ldr.w	r3, [r8]
   d4426:	3301      	adds	r3, #1
   d4428:	f8c8 3000 	str.w	r3, [r8]
   d442c:	e7ed      	b.n	d440a <loop+0x6a>
    Wire.write(ReadDataBuf[i]);
  }
  i2c_bus_Status = Wire.endTransmission(true);
   d442e:	f001 f86b 	bl	d5508 <_Z19__fetch_global_Wirev>
   d4432:	2101      	movs	r1, #1
   d4434:	f000 fb23 	bl	d4a7e <_ZN7TwoWire15endTransmissionEh>
   d4438:	4b43      	ldr	r3, [pc, #268]	; (d4548 <loop+0x1a8>)
   d443a:	4c44      	ldr	r4, [pc, #272]	; (d454c <loop+0x1ac>)
   d443c:	7018      	strb	r0, [r3, #0]
  wireErrors(i2c_bus_Status);
   d443e:	f7ff ff75 	bl	d432c <_Z10wireErrorsh>
  delay(5);
   d4442:	2005      	movs	r0, #5
   d4444:	f000 fa36 	bl	d48b4 <delay>

  Wire.requestFrom(I2C_ADDRESS, (uint8_t)32); // request the bytes
   d4448:	f001 f85e 	bl	d5508 <_Z19__fetch_global_Wirev>
   d444c:	2220      	movs	r2, #32
   d444e:	7839      	ldrb	r1, [r7, #0]
   d4450:	f000 fb0e 	bl	d4a70 <_ZN7TwoWire11requestFromEhj>
  size_t bytes_read = Wire.requestFrom(I2C_ADDRESS, I2C_BUFFER_SIZE);
   d4454:	f001 f858 	bl	d5508 <_Z19__fetch_global_Wirev>
   d4458:	2220      	movs	r2, #32
   d445a:	7839      	ldrb	r1, [r7, #0]
   d445c:	f000 fb08 	bl	d4a70 <_ZN7TwoWire11requestFromEhj>
  //uint8_t baseline[I2C_BUFFER_SIZE];
  if ( bytes_read == I2C_BUFFER_SIZE ) {
   d4460:	2820      	cmp	r0, #32
   d4462:	d123      	bne.n	d44ac <loop+0x10c>
    int requestDataLength = Wire.available();
   d4464:	f001 f850 	bl	d5508 <_Z19__fetch_global_Wirev>
   d4468:	6803      	ldr	r3, [r0, #0]
   d446a:	691b      	ldr	r3, [r3, #16]
   d446c:	4798      	blx	r3
    // if (requestDataLength==(numBytesToRead + 3)) {
      for (i = 0; i < requestDataLength ; i++) {
   d446e:	2300      	movs	r3, #0

  Wire.requestFrom(I2C_ADDRESS, (uint8_t)32); // request the bytes
  size_t bytes_read = Wire.requestFrom(I2C_ADDRESS, I2C_BUFFER_SIZE);
  //uint8_t baseline[I2C_BUFFER_SIZE];
  if ( bytes_read == I2C_BUFFER_SIZE ) {
    int requestDataLength = Wire.available();
   d4470:	4680      	mov	r8, r0
    // if (requestDataLength==(numBytesToRead + 3)) {
      for (i = 0; i < requestDataLength ; i++) {
   d4472:	6033      	str	r3, [r6, #0]
   d4474:	682b      	ldr	r3, [r5, #0]
   d4476:	4598      	cmp	r8, r3
   d4478:	dd18      	ble.n	d44ac <loop+0x10c>
        byteArray[requestDataLength - i] = Wire.read();
   d447a:	ebc3 0708 	rsb	r7, r3, r8
   d447e:	f001 f843 	bl	d5508 <_Z19__fetch_global_Wirev>
   d4482:	6803      	ldr	r3, [r0, #0]
   d4484:	695b      	ldr	r3, [r3, #20]
   d4486:	4798      	blx	r3
   d4488:	55e0      	strb	r0, [r4, r7]
        Serial.print(byteArray[requestDataLength - i], HEX); Serial.print(" ");
   d448a:	f000 ff37 	bl	d52fc <_Z16_fetch_usbserialv>
   d448e:	6833      	ldr	r3, [r6, #0]
   d4490:	ebc3 0308 	rsb	r3, r3, r8
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4494:	2210      	movs	r2, #16
   d4496:	5ce1      	ldrb	r1, [r4, r3]
   d4498:	f000 fd0f 	bl	d4eba <_ZN5Print11printNumberEmh>
   d449c:	f000 ff2e 	bl	d52fc <_Z16_fetch_usbserialv>
   d44a0:	492b      	ldr	r1, [pc, #172]	; (d4550 <loop+0x1b0>)
   d44a2:	f000 fcf3 	bl	d4e8c <_ZN5Print5printEPKc>
  size_t bytes_read = Wire.requestFrom(I2C_ADDRESS, I2C_BUFFER_SIZE);
  //uint8_t baseline[I2C_BUFFER_SIZE];
  if ( bytes_read == I2C_BUFFER_SIZE ) {
    int requestDataLength = Wire.available();
    // if (requestDataLength==(numBytesToRead + 3)) {
      for (i = 0; i < requestDataLength ; i++) {
   d44a6:	6833      	ldr	r3, [r6, #0]
   d44a8:	3301      	adds	r3, #1
   d44aa:	e7e2      	b.n	d4472 <loop+0xd2>
        Serial.print(byteArray[requestDataLength - i], HEX); Serial.print(" ");
      }
    // }
  }

  Serial.print("\n");
   d44ac:	f000 ff26 	bl	d52fc <_Z16_fetch_usbserialv>
   d44b0:	4928      	ldr	r1, [pc, #160]	; (d4554 <loop+0x1b4>)
   d44b2:	f000 fceb 	bl	d4e8c <_ZN5Print5printEPKc>
  data.systemStatus = ((byteArray[3] << 8) | byteArray[2]);
   d44b6:	78e2      	ldrb	r2, [r4, #3]
   d44b8:	78a3      	ldrb	r3, [r4, #2]
   d44ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44be:	f8ad 3000 	strh.w	r3, [sp]
  data.systemVersion = ((byteArray[5] << 8) | byteArray[4]);
   d44c2:	7962      	ldrb	r2, [r4, #5]
   d44c4:	7923      	ldrb	r3, [r4, #4]
   d44c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44ca:	f8ad 3002 	strh.w	r3, [sp, #2]
  data.voltageRMS = ((byteArray[7] << 8) | byteArray[6]);
   d44ce:	79e2      	ldrb	r2, [r4, #7]
   d44d0:	79a3      	ldrb	r3, [r4, #6]
   d44d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44d6:	f8ad 3004 	strh.w	r3, [sp, #4]
  data.lineFrequency = ((byteArray[9] << 8) | byteArray[8]);
   d44da:	7a62      	ldrb	r2, [r4, #9]
   d44dc:	7a23      	ldrb	r3, [r4, #8]
   d44de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44e2:	f8ad 3006 	strh.w	r3, [sp, #6]
  data.analogInputVoltage = ((byteArray[11] << 8) | byteArray[10]);
   d44e6:	7ae2      	ldrb	r2, [r4, #11]
   d44e8:	7aa3      	ldrb	r3, [r4, #10]
   d44ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44ee:	f8ad 3008 	strh.w	r3, [sp, #8]
  data.powerFactor = (((signed char)byteArray[13] << 8) +
                          (unsigned char)byteArray[12]);
   d44f2:	f994 200d 	ldrsb.w	r2, [r4, #13]
   d44f6:	7b23      	ldrb	r3, [r4, #12]
   d44f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d44fc:	f8ad 300a 	strh.w	r3, [sp, #10]
  data.currentRMS =      ((uint32_t)(byteArray[17]) << 24 |
                            (uint32_t)(byteArray[16]) << 16 |
                            (uint32_t)(byteArray[15]) << 8 |
   d4500:	f8d4 300e 	ldr.w	r3, [r4, #14]
                            byteArray[14]);
   d4504:	9303      	str	r3, [sp, #12]
  data.activePower =     ((uint32_t)(byteArray[21]) << 24 |
                            (uint32_t)(byteArray[20]) << 16 |
                            (uint32_t)(byteArray[19]) << 8 |
   d4506:	f8d4 3012 	ldr.w	r3, [r4, #18]
                            byteArray[18]);
   d450a:	9304      	str	r3, [sp, #16]
  data.reactivePower =   ((uint32_t)(byteArray[25]) << 24 |
                            (uint32_t)(byteArray[24]) << 16 |
                            (uint32_t)(byteArray[23]) << 8 |
   d450c:	f8d4 3016 	ldr.w	r3, [r4, #22]
                            byteArray[22]);
   d4510:	9305      	str	r3, [sp, #20]
  data.apparentPower =   ((uint32_t)(byteArray[29]) << 24 |
                            (uint32_t)(byteArray[28]) << 16 |
                            (uint32_t)(byteArray[27]) << 8 |
                            byteArray[26]);
  convertdata(&data, &fData);
   d4512:	a907      	add	r1, sp, #28
                            (uint32_t)(byteArray[24]) << 16 |
                            (uint32_t)(byteArray[23]) << 8 |
                            byteArray[22]);
  data.apparentPower =   ((uint32_t)(byteArray[29]) << 24 |
                            (uint32_t)(byteArray[28]) << 16 |
                            (uint32_t)(byteArray[27]) << 8 |
   d4514:	f8d4 301a 	ldr.w	r3, [r4, #26]
                            byteArray[26]);
   d4518:	9306      	str	r3, [sp, #24]
  convertdata(&data, &fData);
   d451a:	4668      	mov	r0, sp
   d451c:	f7ff fdcc 	bl	d40b8 <_Z11convertdataP14MCP39F521_DataP23MCP39F521_FormattedData>
  printMCP39F521Data(&fData);
   d4520:	a807      	add	r0, sp, #28
   d4522:	f7ff fe61 	bl	d41e8 <_Z18printMCP39F521DataP23MCP39F521_FormattedData>
  delay(1000);
   d4526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d452a:	f000 f9c3 	bl	d48b4 <delay>
   d452e:	b010      	add	sp, #64	; 0x40
   d4530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4534:	2003e3d0 	.word	0x2003e3d0
   d4538:	2003e3ac 	.word	0x2003e3ac
   d453c:	2003e3a8 	.word	0x2003e3a8
   d4540:	2003e338 	.word	0x2003e338
   d4544:	000d6448 	.word	0x000d6448
   d4548:	2003e3d8 	.word	0x2003e3d8
   d454c:	2003e3b0 	.word	0x2003e3b0
   d4550:	000d6549 	.word	0x000d6549
   d4554:	000d656a 	.word	0x000d656a

000d4558 <_GLOBAL__sub_I__Z10wireErrorsh>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4558:	f000 b838 	b.w	d45cc <HAL_Pin_Map>

000d455c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <os_thread_is_current+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	689b      	ldr	r3, [r3, #8]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030248 	.word	0x00030248

000d456c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <os_thread_join+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	691b      	ldr	r3, [r3, #16]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030248 	.word	0x00030248

000d457c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <os_thread_cleanup+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	695b      	ldr	r3, [r3, #20]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030248 	.word	0x00030248

000d458c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <os_mutex_recursive_create+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030248 	.word	0x00030248

000d459c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <os_mutex_recursive_destroy+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030248 	.word	0x00030248

000d45ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_RNG_GetRandomNumber+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	685b      	ldr	r3, [r3, #4]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030218 	.word	0x00030218

000d45bc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	695b      	ldr	r3, [r3, #20]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030218 	.word	0x00030218

000d45cc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <HAL_Pin_Map+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	681b      	ldr	r3, [r3, #0]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003022c 	.word	0x0003022c

000d45dc <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <HAL_I2C_Set_Speed+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	681b      	ldr	r3, [r3, #0]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030228 	.word	0x00030228

000d45ec <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <HAL_I2C_Begin+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	68db      	ldr	r3, [r3, #12]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030228 	.word	0x00030228

000d45fc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <HAL_I2C_Begin_Transmission+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	699b      	ldr	r3, [r3, #24]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030228 	.word	0x00030228

000d460c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <HAL_I2C_End_Transmission+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	69db      	ldr	r3, [r3, #28]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030228 	.word	0x00030228

000d461c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <HAL_I2C_Write_Data+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	6a1b      	ldr	r3, [r3, #32]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030228 	.word	0x00030228

000d462c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <HAL_I2C_Available_Data+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030228 	.word	0x00030228

000d463c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <HAL_I2C_Read_Data+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	00030228 	.word	0x00030228

000d464c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <HAL_I2C_Peek_Data+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030228 	.word	0x00030228

000d465c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <HAL_I2C_Flush_Data+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030228 	.word	0x00030228

000d466c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <HAL_I2C_Init+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030228 	.word	0x00030228

000d467c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_I2C_Request_Data_Ex+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030228 	.word	0x00030228

000d468c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <inet_inet_ntop+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	695b      	ldr	r3, [r3, #20]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030264 	.word	0x00030264

000d469c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <netdb_freeaddrinfo+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	689b      	ldr	r3, [r3, #8]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030268 	.word	0x00030268

000d46ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <netdb_getaddrinfo+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	68db      	ldr	r3, [r3, #12]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030268 	.word	0x00030268

000d46bc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <HAL_USART_Init+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	681b      	ldr	r3, [r3, #0]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	0003023c 	.word	0x0003023c

000d46cc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <HAL_USART_Write_Data+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	68db      	ldr	r3, [r3, #12]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	0003023c 	.word	0x0003023c

000d46dc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <HAL_USART_Available_Data+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	691b      	ldr	r3, [r3, #16]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	0003023c 	.word	0x0003023c

000d46ec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <HAL_USART_Read_Data+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	695b      	ldr	r3, [r3, #20]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	0003023c 	.word	0x0003023c

000d46fc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <HAL_USART_Peek_Data+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	699b      	ldr	r3, [r3, #24]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	0003023c 	.word	0x0003023c

000d470c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <HAL_USART_Flush_Data+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	69db      	ldr	r3, [r3, #28]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	0003023c 	.word	0x0003023c

000d471c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <HAL_USART_Available_Data_For_Write+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	0003023c 	.word	0x0003023c

000d472c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <HAL_USB_USART_Init+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	681b      	ldr	r3, [r3, #0]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	0003024c 	.word	0x0003024c

000d473c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <HAL_USB_USART_Begin+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	685b      	ldr	r3, [r3, #4]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	0003024c 	.word	0x0003024c

000d474c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <HAL_USB_USART_Available_Data+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	691b      	ldr	r3, [r3, #16]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	0003024c 	.word	0x0003024c

000d475c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	695b      	ldr	r3, [r3, #20]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	0003024c 	.word	0x0003024c

000d476c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <HAL_USB_USART_Receive_Data+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	699b      	ldr	r3, [r3, #24]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	0003024c 	.word	0x0003024c

000d477c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <HAL_USB_USART_Send_Data+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	69db      	ldr	r3, [r3, #28]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003024c 	.word	0x0003024c

000d478c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <HAL_USB_USART_Flush_Data+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6a1b      	ldr	r3, [r3, #32]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003024c 	.word	0x0003024c

000d479c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <set_system_mode+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	685b      	ldr	r3, [r3, #4]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030220 	.word	0x00030220

000d47ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <system_delay_ms+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	695b      	ldr	r3, [r3, #20]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030220 	.word	0x00030220

000d47bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b03      	ldr	r3, [pc, #12]	; (d47cc <system_ctrl_set_app_request_handler+0x10>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d47c6:	9301      	str	r3, [sp, #4]
   d47c8:	bd08      	pop	{r3, pc}
   d47ca:	0000      	.short	0x0000
   d47cc:	00030220 	.word	0x00030220

000d47d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b03      	ldr	r3, [pc, #12]	; (d47e0 <system_ctrl_set_result+0x10>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d47da:	9301      	str	r3, [sp, #4]
   d47dc:	bd08      	pop	{r3, pc}
   d47de:	0000      	.short	0x0000
   d47e0:	00030220 	.word	0x00030220

000d47e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	00030244 	.word	0x00030244

000d47f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <network_connect+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	685b      	ldr	r3, [r3, #4]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	00030240 	.word	0x00030240

000d4804 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <network_connecting+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	689b      	ldr	r3, [r3, #8]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	00030240 	.word	0x00030240

000d4814 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <network_disconnect+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	68db      	ldr	r3, [r3, #12]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	00030240 	.word	0x00030240

000d4824 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <network_ready+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	691b      	ldr	r3, [r3, #16]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	00030240 	.word	0x00030240

000d4834 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <network_on+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	695b      	ldr	r3, [r3, #20]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	00030240 	.word	0x00030240

000d4844 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <network_off+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	699b      	ldr	r3, [r3, #24]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030240 	.word	0x00030240

000d4854 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <network_listen+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	69db      	ldr	r3, [r3, #28]
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030240 	.word	0x00030240

000d4864 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <network_listening+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6a1b      	ldr	r3, [r3, #32]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030240 	.word	0x00030240

000d4874 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <network_set_listen_timeout+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030240 	.word	0x00030240

000d4884 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <network_get_listen_timeout+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030240 	.word	0x00030240

000d4894 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <malloc+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	681b      	ldr	r3, [r3, #0]
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	0003021c 	.word	0x0003021c

000d48a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <free+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	685b      	ldr	r3, [r3, #4]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	0003021c 	.word	0x0003021c

000d48b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d48b4:	2100      	movs	r1, #0
   d48b6:	f7ff bf79 	b.w	d47ac <system_delay_ms>

000d48ba <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d48ba:	b510      	push	{r4, lr}
   d48bc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d48be:	6800      	ldr	r0, [r0, #0]
   d48c0:	b108      	cbz	r0, d48c6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d48c2:	f7ff fe6b 	bl	d459c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d48c6:	4620      	mov	r0, r4
   d48c8:	bd10      	pop	{r4, pc}
	...

000d48cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48cc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48ce:	4c06      	ldr	r4, [pc, #24]	; (d48e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d48d0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d48d2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48d4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d48d6:	f7ff fe59 	bl	d458c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d48da:	4620      	mov	r0, r4
   d48dc:	4a03      	ldr	r2, [pc, #12]	; (d48ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d48de:	4904      	ldr	r1, [pc, #16]	; (d48f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d48e4:	f000 be36 	b.w	d5554 <__aeabi_atexit>
   d48e8:	2003e3dc 	.word	0x2003e3dc
   d48ec:	2003e3a4 	.word	0x2003e3a4
   d48f0:	000d48bb 	.word	0x000d48bb

000d48f4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48f4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48f6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48f8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48fa:	b113      	cbz	r3, d4902 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48fc:	2203      	movs	r2, #3
   d48fe:	4601      	mov	r1, r0
   d4900:	4798      	blx	r3
    }
   d4902:	4620      	mov	r0, r4
   d4904:	bd10      	pop	{r4, pc}

000d4906 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4906:	2200      	movs	r2, #0
   d4908:	4611      	mov	r1, r2
   d490a:	6840      	ldr	r0, [r0, #4]
   d490c:	f7ff bfaa 	b.w	d4864 <network_listening>

000d4910 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4910:	2200      	movs	r2, #0
   d4912:	4611      	mov	r1, r2
   d4914:	6840      	ldr	r0, [r0, #4]
   d4916:	f7ff bfb5 	b.w	d4884 <network_get_listen_timeout>

000d491a <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d491a:	2200      	movs	r2, #0
   d491c:	6840      	ldr	r0, [r0, #4]
   d491e:	f7ff bfa9 	b.w	d4874 <network_set_listen_timeout>

000d4922 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4922:	2200      	movs	r2, #0
   d4924:	f081 0101 	eor.w	r1, r1, #1
   d4928:	6840      	ldr	r0, [r0, #4]
   d492a:	f7ff bf93 	b.w	d4854 <network_listen>

000d492e <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d492e:	2300      	movs	r3, #0
   d4930:	461a      	mov	r2, r3
   d4932:	4619      	mov	r1, r3
   d4934:	6840      	ldr	r0, [r0, #4]
   d4936:	f7ff bf85 	b.w	d4844 <network_off>

000d493a <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d493a:	2300      	movs	r3, #0
   d493c:	461a      	mov	r2, r3
   d493e:	4619      	mov	r1, r3
   d4940:	6840      	ldr	r0, [r0, #4]
   d4942:	f7ff bf77 	b.w	d4834 <network_on>

000d4946 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4946:	2200      	movs	r2, #0
   d4948:	4611      	mov	r1, r2
   d494a:	6840      	ldr	r0, [r0, #4]
   d494c:	f7ff bf6a 	b.w	d4824 <network_ready>

000d4950 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4950:	2200      	movs	r2, #0
   d4952:	4611      	mov	r1, r2
   d4954:	6840      	ldr	r0, [r0, #4]
   d4956:	f7ff bf55 	b.w	d4804 <network_connecting>

000d495a <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d495a:	2200      	movs	r2, #0
   d495c:	2102      	movs	r1, #2
   d495e:	6840      	ldr	r0, [r0, #4]
   d4960:	f7ff bf58 	b.w	d4814 <network_disconnect>

000d4964 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4964:	2300      	movs	r3, #0
   d4966:	461a      	mov	r2, r3
   d4968:	6840      	ldr	r0, [r0, #4]
   d496a:	f7ff bf43 	b.w	d47f4 <network_connect>
	...

000d4970 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4970:	4b02      	ldr	r3, [pc, #8]	; (d497c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4972:	2203      	movs	r2, #3
   d4974:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4976:	4a02      	ldr	r2, [pc, #8]	; (d4980 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4978:	601a      	str	r2, [r3, #0]
   d497a:	4770      	bx	lr
   d497c:	2003e3e0 	.word	0x2003e3e0
   d4980:	000d645c 	.word	0x000d645c

000d4984 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4984:	4770      	bx	lr

000d4986 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4988:	4606      	mov	r6, r0
   d498a:	4615      	mov	r5, r2
   d498c:	460c      	mov	r4, r1
   d498e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4990:	42bc      	cmp	r4, r7
   d4992:	d006      	beq.n	d49a2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4994:	6833      	ldr	r3, [r6, #0]
   d4996:	f814 1b01 	ldrb.w	r1, [r4], #1
   d499a:	689b      	ldr	r3, [r3, #8]
   d499c:	4630      	mov	r0, r6
   d499e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d49a0:	e7f6      	b.n	d4990 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d49a2:	4628      	mov	r0, r5
   d49a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d49a6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d49a6:	2200      	movs	r2, #0
   d49a8:	7c00      	ldrb	r0, [r0, #16]
   d49aa:	f7ff be37 	b.w	d461c <HAL_I2C_Write_Data>

000d49ae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d49ae:	2100      	movs	r1, #0
   d49b0:	7c00      	ldrb	r0, [r0, #16]
   d49b2:	f7ff be3b 	b.w	d462c <HAL_I2C_Available_Data>

000d49b6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d49b6:	2100      	movs	r1, #0
   d49b8:	7c00      	ldrb	r0, [r0, #16]
   d49ba:	f7ff be3f 	b.w	d463c <HAL_I2C_Read_Data>

000d49be <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d49be:	2100      	movs	r1, #0
   d49c0:	7c00      	ldrb	r0, [r0, #16]
   d49c2:	f7ff be43 	b.w	d464c <HAL_I2C_Peek_Data>

000d49c6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d49c6:	2100      	movs	r1, #0
   d49c8:	7c00      	ldrb	r0, [r0, #16]
   d49ca:	f7ff be47 	b.w	d465c <HAL_I2C_Flush_Data>

000d49ce <_ZN7TwoWireD0Ev>:
   d49ce:	b510      	push	{r4, lr}
   d49d0:	2114      	movs	r1, #20
   d49d2:	4604      	mov	r4, r0
   d49d4:	f000 fdc3 	bl	d555e <_ZdlPvj>
   d49d8:	4620      	mov	r0, r4
   d49da:	bd10      	pop	{r4, pc}

000d49dc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d49dc:	b510      	push	{r4, lr}
   d49de:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d49e0:	2300      	movs	r3, #0
   d49e2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d49e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49e8:	60a3      	str	r3, [r4, #8]
   d49ea:	4b04      	ldr	r3, [pc, #16]	; (d49fc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d49ec:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d49ee:	4608      	mov	r0, r1
   d49f0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d49f2:	4611      	mov	r1, r2
   d49f4:	f7ff fe3a 	bl	d466c <HAL_I2C_Init>
}
   d49f8:	4620      	mov	r0, r4
   d49fa:	bd10      	pop	{r4, pc}
   d49fc:	000d6490 	.word	0x000d6490

000d4a00 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
   d4a00:	2200      	movs	r2, #0
   d4a02:	7c00      	ldrb	r0, [r0, #16]
   d4a04:	f7ff bdea 	b.w	d45dc <HAL_I2C_Set_Speed>

000d4a08 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4a08:	2300      	movs	r3, #0
   d4a0a:	461a      	mov	r2, r3
   d4a0c:	4619      	mov	r1, r3
   d4a0e:	7c00      	ldrb	r0, [r0, #16]
   d4a10:	f7ff bdec 	b.w	d45ec <HAL_I2C_Begin>

000d4a14 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4a14:	b570      	push	{r4, r5, r6, lr}
   d4a16:	460c      	mov	r4, r1
   d4a18:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d4a1a:	2514      	movs	r5, #20
   d4a1c:	4606      	mov	r6, r0
   d4a1e:	462a      	mov	r2, r5
   d4a20:	2100      	movs	r1, #0
   d4a22:	a801      	add	r0, sp, #4
   d4a24:	f001 fc19 	bl	d625a <memset>
   d4a28:	7823      	ldrb	r3, [r4, #0]
   d4a2a:	f88d 3008 	strb.w	r3, [sp, #8]
   d4a2e:	6863      	ldr	r3, [r4, #4]
   d4a30:	9303      	str	r3, [sp, #12]
   d4a32:	68e3      	ldr	r3, [r4, #12]
   d4a34:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d4a36:	2200      	movs	r2, #0
   d4a38:	7a23      	ldrb	r3, [r4, #8]
   d4a3a:	7c30      	ldrb	r0, [r6, #16]
   d4a3c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4a40:	a901      	add	r1, sp, #4
   d4a42:	9305      	str	r3, [sp, #20]
   d4a44:	f7ff fe1a 	bl	d467c <HAL_I2C_Request_Data_Ex>
}
   d4a48:	b006      	add	sp, #24
   d4a4a:	bd70      	pop	{r4, r5, r6, pc}

000d4a4c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d4a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4a4e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4a50:	f88d 1000 	strb.w	r1, [sp]
   d4a54:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4a58:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4a5a:	bf18      	it	ne
   d4a5c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4a5e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d4a60:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d4a62:	f88d 3008 	strb.w	r3, [sp, #8]
   d4a66:	f7ff ffd5 	bl	d4a14 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4a6a:	b005      	add	sp, #20
   d4a6c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a70 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d4a70:	2301      	movs	r3, #1
   d4a72:	f7ff bfeb 	b.w	d4a4c <_ZN7TwoWire11requestFromEhjh>

000d4a76 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4a76:	2200      	movs	r2, #0
   d4a78:	7c00      	ldrb	r0, [r0, #16]
   d4a7a:	f7ff bdbf 	b.w	d45fc <HAL_I2C_Begin_Transmission>

000d4a7e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4a7e:	2200      	movs	r2, #0
   d4a80:	7c00      	ldrb	r0, [r0, #16]
   d4a82:	f7ff bdc3 	b.w	d460c <HAL_I2C_End_Transmission>

000d4a86 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4a86:	4770      	bx	lr

000d4a88 <_ZN9IPAddressD0Ev>:
   d4a88:	b510      	push	{r4, lr}
   d4a8a:	2118      	movs	r1, #24
   d4a8c:	4604      	mov	r4, r0
   d4a8e:	f000 fd66 	bl	d555e <_ZdlPvj>
   d4a92:	4620      	mov	r0, r4
   d4a94:	bd10      	pop	{r4, pc}

000d4a96 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a96:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a98:	7d03      	ldrb	r3, [r0, #20]
   d4a9a:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a9c:	b08d      	sub	sp, #52	; 0x34
   d4a9e:	460e      	mov	r6, r1
   d4aa0:	f100 0704 	add.w	r7, r0, #4
   d4aa4:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4aa8:	d002      	beq.n	d4ab0 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4aaa:	f100 0508 	add.w	r5, r0, #8
   d4aae:	e018      	b.n	d4ae2 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4ab0:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ab2:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4ab4:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ab8:	232f      	movs	r3, #47	; 0x2f
   d4aba:	462a      	mov	r2, r5
   d4abc:	200a      	movs	r0, #10
   d4abe:	f7ff fde5 	bl	d468c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ac2:	4628      	mov	r0, r5
   d4ac4:	f001 fbfa 	bl	d62bc <strlen>
   d4ac8:	6833      	ldr	r3, [r6, #0]
   d4aca:	4602      	mov	r2, r0
   d4acc:	68db      	ldr	r3, [r3, #12]
   d4ace:	4629      	mov	r1, r5
   d4ad0:	4630      	mov	r0, r6
   d4ad2:	4798      	blx	r3
   d4ad4:	e00f      	b.n	d4af6 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4ad6:	b124      	cbz	r4, d4ae2 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4ad8:	212e      	movs	r1, #46	; 0x2e
   d4ada:	4630      	mov	r0, r6
   d4adc:	f000 f9da 	bl	d4e94 <_ZN5Print5printEc>
   d4ae0:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4ae2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4ae6:	220a      	movs	r2, #10
   d4ae8:	4630      	mov	r0, r6
   d4aea:	f000 f9e6 	bl	d4eba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4aee:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4af0:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4af2:	d1f0      	bne.n	d4ad6 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4af4:	4620      	mov	r0, r4
    }
    return n;
}
   d4af6:	b00d      	add	sp, #52	; 0x34
   d4af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4afc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4afc:	b510      	push	{r4, lr}
   d4afe:	4b05      	ldr	r3, [pc, #20]	; (d4b14 <_ZN9IPAddressC1Ev+0x18>)
   d4b00:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4b02:	2211      	movs	r2, #17
   d4b04:	f840 3b04 	str.w	r3, [r0], #4
   d4b08:	2100      	movs	r1, #0
   d4b0a:	f001 fba6 	bl	d625a <memset>
{
    clear();
}
   d4b0e:	4620      	mov	r0, r4
   d4b10:	bd10      	pop	{r4, pc}
   d4b12:	bf00      	nop
   d4b14:	000d64b8 	.word	0x000d64b8

000d4b18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4b18:	4603      	mov	r3, r0
   d4b1a:	4a07      	ldr	r2, [pc, #28]	; (d4b38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4b1c:	b510      	push	{r4, lr}
   d4b1e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4b22:	f101 0210 	add.w	r2, r1, #16
   d4b26:	f851 4b04 	ldr.w	r4, [r1], #4
   d4b2a:	f843 4b04 	str.w	r4, [r3], #4
   d4b2e:	4291      	cmp	r1, r2
   d4b30:	d1f9      	bne.n	d4b26 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4b32:	780a      	ldrb	r2, [r1, #0]
   d4b34:	701a      	strb	r2, [r3, #0]
}
   d4b36:	bd10      	pop	{r4, pc}
   d4b38:	000d64b8 	.word	0x000d64b8

000d4b3c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4b3c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4b3e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4b42:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4b46:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4b4a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4b4e:	2304      	movs	r3, #4
   d4b50:	6041      	str	r1, [r0, #4]
   d4b52:	7503      	strb	r3, [r0, #20]
   d4b54:	bd10      	pop	{r4, pc}

000d4b56 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4b58:	780d      	ldrb	r5, [r1, #0]
   d4b5a:	788b      	ldrb	r3, [r1, #2]
   d4b5c:	784a      	ldrb	r2, [r1, #1]
   d4b5e:	78c9      	ldrb	r1, [r1, #3]
   d4b60:	9100      	str	r1, [sp, #0]
   d4b62:	4629      	mov	r1, r5
   d4b64:	f7ff ffea 	bl	d4b3c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4b68:	b003      	add	sp, #12
   d4b6a:	bd30      	pop	{r4, r5, pc}

000d4b6c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4b6c:	4b01      	ldr	r3, [pc, #4]	; (d4b74 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4b6e:	4a02      	ldr	r2, [pc, #8]	; (d4b78 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4b70:	601a      	str	r2, [r3, #0]
   d4b72:	4770      	bx	lr
   d4b74:	2003e3e8 	.word	0x2003e3e8
   d4b78:	000d6537 	.word	0x000d6537

000d4b7c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b7c:	2200      	movs	r2, #0
   d4b7e:	4611      	mov	r1, r2
   d4b80:	6840      	ldr	r0, [r0, #4]
   d4b82:	f7ff be6f 	b.w	d4864 <network_listening>

000d4b86 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b86:	2200      	movs	r2, #0
   d4b88:	4611      	mov	r1, r2
   d4b8a:	6840      	ldr	r0, [r0, #4]
   d4b8c:	f7ff be7a 	b.w	d4884 <network_get_listen_timeout>

000d4b90 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b90:	2200      	movs	r2, #0
   d4b92:	6840      	ldr	r0, [r0, #4]
   d4b94:	f7ff be6e 	b.w	d4874 <network_set_listen_timeout>

000d4b98 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b98:	2200      	movs	r2, #0
   d4b9a:	f081 0101 	eor.w	r1, r1, #1
   d4b9e:	6840      	ldr	r0, [r0, #4]
   d4ba0:	f7ff be58 	b.w	d4854 <network_listen>

000d4ba4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4ba4:	2300      	movs	r3, #0
   d4ba6:	461a      	mov	r2, r3
   d4ba8:	2101      	movs	r1, #1
   d4baa:	6840      	ldr	r0, [r0, #4]
   d4bac:	f7ff be4a 	b.w	d4844 <network_off>

000d4bb0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4bb0:	2300      	movs	r3, #0
   d4bb2:	461a      	mov	r2, r3
   d4bb4:	4619      	mov	r1, r3
   d4bb6:	6840      	ldr	r0, [r0, #4]
   d4bb8:	f7ff be3c 	b.w	d4834 <network_on>

000d4bbc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4bbc:	2200      	movs	r2, #0
   d4bbe:	4611      	mov	r1, r2
   d4bc0:	6840      	ldr	r0, [r0, #4]
   d4bc2:	f7ff be2f 	b.w	d4824 <network_ready>

000d4bc6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4bc6:	2200      	movs	r2, #0
   d4bc8:	4611      	mov	r1, r2
   d4bca:	6840      	ldr	r0, [r0, #4]
   d4bcc:	f7ff be1a 	b.w	d4804 <network_connecting>

000d4bd0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4bd0:	2200      	movs	r2, #0
   d4bd2:	2102      	movs	r1, #2
   d4bd4:	6840      	ldr	r0, [r0, #4]
   d4bd6:	f7ff be1d 	b.w	d4814 <network_disconnect>

000d4bda <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4bda:	2300      	movs	r3, #0
   d4bdc:	461a      	mov	r2, r3
   d4bde:	6840      	ldr	r0, [r0, #4]
   d4be0:	f7ff be08 	b.w	d47f4 <network_connect>

000d4be4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4be4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4be6:	4605      	mov	r5, r0
   d4be8:	b188      	cbz	r0, d4c0e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bea:	6804      	ldr	r4, [r0, #0]
   d4bec:	b14c      	cbz	r4, d4c02 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4bee:	68a3      	ldr	r3, [r4, #8]
   d4bf0:	b11b      	cbz	r3, d4bfa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4bf2:	2203      	movs	r2, #3
   d4bf4:	4621      	mov	r1, r4
   d4bf6:	4620      	mov	r0, r4
   d4bf8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4bfa:	2110      	movs	r1, #16
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	f000 fcae 	bl	d555e <_ZdlPvj>
   d4c02:	4628      	mov	r0, r5
   d4c04:	2114      	movs	r1, #20
      }
   d4c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c0a:	f000 bca8 	b.w	d555e <_ZdlPvj>
   d4c0e:	bd38      	pop	{r3, r4, r5, pc}

000d4c10 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4c10:	b110      	cbz	r0, d4c18 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4c12:	6803      	ldr	r3, [r0, #0]
   d4c14:	685b      	ldr	r3, [r3, #4]
   d4c16:	4718      	bx	r3
   d4c18:	4770      	bx	lr

000d4c1a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4c1a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4c1c:	6803      	ldr	r3, [r0, #0]
   d4c1e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4c20:	b1bb      	cbz	r3, d4c52 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4c22:	6858      	ldr	r0, [r3, #4]
   d4c24:	f7ff fc9a 	bl	d455c <os_thread_is_current>
   d4c28:	b978      	cbnz	r0, d4c4a <_ZN6ThreadD1Ev+0x30>
   d4c2a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4c2c:	7c5a      	ldrb	r2, [r3, #17]
   d4c2e:	b912      	cbnz	r2, d4c36 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4c30:	6858      	ldr	r0, [r3, #4]
   d4c32:	f7ff fc9b 	bl	d456c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4c36:	6823      	ldr	r3, [r4, #0]
   d4c38:	6858      	ldr	r0, [r3, #4]
   d4c3a:	f7ff fc9f 	bl	d457c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c3e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4c40:	2300      	movs	r3, #0
   d4c42:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4c44:	b128      	cbz	r0, d4c52 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4c46:	f7ff ffcd 	bl	d4be4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c4a:	6820      	ldr	r0, [r4, #0]
   d4c4c:	b108      	cbz	r0, d4c52 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4c4e:	f7ff ffc9 	bl	d4be4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4c52:	4620      	mov	r0, r4
   d4c54:	bd10      	pop	{r4, pc}

000d4c56 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4c56:	b538      	push	{r3, r4, r5, lr}
   d4c58:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c5a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4c5e:	b108      	cbz	r0, d4c64 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4c60:	f7ff fa1d 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4c64:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4c68:	b108      	cbz	r0, d4c6e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4c6a:	f7ff fc97 	bl	d459c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c6e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4c72:	b135      	cbz	r5, d4c82 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c74:	4628      	mov	r0, r5
   d4c76:	f7ff ffd0 	bl	d4c1a <_ZN6ThreadD1Ev>
   d4c7a:	2104      	movs	r1, #4
   d4c7c:	4628      	mov	r0, r5
   d4c7e:	f000 fc6e 	bl	d555e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c82:	6820      	ldr	r0, [r4, #0]
   d4c84:	b108      	cbz	r0, d4c8a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4c86:	f7ff ffc3 	bl	d4c10 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4c8a:	4620      	mov	r0, r4
   d4c8c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c90 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4c90:	b510      	push	{r4, lr}
   d4c92:	4b04      	ldr	r3, [pc, #16]	; (d4ca4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4c94:	4604      	mov	r4, r0
   d4c96:	f840 3b08 	str.w	r3, [r0], #8
   d4c9a:	f7ff ffdc 	bl	d4c56 <_ZN5spark11MeshPublishD1Ev>
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	bd10      	pop	{r4, pc}
   d4ca2:	bf00      	nop
   d4ca4:	000d65ac 	.word	0x000d65ac

000d4ca8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4ca8:	b538      	push	{r3, r4, r5, lr}
   d4caa:	4c0e      	ldr	r4, [pc, #56]	; (d4ce4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4cac:	4b0e      	ldr	r3, [pc, #56]	; (d4ce8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4cae:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4cb0:	2500      	movs	r5, #0
   d4cb2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4cb4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4cb8:	6063      	str	r3, [r4, #4]
   d4cba:	60a5      	str	r5, [r4, #8]
   d4cbc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4cc0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4cc4:	f7ff fc62 	bl	d458c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4cc8:	4b08      	ldr	r3, [pc, #32]	; (d4cec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4cca:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4cce:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4cd2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	4a06      	ldr	r2, [pc, #24]	; (d4cf0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4cd8:	4906      	ldr	r1, [pc, #24]	; (d4cf4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4cde:	f000 bc39 	b.w	d5554 <__aeabi_atexit>
   d4ce2:	bf00      	nop
   d4ce4:	2003e3ec 	.word	0x2003e3ec
   d4ce8:	000d65e0 	.word	0x000d65e0
   d4cec:	000d65ac 	.word	0x000d65ac
   d4cf0:	2003e3a4 	.word	0x2003e3a4
   d4cf4:	000d4c91 	.word	0x000d4c91

000d4cf8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4cf8:	2300      	movs	r3, #0
   d4cfa:	461a      	mov	r2, r3
   d4cfc:	6840      	ldr	r0, [r0, #4]
   d4cfe:	f7ff bd79 	b.w	d47f4 <network_connect>

000d4d02 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4d02:	2200      	movs	r2, #0
   d4d04:	2102      	movs	r1, #2
   d4d06:	6840      	ldr	r0, [r0, #4]
   d4d08:	f7ff bd84 	b.w	d4814 <network_disconnect>

000d4d0c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4d0c:	2200      	movs	r2, #0
   d4d0e:	4611      	mov	r1, r2
   d4d10:	6840      	ldr	r0, [r0, #4]
   d4d12:	f7ff bd77 	b.w	d4804 <network_connecting>

000d4d16 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4d16:	2200      	movs	r2, #0
   d4d18:	4611      	mov	r1, r2
   d4d1a:	6840      	ldr	r0, [r0, #4]
   d4d1c:	f7ff bd82 	b.w	d4824 <network_ready>

000d4d20 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4d20:	2300      	movs	r3, #0
   d4d22:	461a      	mov	r2, r3
   d4d24:	4619      	mov	r1, r3
   d4d26:	6840      	ldr	r0, [r0, #4]
   d4d28:	f7ff bd84 	b.w	d4834 <network_on>

000d4d2c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4d2c:	2300      	movs	r3, #0
   d4d2e:	461a      	mov	r2, r3
   d4d30:	4619      	mov	r1, r3
   d4d32:	6840      	ldr	r0, [r0, #4]
   d4d34:	f7ff bd86 	b.w	d4844 <network_off>

000d4d38 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4d38:	2200      	movs	r2, #0
   d4d3a:	f081 0101 	eor.w	r1, r1, #1
   d4d3e:	6840      	ldr	r0, [r0, #4]
   d4d40:	f7ff bd88 	b.w	d4854 <network_listen>

000d4d44 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4d44:	2200      	movs	r2, #0
   d4d46:	6840      	ldr	r0, [r0, #4]
   d4d48:	f7ff bd94 	b.w	d4874 <network_set_listen_timeout>

000d4d4c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4d4c:	2200      	movs	r2, #0
   d4d4e:	4611      	mov	r1, r2
   d4d50:	6840      	ldr	r0, [r0, #4]
   d4d52:	f7ff bd97 	b.w	d4884 <network_get_listen_timeout>

000d4d56 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4d56:	2200      	movs	r2, #0
   d4d58:	4611      	mov	r1, r2
   d4d5a:	6840      	ldr	r0, [r0, #4]
   d4d5c:	f7ff bd82 	b.w	d4864 <network_listening>

000d4d60 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d64:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d66:	b095      	sub	sp, #84	; 0x54
   d4d68:	4616      	mov	r6, r2
   d4d6a:	460d      	mov	r5, r1
   d4d6c:	4607      	mov	r7, r0
    IPAddress addr;
   d4d6e:	f7ff fec5 	bl	d4afc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4d72:	4621      	mov	r1, r4
   d4d74:	2220      	movs	r2, #32
   d4d76:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d78:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4d7a:	f001 fa6e 	bl	d625a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4d7e:	2340      	movs	r3, #64	; 0x40
   d4d80:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4d82:	4621      	mov	r1, r4
   d4d84:	466b      	mov	r3, sp
   d4d86:	aa0c      	add	r2, sp, #48	; 0x30
   d4d88:	4630      	mov	r0, r6
   d4d8a:	f7ff fc8f 	bl	d46ac <netdb_getaddrinfo>
    if (!r) {
   d4d8e:	4604      	mov	r4, r0
   d4d90:	2800      	cmp	r0, #0
   d4d92:	d144      	bne.n	d4e1e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d94:	4602      	mov	r2, r0
   d4d96:	2101      	movs	r1, #1
   d4d98:	6868      	ldr	r0, [r5, #4]
   d4d9a:	f7ff fd43 	bl	d4824 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d9e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4da0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4da2:	4622      	mov	r2, r4
   d4da4:	6868      	ldr	r0, [r5, #4]
   d4da6:	f7ff fd3d 	bl	d4824 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4daa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4dac:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4dae:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4db0:	2e00      	cmp	r6, #0
   d4db2:	d034      	beq.n	d4e1e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4db4:	2900      	cmp	r1, #0
   d4db6:	d132      	bne.n	d4e1e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4db8:	6873      	ldr	r3, [r6, #4]
   d4dba:	2b02      	cmp	r3, #2
   d4dbc:	d002      	beq.n	d4dc4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4dbe:	2b0a      	cmp	r3, #10
   d4dc0:	d009      	beq.n	d4dd6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4dc2:	e02a      	b.n	d4e1a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4dc4:	f1b8 0f00 	cmp.w	r8, #0
   d4dc8:	d027      	beq.n	d4e1a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4dca:	6971      	ldr	r1, [r6, #20]
   d4dcc:	4638      	mov	r0, r7
   d4dce:	3104      	adds	r1, #4
   d4dd0:	f7ff fec1 	bl	d4b56 <_ZN9IPAddressaSEPKh>
   d4dd4:	e020      	b.n	d4e18 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4dd6:	f1b9 0f00 	cmp.w	r9, #0
   d4dda:	d01e      	beq.n	d4e1a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4ddc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4dde:	2211      	movs	r2, #17
   d4de0:	a801      	add	r0, sp, #4
   d4de2:	f001 fa3a 	bl	d625a <memset>
                    a.v = 6;
   d4de6:	2306      	movs	r3, #6
   d4de8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4dec:	ad01      	add	r5, sp, #4
   d4dee:	f104 0308 	add.w	r3, r4, #8
   d4df2:	3418      	adds	r4, #24
   d4df4:	6818      	ldr	r0, [r3, #0]
   d4df6:	6859      	ldr	r1, [r3, #4]
   d4df8:	462a      	mov	r2, r5
   d4dfa:	c203      	stmia	r2!, {r0, r1}
   d4dfc:	3308      	adds	r3, #8
   d4dfe:	42a3      	cmp	r3, r4
   d4e00:	4615      	mov	r5, r2
   d4e02:	d1f7      	bne.n	d4df4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4e04:	a901      	add	r1, sp, #4
   d4e06:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4e08:	ad07      	add	r5, sp, #28
   d4e0a:	f7ff fe85 	bl	d4b18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e10:	1d3c      	adds	r4, r7, #4
   d4e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e14:	682b      	ldr	r3, [r5, #0]
   d4e16:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4e18:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e1a:	69f6      	ldr	r6, [r6, #28]
   d4e1c:	e7c8      	b.n	d4db0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4e1e:	9800      	ldr	r0, [sp, #0]
   d4e20:	f7ff fc3c 	bl	d469c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4e24:	4638      	mov	r0, r7
   d4e26:	b015      	add	sp, #84	; 0x54
   d4e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4e2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4e2c:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4e2e:	4a03      	ldr	r2, [pc, #12]	; (d4e3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4e30:	601a      	str	r2, [r3, #0]
   d4e32:	2200      	movs	r2, #0
   d4e34:	605a      	str	r2, [r3, #4]
   d4e36:	4770      	bx	lr
   d4e38:	2003e5c0 	.word	0x2003e5c0
   d4e3c:	000d65e0 	.word	0x000d65e0

000d4e40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e42:	4606      	mov	r6, r0
   d4e44:	460d      	mov	r5, r1
   d4e46:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4e48:	2400      	movs	r4, #0
  while (size--) {
   d4e4a:	42bd      	cmp	r5, r7
   d4e4c:	d00c      	beq.n	d4e68 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e4e:	6833      	ldr	r3, [r6, #0]
   d4e50:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e54:	689b      	ldr	r3, [r3, #8]
   d4e56:	4630      	mov	r0, r6
   d4e58:	4798      	blx	r3
     if (chunk>=0)
   d4e5a:	2800      	cmp	r0, #0
   d4e5c:	db01      	blt.n	d4e62 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4e5e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4e60:	e7f3      	b.n	d4e4a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4e62:	2c00      	cmp	r4, #0
   d4e64:	bf08      	it	eq
   d4e66:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4e68:	4620      	mov	r0, r4
   d4e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e6c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4e6c:	b570      	push	{r4, r5, r6, lr}
   d4e6e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4e70:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4e72:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4e74:	b149      	cbz	r1, d4e8a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4e76:	f001 fa21 	bl	d62bc <strlen>
   d4e7a:	682b      	ldr	r3, [r5, #0]
   d4e7c:	4602      	mov	r2, r0
   d4e7e:	4621      	mov	r1, r4
   d4e80:	4628      	mov	r0, r5
   d4e82:	68db      	ldr	r3, [r3, #12]
    }
   d4e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4e88:	4718      	bx	r3
    }
   d4e8a:	bd70      	pop	{r4, r5, r6, pc}

000d4e8c <_ZN5Print5printEPKc>:
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	f7ff ffed 	bl	d4e6c <_ZN5Print5writeEPKc>
   d4e92:	bd08      	pop	{r3, pc}

000d4e94 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4e94:	6803      	ldr	r3, [r0, #0]
   d4e96:	689b      	ldr	r3, [r3, #8]
   d4e98:	4718      	bx	r3

000d4e9a <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d4e9a:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e9c:	f7ff ffe6 	bl	d4e6c <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d4ea0:	bd08      	pop	{r3, pc}

000d4ea2 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d4ea2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ea4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ea6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4ea8:	f7ff fff4 	bl	d4e94 <_ZN5Print5printEc>
  n += print('\n');
   d4eac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4eae:	4604      	mov	r4, r0
  n += print('\n');
   d4eb0:	4628      	mov	r0, r5
   d4eb2:	f7ff ffef 	bl	d4e94 <_ZN5Print5printEc>
  return n;
}
   d4eb6:	4420      	add	r0, r4
   d4eb8:	bd38      	pop	{r3, r4, r5, pc}

000d4eba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4eba:	b530      	push	{r4, r5, lr}
   d4ebc:	b08b      	sub	sp, #44	; 0x2c
   d4ebe:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ec0:	2100      	movs	r1, #0
   d4ec2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4ec6:	2a01      	cmp	r2, #1
   d4ec8:	bf98      	it	ls
   d4eca:	220a      	movls	r2, #10
   d4ecc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4ed0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4ed4:	fb05 3312 	mls	r3, r5, r2, r3
   d4ed8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4edc:	2b09      	cmp	r3, #9
   d4ede:	bf94      	ite	ls
   d4ee0:	3330      	addls	r3, #48	; 0x30
   d4ee2:	3337      	addhi	r3, #55	; 0x37
   d4ee4:	b2db      	uxtb	r3, r3
   d4ee6:	4621      	mov	r1, r4
   d4ee8:	f804 3901 	strb.w	r3, [r4], #-1
   d4eec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4eee:	2d00      	cmp	r5, #0
   d4ef0:	d1ee      	bne.n	d4ed0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4ef2:	f7ff ffbb 	bl	d4e6c <_ZN5Print5writeEPKc>
}
   d4ef6:	b00b      	add	sp, #44	; 0x2c
   d4ef8:	bd30      	pop	{r4, r5, pc}
	...

000d4efc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f00:	ec57 6b10 	vmov	r6, r7, d0
   d4f04:	4682      	mov	sl, r0
   d4f06:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4f08:	ee10 2a10 	vmov	r2, s0
   d4f0c:	463b      	mov	r3, r7
   d4f0e:	ee10 0a10 	vmov	r0, s0
   d4f12:	4639      	mov	r1, r7
   d4f14:	f001 f8da 	bl	d60cc <__aeabi_dcmpun>
   d4f18:	b108      	cbz	r0, d4f1e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f1a:	494e      	ldr	r1, [pc, #312]	; (d5054 <_ZN5Print10printFloatEdh+0x158>)
   d4f1c:	e012      	b.n	d4f44 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4f1e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4f26:	4b4c      	ldr	r3, [pc, #304]	; (d5058 <_ZN5Print10printFloatEdh+0x15c>)
   d4f28:	4630      	mov	r0, r6
   d4f2a:	4649      	mov	r1, r9
   d4f2c:	f001 f8ce 	bl	d60cc <__aeabi_dcmpun>
   d4f30:	b968      	cbnz	r0, d4f4e <_ZN5Print10printFloatEdh+0x52>
   d4f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4f36:	4b48      	ldr	r3, [pc, #288]	; (d5058 <_ZN5Print10printFloatEdh+0x15c>)
   d4f38:	4630      	mov	r0, r6
   d4f3a:	4649      	mov	r1, r9
   d4f3c:	f001 f8a8 	bl	d6090 <__aeabi_dcmple>
   d4f40:	b928      	cbnz	r0, d4f4e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f42:	4946      	ldr	r1, [pc, #280]	; (d505c <_ZN5Print10printFloatEdh+0x160>)
   d4f44:	4650      	mov	r0, sl
   d4f46:	f7ff ff91 	bl	d4e6c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4f4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4f52:	4b43      	ldr	r3, [pc, #268]	; (d5060 <_ZN5Print10printFloatEdh+0x164>)
   d4f54:	4630      	mov	r0, r6
   d4f56:	4639      	mov	r1, r7
   d4f58:	f001 f8ae 	bl	d60b8 <__aeabi_dcmpgt>
   d4f5c:	b108      	cbz	r0, d4f62 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f5e:	4941      	ldr	r1, [pc, #260]	; (d5064 <_ZN5Print10printFloatEdh+0x168>)
   d4f60:	e7f0      	b.n	d4f44 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4f62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4f66:	4b40      	ldr	r3, [pc, #256]	; (d5068 <_ZN5Print10printFloatEdh+0x16c>)
   d4f68:	4630      	mov	r0, r6
   d4f6a:	4639      	mov	r1, r7
   d4f6c:	f001 f886 	bl	d607c <__aeabi_dcmplt>
   d4f70:	2800      	cmp	r0, #0
   d4f72:	d1f4      	bne.n	d4f5e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4f74:	2200      	movs	r2, #0
   d4f76:	2300      	movs	r3, #0
   d4f78:	4630      	mov	r0, r6
   d4f7a:	4639      	mov	r1, r7
   d4f7c:	f001 f87e 	bl	d607c <__aeabi_dcmplt>
   d4f80:	b140      	cbz	r0, d4f94 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4f82:	212d      	movs	r1, #45	; 0x2d
   d4f84:	4650      	mov	r0, sl
   d4f86:	f7ff ff85 	bl	d4e94 <_ZN5Print5printEc>
     number = -number;
   d4f8a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4f8e:	4604      	mov	r4, r0
     number = -number;
   d4f90:	461f      	mov	r7, r3
   d4f92:	e000      	b.n	d4f96 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4f94:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4f96:	4935      	ldr	r1, [pc, #212]	; (d506c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4f98:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4f9c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4f9e:	fa5f f388 	uxtb.w	r3, r8
   d4fa2:	429d      	cmp	r5, r3
   d4fa4:	d906      	bls.n	d4fb4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4fa6:	2200      	movs	r2, #0
   d4fa8:	4b31      	ldr	r3, [pc, #196]	; (d5070 <_ZN5Print10printFloatEdh+0x174>)
   d4faa:	f000 ff1f 	bl	d5dec <__aeabi_ddiv>
   d4fae:	f108 0801 	add.w	r8, r8, #1
   d4fb2:	e7f4      	b.n	d4f9e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4fb4:	4632      	mov	r2, r6
   d4fb6:	463b      	mov	r3, r7
   d4fb8:	f000 fc3c 	bl	d5834 <__adddf3>
   d4fbc:	460f      	mov	r7, r1
   d4fbe:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4fc0:	f001 f8c2 	bl	d6148 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4fc4:	220a      	movs	r2, #10
   d4fc6:	4601      	mov	r1, r0
   d4fc8:	4680      	mov	r8, r0
   d4fca:	4650      	mov	r0, sl
   d4fcc:	f7ff ff75 	bl	d4eba <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4fd0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4fd2:	b3e5      	cbz	r5, d504e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4fd4:	4640      	mov	r0, r8
   d4fd6:	f000 fd69 	bl	d5aac <__aeabi_ui2d>
   d4fda:	4602      	mov	r2, r0
   d4fdc:	460b      	mov	r3, r1
   d4fde:	4630      	mov	r0, r6
   d4fe0:	4639      	mov	r1, r7
   d4fe2:	f000 fc25 	bl	d5830 <__aeabi_dsub>
   d4fe6:	4606      	mov	r6, r0
   d4fe8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4fea:	4650      	mov	r0, sl
   d4fec:	4921      	ldr	r1, [pc, #132]	; (d5074 <_ZN5Print10printFloatEdh+0x178>)
   d4fee:	f7ff ff3d 	bl	d4e6c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4ff2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4ff4:	2200      	movs	r2, #0
   d4ff6:	4b1e      	ldr	r3, [pc, #120]	; (d5070 <_ZN5Print10printFloatEdh+0x174>)
   d4ff8:	4630      	mov	r0, r6
   d4ffa:	4639      	mov	r1, r7
   d4ffc:	f000 fdcc 	bl	d5b98 <__aeabi_dmul>
   d5000:	4606      	mov	r6, r0
   d5002:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d5004:	f001 f878 	bl	d60f8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d5008:	f1b0 0900 	subs.w	r9, r0, #0
   d500c:	da07      	bge.n	d501e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d500e:	212d      	movs	r1, #45	; 0x2d
   d5010:	4650      	mov	r0, sl
   d5012:	f7ff ff3f 	bl	d4e94 <_ZN5Print5printEc>
            val = -n;
   d5016:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d501a:	4680      	mov	r8, r0
   d501c:	e002      	b.n	d5024 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d501e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d5020:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5024:	220a      	movs	r2, #10
   d5026:	4650      	mov	r0, sl
   d5028:	f7ff ff47 	bl	d4eba <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d502c:	4440      	add	r0, r8
   d502e:	4404      	add	r4, r0
    remainder -= toPrint;
   d5030:	4648      	mov	r0, r9
   d5032:	f000 fd4b 	bl	d5acc <__aeabi_i2d>
   d5036:	4602      	mov	r2, r0
   d5038:	460b      	mov	r3, r1
   d503a:	4630      	mov	r0, r6
   d503c:	4639      	mov	r1, r7
   d503e:	f000 fbf7 	bl	d5830 <__aeabi_dsub>
   d5042:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5044:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d5048:	4606      	mov	r6, r0
   d504a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d504c:	d1d2      	bne.n	d4ff4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d504e:	4620      	mov	r0, r4
   d5050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5054:	000d660c 	.word	0x000d660c
   d5058:	7fefffff 	.word	0x7fefffff
   d505c:	000d6616 	.word	0x000d6616
   d5060:	41efffff 	.word	0x41efffff
   d5064:	000d6610 	.word	0x000d6610
   d5068:	c1efffff 	.word	0xc1efffff
   d506c:	3fe00000 	.word	0x3fe00000
   d5070:	40240000 	.word	0x40240000
   d5074:	000d6614 	.word	0x000d6614

000d5078 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d5078:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d507a:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d507c:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d507e:	f7ff ff3d 	bl	d4efc <_ZN5Print10printFloatEdh>
   d5082:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5084:	4628      	mov	r0, r5
   d5086:	f7ff ff0c 	bl	d4ea2 <_ZN5Print7printlnEv>
  return n;
}
   d508a:	4420      	add	r0, r4
   d508c:	bd38      	pop	{r3, r4, r5, pc}

000d508e <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d508e:	b538      	push	{r3, r4, r5, lr}
   d5090:	4604      	mov	r4, r0
    return println((double)num, digits);
   d5092:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d5096:	460d      	mov	r5, r1
    return println((double)num, digits);
   d5098:	f000 fd2a 	bl	d5af0 <__aeabi_f2d>
   d509c:	ec41 0b10 	vmov	d0, r0, r1
   d50a0:	4629      	mov	r1, r5
   d50a2:	4620      	mov	r0, r4
}
   d50a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d50a8:	f7ff bfe6 	b.w	d5078 <_ZN5Print7printlnEdi>

000d50ac <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d50ac:	b510      	push	{r4, lr}
   d50ae:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50b0:	f7ff fc20 	bl	d48f4 <_ZNSt14_Function_baseD1Ev>
   d50b4:	4620      	mov	r0, r4
   d50b6:	bd10      	pop	{r4, pc}

000d50b8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50b8:	4803      	ldr	r0, [pc, #12]	; (d50c8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d50ba:	4a04      	ldr	r2, [pc, #16]	; (d50cc <_GLOBAL__sub_I_RGB+0x14>)
   d50bc:	4904      	ldr	r1, [pc, #16]	; (d50d0 <_GLOBAL__sub_I_RGB+0x18>)
   d50be:	2300      	movs	r3, #0
   d50c0:	6083      	str	r3, [r0, #8]
   d50c2:	f000 ba47 	b.w	d5554 <__aeabi_atexit>
   d50c6:	bf00      	nop
   d50c8:	2003e5c8 	.word	0x2003e5c8
   d50cc:	2003e3a4 	.word	0x2003e3a4
   d50d0:	000d50ad 	.word	0x000d50ad

000d50d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d50d4:	b510      	push	{r4, lr}
   d50d6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d50d8:	6800      	ldr	r0, [r0, #0]
   d50da:	b118      	cbz	r0, d50e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d50dc:	f7ff fbe2 	bl	d48a4 <free>
            wakeupSource_ = nullptr;
   d50e0:	2300      	movs	r3, #0
   d50e2:	6023      	str	r3, [r4, #0]
   d50e4:	bd10      	pop	{r4, pc}

000d50e6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d50e6:	b510      	push	{r4, lr}
   d50e8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d50ea:	f7ff fff3 	bl	d50d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d50ee:	4620      	mov	r0, r4
   d50f0:	bd10      	pop	{r4, pc}
	...

000d50f4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d50f4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d50f6:	4c09      	ldr	r4, [pc, #36]	; (d511c <_GLOBAL__sub_I_System+0x28>)
   d50f8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d50fa:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d50fe:	6020      	str	r0, [r4, #0]
   d5100:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5102:	71a0      	strb	r0, [r4, #6]
   d5104:	8120      	strh	r0, [r4, #8]
   d5106:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5108:	f7ff fb48 	bl	d479c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d510c:	4620      	mov	r0, r4
   d510e:	4a04      	ldr	r2, [pc, #16]	; (d5120 <_GLOBAL__sub_I_System+0x2c>)
   d5110:	4904      	ldr	r1, [pc, #16]	; (d5124 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5116:	f000 ba1d 	b.w	d5554 <__aeabi_atexit>
   d511a:	bf00      	nop
   d511c:	2003e5d8 	.word	0x2003e5d8
   d5120:	2003e3a4 	.word	0x2003e3a4
   d5124:	000d50e7 	.word	0x000d50e7

000d5128 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5128:	4b02      	ldr	r3, [pc, #8]	; (d5134 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d512a:	681a      	ldr	r2, [r3, #0]
   d512c:	4b02      	ldr	r3, [pc, #8]	; (d5138 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d512e:	601a      	str	r2, [r3, #0]
   d5130:	4770      	bx	lr
   d5132:	bf00      	nop
   d5134:	2003e33c 	.word	0x2003e33c
   d5138:	2003e5e4 	.word	0x2003e5e4

000d513c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d513c:	4770      	bx	lr

000d513e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d513e:	7441      	strb	r1, [r0, #17]
   d5140:	4770      	bx	lr

000d5142 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5142:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5144:	7c00      	ldrb	r0, [r0, #16]
   d5146:	f7ff fae9 	bl	d471c <HAL_USART_Available_Data_For_Write>
}
   d514a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d514e:	bd08      	pop	{r3, pc}

000d5150 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5150:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5152:	7c00      	ldrb	r0, [r0, #16]
   d5154:	f7ff fac2 	bl	d46dc <HAL_USART_Available_Data>
}
   d5158:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d515c:	bd08      	pop	{r3, pc}

000d515e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d515e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5160:	7c00      	ldrb	r0, [r0, #16]
   d5162:	f7ff facb 	bl	d46fc <HAL_USART_Peek_Data>
}
   d5166:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d516a:	bf28      	it	cs
   d516c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5170:	bd08      	pop	{r3, pc}

000d5172 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5172:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5174:	7c00      	ldrb	r0, [r0, #16]
   d5176:	f7ff fab9 	bl	d46ec <HAL_USART_Read_Data>
}
   d517a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d517e:	bf28      	it	cs
   d5180:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5184:	bd08      	pop	{r3, pc}

000d5186 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5186:	7c00      	ldrb	r0, [r0, #16]
   d5188:	f7ff bac0 	b.w	d470c <HAL_USART_Flush_Data>

000d518c <_ZN11USARTSerialD0Ev>:
   d518c:	b510      	push	{r4, lr}
   d518e:	2114      	movs	r1, #20
   d5190:	4604      	mov	r4, r0
   d5192:	f000 f9e4 	bl	d555e <_ZdlPvj>
   d5196:	4620      	mov	r0, r4
   d5198:	bd10      	pop	{r4, pc}

000d519a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d519a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d519c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d519e:	4604      	mov	r4, r0
   d51a0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51a2:	b925      	cbnz	r5, d51ae <_ZN11USARTSerial5writeEh+0x14>
   d51a4:	7c00      	ldrb	r0, [r0, #16]
   d51a6:	f7ff fab9 	bl	d471c <HAL_USART_Available_Data_For_Write>
   d51aa:	2800      	cmp	r0, #0
   d51ac:	dd05      	ble.n	d51ba <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51ae:	4631      	mov	r1, r6
   d51b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d51b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51b6:	f7ff ba89 	b.w	d46cc <HAL_USART_Write_Data>
  }
  return 0;
}
   d51ba:	4628      	mov	r0, r5
   d51bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d51c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d51c0:	b510      	push	{r4, lr}
   d51c2:	4604      	mov	r4, r0
   d51c4:	4608      	mov	r0, r1
   d51c6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d51c8:	2200      	movs	r2, #0
   d51ca:	6062      	str	r2, [r4, #4]
   d51cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d51d0:	60a2      	str	r2, [r4, #8]
   d51d2:	4a05      	ldr	r2, [pc, #20]	; (d51e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d51d4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d51d6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d51d8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d51da:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d51dc:	461a      	mov	r2, r3
   d51de:	f7ff fa6d 	bl	d46bc <HAL_USART_Init>
}
   d51e2:	4620      	mov	r0, r4
   d51e4:	bd10      	pop	{r4, pc}
   d51e6:	bf00      	nop
   d51e8:	000d664c 	.word	0x000d664c

000d51ec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d51ec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d51ee:	4d0c      	ldr	r5, [pc, #48]	; (d5220 <_Z22__fetch_global_Serial1v+0x34>)
   d51f0:	6829      	ldr	r1, [r5, #0]
   d51f2:	f011 0401 	ands.w	r4, r1, #1
   d51f6:	d111      	bne.n	d521c <_Z22__fetch_global_Serial1v+0x30>
   d51f8:	4628      	mov	r0, r5
   d51fa:	f7fe ff52 	bl	d40a2 <__cxa_guard_acquire>
   d51fe:	b168      	cbz	r0, d521c <_Z22__fetch_global_Serial1v+0x30>
   d5200:	4a08      	ldr	r2, [pc, #32]	; (d5224 <_Z22__fetch_global_Serial1v+0x38>)
   d5202:	4b09      	ldr	r3, [pc, #36]	; (d5228 <_Z22__fetch_global_Serial1v+0x3c>)
   d5204:	4809      	ldr	r0, [pc, #36]	; (d522c <_Z22__fetch_global_Serial1v+0x40>)
   d5206:	4621      	mov	r1, r4
   d5208:	f7ff ffda 	bl	d51c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d520c:	4628      	mov	r0, r5
   d520e:	f7fe ff4d 	bl	d40ac <__cxa_guard_release>
   d5212:	4a07      	ldr	r2, [pc, #28]	; (d5230 <_Z22__fetch_global_Serial1v+0x44>)
   d5214:	4907      	ldr	r1, [pc, #28]	; (d5234 <_Z22__fetch_global_Serial1v+0x48>)
   d5216:	4805      	ldr	r0, [pc, #20]	; (d522c <_Z22__fetch_global_Serial1v+0x40>)
   d5218:	f000 f99c 	bl	d5554 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d521c:	4803      	ldr	r0, [pc, #12]	; (d522c <_Z22__fetch_global_Serial1v+0x40>)
   d521e:	bd38      	pop	{r3, r4, r5, pc}
   d5220:	2003e680 	.word	0x2003e680
   d5224:	2003e684 	.word	0x2003e684
   d5228:	2003e5fc 	.word	0x2003e5fc
   d522c:	2003e5e8 	.word	0x2003e5e8
   d5230:	2003e3a4 	.word	0x2003e3a4
   d5234:	000d513d 	.word	0x000d513d

000d5238 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5238:	7441      	strb	r1, [r0, #17]
   d523a:	4770      	bx	lr

000d523c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d523c:	4770      	bx	lr

000d523e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d523e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5240:	2100      	movs	r1, #0
   d5242:	7c00      	ldrb	r0, [r0, #16]
   d5244:	f7ff fa92 	bl	d476c <HAL_USB_USART_Receive_Data>
}
   d5248:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d524c:	bf28      	it	cs
   d524e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5252:	bd08      	pop	{r3, pc}

000d5254 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5254:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5256:	2101      	movs	r1, #1
   d5258:	7c00      	ldrb	r0, [r0, #16]
   d525a:	f7ff fa87 	bl	d476c <HAL_USB_USART_Receive_Data>
}
   d525e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5262:	bf28      	it	cs
   d5264:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5268:	bd08      	pop	{r3, pc}

000d526a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d526a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d526c:	7c00      	ldrb	r0, [r0, #16]
   d526e:	f7ff fa75 	bl	d475c <HAL_USB_USART_Available_Data_For_Write>
}
   d5272:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5276:	bd08      	pop	{r3, pc}

000d5278 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5278:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d527a:	7c00      	ldrb	r0, [r0, #16]
   d527c:	f7ff fa66 	bl	d474c <HAL_USB_USART_Available_Data>
}
   d5280:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5284:	bd08      	pop	{r3, pc}

000d5286 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5286:	7c00      	ldrb	r0, [r0, #16]
   d5288:	f7ff ba80 	b.w	d478c <HAL_USB_USART_Flush_Data>

000d528c <_ZN9USBSerialD0Ev>:
   d528c:	b510      	push	{r4, lr}
   d528e:	2114      	movs	r1, #20
   d5290:	4604      	mov	r4, r0
   d5292:	f000 f964 	bl	d555e <_ZdlPvj>
   d5296:	4620      	mov	r0, r4
   d5298:	bd10      	pop	{r4, pc}

000d529a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d529a:	b538      	push	{r3, r4, r5, lr}
   d529c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d529e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d52a0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d52a2:	f7ff fa5b 	bl	d475c <HAL_USB_USART_Available_Data_For_Write>
   d52a6:	2800      	cmp	r0, #0
   d52a8:	dc01      	bgt.n	d52ae <_ZN9USBSerial5writeEh+0x14>
   d52aa:	7c60      	ldrb	r0, [r4, #17]
   d52ac:	b128      	cbz	r0, d52ba <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d52ae:	4629      	mov	r1, r5
   d52b0:	7c20      	ldrb	r0, [r4, #16]
   d52b2:	f7ff fa63 	bl	d477c <HAL_USB_USART_Send_Data>
   d52b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d52ba:	bd38      	pop	{r3, r4, r5, pc}

000d52bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d52bc:	b510      	push	{r4, lr}
   d52be:	4604      	mov	r4, r0
   d52c0:	2300      	movs	r3, #0
   d52c2:	6063      	str	r3, [r4, #4]
   d52c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d52c8:	60a3      	str	r3, [r4, #8]
   d52ca:	4b05      	ldr	r3, [pc, #20]	; (d52e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d52cc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d52ce:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d52d0:	4608      	mov	r0, r1
{
  _serial = serial;
   d52d2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d52d4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d52d6:	4611      	mov	r1, r2
   d52d8:	f7ff fa28 	bl	d472c <HAL_USB_USART_Init>
}
   d52dc:	4620      	mov	r0, r4
   d52de:	bd10      	pop	{r4, pc}
   d52e0:	000d667c 	.word	0x000d667c

000d52e4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d52e4:	2200      	movs	r2, #0
   d52e6:	7c00      	ldrb	r0, [r0, #16]
   d52e8:	f7ff ba28 	b.w	d473c <HAL_USB_USART_Begin>

000d52ec <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d52ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d52ee:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d52f0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d52f2:	2100      	movs	r1, #0
   d52f4:	f000 ffb1 	bl	d625a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d52f8:	4620      	mov	r0, r4
   d52fa:	bd10      	pop	{r4, pc}

000d52fc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d52fc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52fe:	4d0e      	ldr	r5, [pc, #56]	; (d5338 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5300:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5302:	a801      	add	r0, sp, #4
   d5304:	f7ff fff2 	bl	d52ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5308:	6829      	ldr	r1, [r5, #0]
   d530a:	f011 0401 	ands.w	r4, r1, #1
   d530e:	d110      	bne.n	d5332 <_Z16_fetch_usbserialv+0x36>
   d5310:	4628      	mov	r0, r5
   d5312:	f7fe fec6 	bl	d40a2 <__cxa_guard_acquire>
   d5316:	b160      	cbz	r0, d5332 <_Z16_fetch_usbserialv+0x36>
   d5318:	aa01      	add	r2, sp, #4
   d531a:	4621      	mov	r1, r4
   d531c:	4807      	ldr	r0, [pc, #28]	; (d533c <_Z16_fetch_usbserialv+0x40>)
   d531e:	f7ff ffcd 	bl	d52bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5322:	4628      	mov	r0, r5
   d5324:	f7fe fec2 	bl	d40ac <__cxa_guard_release>
   d5328:	4a05      	ldr	r2, [pc, #20]	; (d5340 <_Z16_fetch_usbserialv+0x44>)
   d532a:	4906      	ldr	r1, [pc, #24]	; (d5344 <_Z16_fetch_usbserialv+0x48>)
   d532c:	4803      	ldr	r0, [pc, #12]	; (d533c <_Z16_fetch_usbserialv+0x40>)
   d532e:	f000 f911 	bl	d5554 <__aeabi_atexit>
	return _usbserial;
}
   d5332:	4802      	ldr	r0, [pc, #8]	; (d533c <_Z16_fetch_usbserialv+0x40>)
   d5334:	b007      	add	sp, #28
   d5336:	bd30      	pop	{r4, r5, pc}
   d5338:	2003e708 	.word	0x2003e708
   d533c:	2003e70c 	.word	0x2003e70c
   d5340:	2003e3a4 	.word	0x2003e3a4
   d5344:	000d523d 	.word	0x000d523d

000d5348 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5348:	2200      	movs	r2, #0
   d534a:	4611      	mov	r1, r2
   d534c:	6840      	ldr	r0, [r0, #4]
   d534e:	f7ff ba69 	b.w	d4824 <network_ready>

000d5352 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5352:	2200      	movs	r2, #0
   d5354:	4611      	mov	r1, r2
   d5356:	6840      	ldr	r0, [r0, #4]
   d5358:	f7ff ba84 	b.w	d4864 <network_listening>

000d535c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d535c:	2200      	movs	r2, #0
   d535e:	4611      	mov	r1, r2
   d5360:	6840      	ldr	r0, [r0, #4]
   d5362:	f7ff ba8f 	b.w	d4884 <network_get_listen_timeout>

000d5366 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5366:	2200      	movs	r2, #0
   d5368:	6840      	ldr	r0, [r0, #4]
   d536a:	f7ff ba83 	b.w	d4874 <network_set_listen_timeout>

000d536e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d536e:	2200      	movs	r2, #0
   d5370:	f081 0101 	eor.w	r1, r1, #1
   d5374:	6840      	ldr	r0, [r0, #4]
   d5376:	f7ff ba6d 	b.w	d4854 <network_listen>

000d537a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d537a:	2300      	movs	r3, #0
   d537c:	461a      	mov	r2, r3
   d537e:	4619      	mov	r1, r3
   d5380:	6840      	ldr	r0, [r0, #4]
   d5382:	f7ff ba5f 	b.w	d4844 <network_off>

000d5386 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5386:	2300      	movs	r3, #0
   d5388:	461a      	mov	r2, r3
   d538a:	4619      	mov	r1, r3
   d538c:	6840      	ldr	r0, [r0, #4]
   d538e:	f7ff ba51 	b.w	d4834 <network_on>

000d5392 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5392:	2200      	movs	r2, #0
   d5394:	4611      	mov	r1, r2
   d5396:	6840      	ldr	r0, [r0, #4]
   d5398:	f7ff ba34 	b.w	d4804 <network_connecting>

000d539c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d539c:	2200      	movs	r2, #0
   d539e:	2102      	movs	r1, #2
   d53a0:	6840      	ldr	r0, [r0, #4]
   d53a2:	f7ff ba37 	b.w	d4814 <network_disconnect>

000d53a6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d53a6:	2300      	movs	r3, #0
   d53a8:	461a      	mov	r2, r3
   d53aa:	6840      	ldr	r0, [r0, #4]
   d53ac:	f7ff ba22 	b.w	d47f4 <network_connect>

000d53b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d53b0:	4b02      	ldr	r3, [pc, #8]	; (d53bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d53b2:	2204      	movs	r2, #4
   d53b4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d53b6:	4a02      	ldr	r2, [pc, #8]	; (d53c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d53b8:	601a      	str	r2, [r3, #0]
   d53ba:	4770      	bx	lr
   d53bc:	2003e720 	.word	0x2003e720
   d53c0:	000d66ac 	.word	0x000d66ac

000d53c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d53c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d53c6:	4b0c      	ldr	r3, [pc, #48]	; (d53f8 <serialEventRun+0x34>)
   d53c8:	b133      	cbz	r3, d53d8 <serialEventRun+0x14>
   d53ca:	f7ff ff97 	bl	d52fc <_Z16_fetch_usbserialv>
   d53ce:	6803      	ldr	r3, [r0, #0]
   d53d0:	691b      	ldr	r3, [r3, #16]
   d53d2:	4798      	blx	r3
   d53d4:	2800      	cmp	r0, #0
   d53d6:	dc09      	bgt.n	d53ec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d53d8:	4b08      	ldr	r3, [pc, #32]	; (d53fc <serialEventRun+0x38>)
   d53da:	b163      	cbz	r3, d53f6 <serialEventRun+0x32>
   d53dc:	f7ff ff06 	bl	d51ec <_Z22__fetch_global_Serial1v>
   d53e0:	6803      	ldr	r3, [r0, #0]
   d53e2:	691b      	ldr	r3, [r3, #16]
   d53e4:	4798      	blx	r3
   d53e6:	2800      	cmp	r0, #0
   d53e8:	dc03      	bgt.n	d53f2 <serialEventRun+0x2e>
   d53ea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d53ec:	f3af 8000 	nop.w
   d53f0:	e7f2      	b.n	d53d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d53f2:	f3af 8000 	nop.w
   d53f6:	bd08      	pop	{r3, pc}
	...

000d5400 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5400:	b508      	push	{r3, lr}
	serialEventRun();
   d5402:	f7ff ffdf 	bl	d53c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5406:	f7ff f8d9 	bl	d45bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d540a:	4b01      	ldr	r3, [pc, #4]	; (d5410 <_post_loop+0x10>)
   d540c:	6018      	str	r0, [r3, #0]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	2003e730 	.word	0x2003e730

000d5414 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5414:	4802      	ldr	r0, [pc, #8]	; (d5420 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5416:	4a03      	ldr	r2, [pc, #12]	; (d5424 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5418:	4903      	ldr	r1, [pc, #12]	; (d5428 <_Z33system_initialize_user_backup_ramv+0x14>)
   d541a:	1a12      	subs	r2, r2, r0
   d541c:	f000 bf12 	b.w	d6244 <memcpy>
   d5420:	2003f400 	.word	0x2003f400
   d5424:	2003f404 	.word	0x2003f404
   d5428:	000d6780 	.word	0x000d6780

000d542c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d542c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d542e:	2300      	movs	r3, #0
   d5430:	9300      	str	r3, [sp, #0]
   d5432:	461a      	mov	r2, r3
   d5434:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5438:	f7ff f9ca 	bl	d47d0 <system_ctrl_set_result>
}
   d543c:	b003      	add	sp, #12
   d543e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5444 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5444:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5446:	8843      	ldrh	r3, [r0, #2]
   d5448:	2b0a      	cmp	r3, #10
   d544a:	d008      	beq.n	d545e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d544c:	2b50      	cmp	r3, #80	; 0x50
   d544e:	d109      	bne.n	d5464 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5450:	4b09      	ldr	r3, [pc, #36]	; (d5478 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5452:	681b      	ldr	r3, [r3, #0]
   d5454:	b13b      	cbz	r3, d5466 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5456:	b003      	add	sp, #12
   d5458:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d545c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d545e:	f7ff ffe5 	bl	d542c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5462:	e006      	b.n	d5472 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5464:	2300      	movs	r3, #0
   d5466:	9300      	str	r3, [sp, #0]
   d5468:	461a      	mov	r2, r3
   d546a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d546e:	f7ff f9af 	bl	d47d0 <system_ctrl_set_result>
        break;
    }
}
   d5472:	b003      	add	sp, #12
   d5474:	f85d fb04 	ldr.w	pc, [sp], #4
   d5478:	2003e728 	.word	0x2003e728

000d547c <module_user_init_hook>:

void module_user_init_hook()
{
   d547c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d547e:	4c10      	ldr	r4, [pc, #64]	; (d54c0 <module_user_init_hook+0x44>)
   d5480:	4d10      	ldr	r5, [pc, #64]	; (d54c4 <module_user_init_hook+0x48>)
   d5482:	6823      	ldr	r3, [r4, #0]
   d5484:	42ab      	cmp	r3, r5
   d5486:	4b10      	ldr	r3, [pc, #64]	; (d54c8 <module_user_init_hook+0x4c>)
   d5488:	bf0c      	ite	eq
   d548a:	2201      	moveq	r2, #1
   d548c:	2200      	movne	r2, #0
   d548e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5490:	d002      	beq.n	d5498 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5492:	f7ff ffbf 	bl	d5414 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5496:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5498:	f7ff f888 	bl	d45ac <HAL_RNG_GetRandomNumber>
   d549c:	4604      	mov	r4, r0
    srand(seed);
   d549e:	f000 fee5 	bl	d626c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d54a2:	4b0a      	ldr	r3, [pc, #40]	; (d54cc <module_user_init_hook+0x50>)
   d54a4:	b113      	cbz	r3, d54ac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d54a6:	4620      	mov	r0, r4
   d54a8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d54ac:	2100      	movs	r1, #0
   d54ae:	4807      	ldr	r0, [pc, #28]	; (d54cc <module_user_init_hook+0x50>)
   d54b0:	f7ff f998 	bl	d47e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d54b4:	2100      	movs	r1, #0
   d54b6:	4806      	ldr	r0, [pc, #24]	; (d54d0 <module_user_init_hook+0x54>)
}
   d54b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d54bc:	f7ff b97e 	b.w	d47bc <system_ctrl_set_app_request_handler>
   d54c0:	2003f400 	.word	0x2003f400
   d54c4:	9a271c1e 	.word	0x9a271c1e
   d54c8:	2003e72c 	.word	0x2003e72c
   d54cc:	00000000 	.word	0x00000000
   d54d0:	000d5445 	.word	0x000d5445

000d54d4 <_Z17acquireWireBufferv>:
   d54d4:	b570      	push	{r4, r5, r6, lr}
   d54d6:	4604      	mov	r4, r0
   d54d8:	2514      	movs	r5, #20
   d54da:	462a      	mov	r2, r5
   d54dc:	4e09      	ldr	r6, [pc, #36]	; (d5504 <_Z17acquireWireBufferv+0x30>)
   d54de:	2100      	movs	r1, #0
   d54e0:	f000 febb 	bl	d625a <memset>
   d54e4:	8025      	strh	r5, [r4, #0]
   d54e6:	2520      	movs	r5, #32
   d54e8:	4631      	mov	r1, r6
   d54ea:	60a5      	str	r5, [r4, #8]
   d54ec:	6125      	str	r5, [r4, #16]
   d54ee:	4628      	mov	r0, r5
   d54f0:	f000 f84f 	bl	d5592 <_ZnajRKSt9nothrow_t>
   d54f4:	4631      	mov	r1, r6
   d54f6:	6060      	str	r0, [r4, #4]
   d54f8:	4628      	mov	r0, r5
   d54fa:	f000 f84a 	bl	d5592 <_ZnajRKSt9nothrow_t>
   d54fe:	60e0      	str	r0, [r4, #12]
   d5500:	4620      	mov	r0, r4
   d5502:	bd70      	pop	{r4, r5, r6, pc}
   d5504:	000d66d8 	.word	0x000d66d8

000d5508 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5508:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d550a:	4d0e      	ldr	r5, [pc, #56]	; (d5544 <_Z19__fetch_global_Wirev+0x3c>)
   d550c:	6829      	ldr	r1, [r5, #0]
   d550e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5512:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5514:	d113      	bne.n	d553e <_Z19__fetch_global_Wirev+0x36>
   d5516:	4628      	mov	r0, r5
   d5518:	f7fe fdc3 	bl	d40a2 <__cxa_guard_acquire>
   d551c:	b178      	cbz	r0, d553e <_Z19__fetch_global_Wirev+0x36>
   d551e:	a801      	add	r0, sp, #4
   d5520:	f7ff ffd8 	bl	d54d4 <_Z17acquireWireBufferv>
   d5524:	aa01      	add	r2, sp, #4
   d5526:	4621      	mov	r1, r4
   d5528:	4807      	ldr	r0, [pc, #28]	; (d5548 <_Z19__fetch_global_Wirev+0x40>)
   d552a:	f7ff fa57 	bl	d49dc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d552e:	4628      	mov	r0, r5
   d5530:	f7fe fdbc 	bl	d40ac <__cxa_guard_release>
   d5534:	4a05      	ldr	r2, [pc, #20]	; (d554c <_Z19__fetch_global_Wirev+0x44>)
   d5536:	4906      	ldr	r1, [pc, #24]	; (d5550 <_Z19__fetch_global_Wirev+0x48>)
   d5538:	4803      	ldr	r0, [pc, #12]	; (d5548 <_Z19__fetch_global_Wirev+0x40>)
   d553a:	f000 f80b 	bl	d5554 <__aeabi_atexit>
	return wire;
}
   d553e:	4802      	ldr	r0, [pc, #8]	; (d5548 <_Z19__fetch_global_Wirev+0x40>)
   d5540:	b007      	add	sp, #28
   d5542:	bd30      	pop	{r4, r5, pc}
   d5544:	2003e734 	.word	0x2003e734
   d5548:	2003e738 	.word	0x2003e738
   d554c:	2003e3a4 	.word	0x2003e3a4
   d5550:	000d4985 	.word	0x000d4985

000d5554 <__aeabi_atexit>:
   d5554:	460b      	mov	r3, r1
   d5556:	4601      	mov	r1, r0
   d5558:	4618      	mov	r0, r3
   d555a:	f000 be65 	b.w	d6228 <__cxa_atexit>

000d555e <_ZdlPvj>:
   d555e:	f7fe bd9c 	b.w	d409a <_ZdlPv>
	...

000d5564 <_ZSt15get_new_handlerv>:
   d5564:	4b02      	ldr	r3, [pc, #8]	; (d5570 <_ZSt15get_new_handlerv+0xc>)
   d5566:	6818      	ldr	r0, [r3, #0]
   d5568:	f3bf 8f5f 	dmb	sy
   d556c:	4770      	bx	lr
   d556e:	bf00      	nop
   d5570:	2003e74c 	.word	0x2003e74c

000d5574 <_ZnwjRKSt9nothrow_t>:
   d5574:	b510      	push	{r4, lr}
   d5576:	2800      	cmp	r0, #0
   d5578:	bf14      	ite	ne
   d557a:	4604      	movne	r4, r0
   d557c:	2401      	moveq	r4, #1
   d557e:	4620      	mov	r0, r4
   d5580:	f7ff f988 	bl	d4894 <malloc>
   d5584:	b920      	cbnz	r0, d5590 <_ZnwjRKSt9nothrow_t+0x1c>
   d5586:	f7ff ffed 	bl	d5564 <_ZSt15get_new_handlerv>
   d558a:	b108      	cbz	r0, d5590 <_ZnwjRKSt9nothrow_t+0x1c>
   d558c:	4780      	blx	r0
   d558e:	e7f6      	b.n	d557e <_ZnwjRKSt9nothrow_t+0xa>
   d5590:	bd10      	pop	{r4, pc}

000d5592 <_ZnajRKSt9nothrow_t>:
   d5592:	f7ff bfef 	b.w	d5574 <_ZnwjRKSt9nothrow_t>
	...

000d5598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5598:	4b24      	ldr	r3, [pc, #144]	; (d562c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d559a:	681a      	ldr	r2, [r3, #0]
   d559c:	07d0      	lsls	r0, r2, #31
   d559e:	bf5c      	itt	pl
   d55a0:	2201      	movpl	r2, #1
   d55a2:	601a      	strpl	r2, [r3, #0]
   d55a4:	4b22      	ldr	r3, [pc, #136]	; (d5630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d55a6:	681a      	ldr	r2, [r3, #0]
   d55a8:	07d1      	lsls	r1, r2, #31
   d55aa:	bf5c      	itt	pl
   d55ac:	2201      	movpl	r2, #1
   d55ae:	601a      	strpl	r2, [r3, #0]
   d55b0:	4b20      	ldr	r3, [pc, #128]	; (d5634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d55b2:	681a      	ldr	r2, [r3, #0]
   d55b4:	07d2      	lsls	r2, r2, #31
   d55b6:	bf5c      	itt	pl
   d55b8:	2201      	movpl	r2, #1
   d55ba:	601a      	strpl	r2, [r3, #0]
   d55bc:	4b1e      	ldr	r3, [pc, #120]	; (d5638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d55be:	681a      	ldr	r2, [r3, #0]
   d55c0:	07d0      	lsls	r0, r2, #31
   d55c2:	bf5c      	itt	pl
   d55c4:	2201      	movpl	r2, #1
   d55c6:	601a      	strpl	r2, [r3, #0]
   d55c8:	4b1c      	ldr	r3, [pc, #112]	; (d563c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d55ca:	681a      	ldr	r2, [r3, #0]
   d55cc:	07d1      	lsls	r1, r2, #31
   d55ce:	bf5c      	itt	pl
   d55d0:	2201      	movpl	r2, #1
   d55d2:	601a      	strpl	r2, [r3, #0]
   d55d4:	4b1a      	ldr	r3, [pc, #104]	; (d5640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d55d6:	681a      	ldr	r2, [r3, #0]
   d55d8:	07d2      	lsls	r2, r2, #31
   d55da:	bf5c      	itt	pl
   d55dc:	2201      	movpl	r2, #1
   d55de:	601a      	strpl	r2, [r3, #0]
   d55e0:	4b18      	ldr	r3, [pc, #96]	; (d5644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d55e2:	681a      	ldr	r2, [r3, #0]
   d55e4:	07d0      	lsls	r0, r2, #31
   d55e6:	bf5c      	itt	pl
   d55e8:	2201      	movpl	r2, #1
   d55ea:	601a      	strpl	r2, [r3, #0]
   d55ec:	4b16      	ldr	r3, [pc, #88]	; (d5648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d55ee:	681a      	ldr	r2, [r3, #0]
   d55f0:	07d1      	lsls	r1, r2, #31
   d55f2:	bf5c      	itt	pl
   d55f4:	2201      	movpl	r2, #1
   d55f6:	601a      	strpl	r2, [r3, #0]
   d55f8:	4b14      	ldr	r3, [pc, #80]	; (d564c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d55fa:	681a      	ldr	r2, [r3, #0]
   d55fc:	07d2      	lsls	r2, r2, #31
   d55fe:	bf5c      	itt	pl
   d5600:	2201      	movpl	r2, #1
   d5602:	601a      	strpl	r2, [r3, #0]
   d5604:	4b12      	ldr	r3, [pc, #72]	; (d5650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5606:	681a      	ldr	r2, [r3, #0]
   d5608:	07d0      	lsls	r0, r2, #31
   d560a:	bf5c      	itt	pl
   d560c:	2201      	movpl	r2, #1
   d560e:	601a      	strpl	r2, [r3, #0]
   d5610:	4b10      	ldr	r3, [pc, #64]	; (d5654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5612:	681a      	ldr	r2, [r3, #0]
   d5614:	07d1      	lsls	r1, r2, #31
   d5616:	bf5c      	itt	pl
   d5618:	2201      	movpl	r2, #1
   d561a:	601a      	strpl	r2, [r3, #0]
   d561c:	4b0e      	ldr	r3, [pc, #56]	; (d5658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d561e:	681a      	ldr	r2, [r3, #0]
   d5620:	07d2      	lsls	r2, r2, #31
   d5622:	bf5c      	itt	pl
   d5624:	2201      	movpl	r2, #1
   d5626:	601a      	strpl	r2, [r3, #0]
   d5628:	4770      	bx	lr
   d562a:	bf00      	nop
   d562c:	2003e77c 	.word	0x2003e77c
   d5630:	2003e778 	.word	0x2003e778
   d5634:	2003e774 	.word	0x2003e774
   d5638:	2003e770 	.word	0x2003e770
   d563c:	2003e76c 	.word	0x2003e76c
   d5640:	2003e768 	.word	0x2003e768
   d5644:	2003e764 	.word	0x2003e764
   d5648:	2003e760 	.word	0x2003e760
   d564c:	2003e75c 	.word	0x2003e75c
   d5650:	2003e758 	.word	0x2003e758
   d5654:	2003e754 	.word	0x2003e754
   d5658:	2003e750 	.word	0x2003e750

000d565c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d565c:	4b18      	ldr	r3, [pc, #96]	; (d56c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d565e:	681a      	ldr	r2, [r3, #0]
   d5660:	07d1      	lsls	r1, r2, #31
   d5662:	bf5c      	itt	pl
   d5664:	2201      	movpl	r2, #1
   d5666:	601a      	strpl	r2, [r3, #0]
   d5668:	4b16      	ldr	r3, [pc, #88]	; (d56c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d566a:	681a      	ldr	r2, [r3, #0]
   d566c:	07d2      	lsls	r2, r2, #31
   d566e:	bf5c      	itt	pl
   d5670:	2201      	movpl	r2, #1
   d5672:	601a      	strpl	r2, [r3, #0]
   d5674:	4b14      	ldr	r3, [pc, #80]	; (d56c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5676:	681a      	ldr	r2, [r3, #0]
   d5678:	07d0      	lsls	r0, r2, #31
   d567a:	bf5c      	itt	pl
   d567c:	2201      	movpl	r2, #1
   d567e:	601a      	strpl	r2, [r3, #0]
   d5680:	4b12      	ldr	r3, [pc, #72]	; (d56cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5682:	681a      	ldr	r2, [r3, #0]
   d5684:	07d1      	lsls	r1, r2, #31
   d5686:	bf5c      	itt	pl
   d5688:	2201      	movpl	r2, #1
   d568a:	601a      	strpl	r2, [r3, #0]
   d568c:	4b10      	ldr	r3, [pc, #64]	; (d56d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d568e:	681a      	ldr	r2, [r3, #0]
   d5690:	07d2      	lsls	r2, r2, #31
   d5692:	bf5c      	itt	pl
   d5694:	2201      	movpl	r2, #1
   d5696:	601a      	strpl	r2, [r3, #0]
   d5698:	4b0e      	ldr	r3, [pc, #56]	; (d56d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d569a:	681a      	ldr	r2, [r3, #0]
   d569c:	07d0      	lsls	r0, r2, #31
   d569e:	bf5c      	itt	pl
   d56a0:	2201      	movpl	r2, #1
   d56a2:	601a      	strpl	r2, [r3, #0]
   d56a4:	4b0c      	ldr	r3, [pc, #48]	; (d56d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d56a6:	681a      	ldr	r2, [r3, #0]
   d56a8:	07d1      	lsls	r1, r2, #31
   d56aa:	bf5c      	itt	pl
   d56ac:	2201      	movpl	r2, #1
   d56ae:	601a      	strpl	r2, [r3, #0]
   d56b0:	4b0a      	ldr	r3, [pc, #40]	; (d56dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d56b2:	681a      	ldr	r2, [r3, #0]
   d56b4:	07d2      	lsls	r2, r2, #31
   d56b6:	bf5c      	itt	pl
   d56b8:	2201      	movpl	r2, #1
   d56ba:	601a      	strpl	r2, [r3, #0]
   d56bc:	4770      	bx	lr
   d56be:	bf00      	nop
   d56c0:	2003e79c 	.word	0x2003e79c
   d56c4:	2003e798 	.word	0x2003e798
   d56c8:	2003e794 	.word	0x2003e794
   d56cc:	2003e790 	.word	0x2003e790
   d56d0:	2003e78c 	.word	0x2003e78c
   d56d4:	2003e788 	.word	0x2003e788
   d56d8:	2003e784 	.word	0x2003e784
   d56dc:	2003e780 	.word	0x2003e780

000d56e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d56e0:	4b18      	ldr	r3, [pc, #96]	; (d5744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d56e2:	681a      	ldr	r2, [r3, #0]
   d56e4:	07d1      	lsls	r1, r2, #31
   d56e6:	bf5c      	itt	pl
   d56e8:	2201      	movpl	r2, #1
   d56ea:	601a      	strpl	r2, [r3, #0]
   d56ec:	4b16      	ldr	r3, [pc, #88]	; (d5748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d56ee:	681a      	ldr	r2, [r3, #0]
   d56f0:	07d2      	lsls	r2, r2, #31
   d56f2:	bf5c      	itt	pl
   d56f4:	2201      	movpl	r2, #1
   d56f6:	601a      	strpl	r2, [r3, #0]
   d56f8:	4b14      	ldr	r3, [pc, #80]	; (d574c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d56fa:	681a      	ldr	r2, [r3, #0]
   d56fc:	07d0      	lsls	r0, r2, #31
   d56fe:	bf5c      	itt	pl
   d5700:	2201      	movpl	r2, #1
   d5702:	601a      	strpl	r2, [r3, #0]
   d5704:	4b12      	ldr	r3, [pc, #72]	; (d5750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5706:	681a      	ldr	r2, [r3, #0]
   d5708:	07d1      	lsls	r1, r2, #31
   d570a:	bf5c      	itt	pl
   d570c:	2201      	movpl	r2, #1
   d570e:	601a      	strpl	r2, [r3, #0]
   d5710:	4b10      	ldr	r3, [pc, #64]	; (d5754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5712:	681a      	ldr	r2, [r3, #0]
   d5714:	07d2      	lsls	r2, r2, #31
   d5716:	bf5c      	itt	pl
   d5718:	2201      	movpl	r2, #1
   d571a:	601a      	strpl	r2, [r3, #0]
   d571c:	4b0e      	ldr	r3, [pc, #56]	; (d5758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d571e:	681a      	ldr	r2, [r3, #0]
   d5720:	07d0      	lsls	r0, r2, #31
   d5722:	bf5c      	itt	pl
   d5724:	2201      	movpl	r2, #1
   d5726:	601a      	strpl	r2, [r3, #0]
   d5728:	4b0c      	ldr	r3, [pc, #48]	; (d575c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d572a:	681a      	ldr	r2, [r3, #0]
   d572c:	07d1      	lsls	r1, r2, #31
   d572e:	bf5c      	itt	pl
   d5730:	2201      	movpl	r2, #1
   d5732:	601a      	strpl	r2, [r3, #0]
   d5734:	4b0a      	ldr	r3, [pc, #40]	; (d5760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5736:	681a      	ldr	r2, [r3, #0]
   d5738:	07d2      	lsls	r2, r2, #31
   d573a:	bf5c      	itt	pl
   d573c:	2201      	movpl	r2, #1
   d573e:	601a      	strpl	r2, [r3, #0]
   d5740:	4770      	bx	lr
   d5742:	bf00      	nop
   d5744:	2003e7bc 	.word	0x2003e7bc
   d5748:	2003e7b8 	.word	0x2003e7b8
   d574c:	2003e7b4 	.word	0x2003e7b4
   d5750:	2003e7b0 	.word	0x2003e7b0
   d5754:	2003e7ac 	.word	0x2003e7ac
   d5758:	2003e7a8 	.word	0x2003e7a8
   d575c:	2003e7a4 	.word	0x2003e7a4
   d5760:	2003e7a0 	.word	0x2003e7a0

000d5764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5764:	4b24      	ldr	r3, [pc, #144]	; (d57f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5766:	681a      	ldr	r2, [r3, #0]
   d5768:	07d0      	lsls	r0, r2, #31
   d576a:	bf5c      	itt	pl
   d576c:	2201      	movpl	r2, #1
   d576e:	601a      	strpl	r2, [r3, #0]
   d5770:	4b22      	ldr	r3, [pc, #136]	; (d57fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5772:	681a      	ldr	r2, [r3, #0]
   d5774:	07d1      	lsls	r1, r2, #31
   d5776:	bf5c      	itt	pl
   d5778:	2201      	movpl	r2, #1
   d577a:	601a      	strpl	r2, [r3, #0]
   d577c:	4b20      	ldr	r3, [pc, #128]	; (d5800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d577e:	681a      	ldr	r2, [r3, #0]
   d5780:	07d2      	lsls	r2, r2, #31
   d5782:	bf5c      	itt	pl
   d5784:	2201      	movpl	r2, #1
   d5786:	601a      	strpl	r2, [r3, #0]
   d5788:	4b1e      	ldr	r3, [pc, #120]	; (d5804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d578a:	681a      	ldr	r2, [r3, #0]
   d578c:	07d0      	lsls	r0, r2, #31
   d578e:	bf5c      	itt	pl
   d5790:	2201      	movpl	r2, #1
   d5792:	601a      	strpl	r2, [r3, #0]
   d5794:	4b1c      	ldr	r3, [pc, #112]	; (d5808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5796:	681a      	ldr	r2, [r3, #0]
   d5798:	07d1      	lsls	r1, r2, #31
   d579a:	bf5c      	itt	pl
   d579c:	2201      	movpl	r2, #1
   d579e:	601a      	strpl	r2, [r3, #0]
   d57a0:	4b1a      	ldr	r3, [pc, #104]	; (d580c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d57a2:	681a      	ldr	r2, [r3, #0]
   d57a4:	07d2      	lsls	r2, r2, #31
   d57a6:	bf5c      	itt	pl
   d57a8:	2201      	movpl	r2, #1
   d57aa:	601a      	strpl	r2, [r3, #0]
   d57ac:	4b18      	ldr	r3, [pc, #96]	; (d5810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d57ae:	681a      	ldr	r2, [r3, #0]
   d57b0:	07d0      	lsls	r0, r2, #31
   d57b2:	bf5c      	itt	pl
   d57b4:	2201      	movpl	r2, #1
   d57b6:	601a      	strpl	r2, [r3, #0]
   d57b8:	4b16      	ldr	r3, [pc, #88]	; (d5814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d57ba:	681a      	ldr	r2, [r3, #0]
   d57bc:	07d1      	lsls	r1, r2, #31
   d57be:	bf5c      	itt	pl
   d57c0:	2201      	movpl	r2, #1
   d57c2:	601a      	strpl	r2, [r3, #0]
   d57c4:	4b14      	ldr	r3, [pc, #80]	; (d5818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d57c6:	681a      	ldr	r2, [r3, #0]
   d57c8:	07d2      	lsls	r2, r2, #31
   d57ca:	bf5c      	itt	pl
   d57cc:	2201      	movpl	r2, #1
   d57ce:	601a      	strpl	r2, [r3, #0]
   d57d0:	4b12      	ldr	r3, [pc, #72]	; (d581c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d57d2:	681a      	ldr	r2, [r3, #0]
   d57d4:	07d0      	lsls	r0, r2, #31
   d57d6:	bf5c      	itt	pl
   d57d8:	2201      	movpl	r2, #1
   d57da:	601a      	strpl	r2, [r3, #0]
   d57dc:	4b10      	ldr	r3, [pc, #64]	; (d5820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d57de:	681a      	ldr	r2, [r3, #0]
   d57e0:	07d1      	lsls	r1, r2, #31
   d57e2:	bf5c      	itt	pl
   d57e4:	2201      	movpl	r2, #1
   d57e6:	601a      	strpl	r2, [r3, #0]
   d57e8:	4b0e      	ldr	r3, [pc, #56]	; (d5824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d57ea:	681a      	ldr	r2, [r3, #0]
   d57ec:	07d2      	lsls	r2, r2, #31
   d57ee:	bf5c      	itt	pl
   d57f0:	2201      	movpl	r2, #1
   d57f2:	601a      	strpl	r2, [r3, #0]
   d57f4:	4770      	bx	lr
   d57f6:	bf00      	nop
   d57f8:	2003e7ec 	.word	0x2003e7ec
   d57fc:	2003e7e8 	.word	0x2003e7e8
   d5800:	2003e7e4 	.word	0x2003e7e4
   d5804:	2003e7e0 	.word	0x2003e7e0
   d5808:	2003e7dc 	.word	0x2003e7dc
   d580c:	2003e7d8 	.word	0x2003e7d8
   d5810:	2003e7d4 	.word	0x2003e7d4
   d5814:	2003e7d0 	.word	0x2003e7d0
   d5818:	2003e7cc 	.word	0x2003e7cc
   d581c:	2003e7c8 	.word	0x2003e7c8
   d5820:	2003e7c4 	.word	0x2003e7c4
   d5824:	2003e7c0 	.word	0x2003e7c0

000d5828 <__aeabi_drsub>:
   d5828:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d582c:	e002      	b.n	d5834 <__adddf3>
   d582e:	bf00      	nop

000d5830 <__aeabi_dsub>:
   d5830:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5834 <__adddf3>:
   d5834:	b530      	push	{r4, r5, lr}
   d5836:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d583a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d583e:	ea94 0f05 	teq	r4, r5
   d5842:	bf08      	it	eq
   d5844:	ea90 0f02 	teqeq	r0, r2
   d5848:	bf1f      	itttt	ne
   d584a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d584e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5852:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5856:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d585a:	f000 80e2 	beq.w	d5a22 <__adddf3+0x1ee>
   d585e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5862:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5866:	bfb8      	it	lt
   d5868:	426d      	neglt	r5, r5
   d586a:	dd0c      	ble.n	d5886 <__adddf3+0x52>
   d586c:	442c      	add	r4, r5
   d586e:	ea80 0202 	eor.w	r2, r0, r2
   d5872:	ea81 0303 	eor.w	r3, r1, r3
   d5876:	ea82 0000 	eor.w	r0, r2, r0
   d587a:	ea83 0101 	eor.w	r1, r3, r1
   d587e:	ea80 0202 	eor.w	r2, r0, r2
   d5882:	ea81 0303 	eor.w	r3, r1, r3
   d5886:	2d36      	cmp	r5, #54	; 0x36
   d5888:	bf88      	it	hi
   d588a:	bd30      	pophi	{r4, r5, pc}
   d588c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5890:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5894:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5898:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d589c:	d002      	beq.n	d58a4 <__adddf3+0x70>
   d589e:	4240      	negs	r0, r0
   d58a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d58a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d58a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d58ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d58b0:	d002      	beq.n	d58b8 <__adddf3+0x84>
   d58b2:	4252      	negs	r2, r2
   d58b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d58b8:	ea94 0f05 	teq	r4, r5
   d58bc:	f000 80a7 	beq.w	d5a0e <__adddf3+0x1da>
   d58c0:	f1a4 0401 	sub.w	r4, r4, #1
   d58c4:	f1d5 0e20 	rsbs	lr, r5, #32
   d58c8:	db0d      	blt.n	d58e6 <__adddf3+0xb2>
   d58ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   d58ce:	fa22 f205 	lsr.w	r2, r2, r5
   d58d2:	1880      	adds	r0, r0, r2
   d58d4:	f141 0100 	adc.w	r1, r1, #0
   d58d8:	fa03 f20e 	lsl.w	r2, r3, lr
   d58dc:	1880      	adds	r0, r0, r2
   d58de:	fa43 f305 	asr.w	r3, r3, r5
   d58e2:	4159      	adcs	r1, r3
   d58e4:	e00e      	b.n	d5904 <__adddf3+0xd0>
   d58e6:	f1a5 0520 	sub.w	r5, r5, #32
   d58ea:	f10e 0e20 	add.w	lr, lr, #32
   d58ee:	2a01      	cmp	r2, #1
   d58f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d58f4:	bf28      	it	cs
   d58f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d58fa:	fa43 f305 	asr.w	r3, r3, r5
   d58fe:	18c0      	adds	r0, r0, r3
   d5900:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5904:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5908:	d507      	bpl.n	d591a <__adddf3+0xe6>
   d590a:	f04f 0e00 	mov.w	lr, #0
   d590e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5912:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5916:	eb6e 0101 	sbc.w	r1, lr, r1
   d591a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d591e:	d31b      	bcc.n	d5958 <__adddf3+0x124>
   d5920:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5924:	d30c      	bcc.n	d5940 <__adddf3+0x10c>
   d5926:	0849      	lsrs	r1, r1, #1
   d5928:	ea5f 0030 	movs.w	r0, r0, rrx
   d592c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5930:	f104 0401 	add.w	r4, r4, #1
   d5934:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5938:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d593c:	f080 809a 	bcs.w	d5a74 <__adddf3+0x240>
   d5940:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5944:	bf08      	it	eq
   d5946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d594a:	f150 0000 	adcs.w	r0, r0, #0
   d594e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5952:	ea41 0105 	orr.w	r1, r1, r5
   d5956:	bd30      	pop	{r4, r5, pc}
   d5958:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d595c:	4140      	adcs	r0, r0
   d595e:	eb41 0101 	adc.w	r1, r1, r1
   d5962:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5966:	f1a4 0401 	sub.w	r4, r4, #1
   d596a:	d1e9      	bne.n	d5940 <__adddf3+0x10c>
   d596c:	f091 0f00 	teq	r1, #0
   d5970:	bf04      	itt	eq
   d5972:	4601      	moveq	r1, r0
   d5974:	2000      	moveq	r0, #0
   d5976:	fab1 f381 	clz	r3, r1
   d597a:	bf08      	it	eq
   d597c:	3320      	addeq	r3, #32
   d597e:	f1a3 030b 	sub.w	r3, r3, #11
   d5982:	f1b3 0220 	subs.w	r2, r3, #32
   d5986:	da0c      	bge.n	d59a2 <__adddf3+0x16e>
   d5988:	320c      	adds	r2, #12
   d598a:	dd08      	ble.n	d599e <__adddf3+0x16a>
   d598c:	f102 0c14 	add.w	ip, r2, #20
   d5990:	f1c2 020c 	rsb	r2, r2, #12
   d5994:	fa01 f00c 	lsl.w	r0, r1, ip
   d5998:	fa21 f102 	lsr.w	r1, r1, r2
   d599c:	e00c      	b.n	d59b8 <__adddf3+0x184>
   d599e:	f102 0214 	add.w	r2, r2, #20
   d59a2:	bfd8      	it	le
   d59a4:	f1c2 0c20 	rsble	ip, r2, #32
   d59a8:	fa01 f102 	lsl.w	r1, r1, r2
   d59ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   d59b0:	bfdc      	itt	le
   d59b2:	ea41 010c 	orrle.w	r1, r1, ip
   d59b6:	4090      	lslle	r0, r2
   d59b8:	1ae4      	subs	r4, r4, r3
   d59ba:	bfa2      	ittt	ge
   d59bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d59c0:	4329      	orrge	r1, r5
   d59c2:	bd30      	popge	{r4, r5, pc}
   d59c4:	ea6f 0404 	mvn.w	r4, r4
   d59c8:	3c1f      	subs	r4, #31
   d59ca:	da1c      	bge.n	d5a06 <__adddf3+0x1d2>
   d59cc:	340c      	adds	r4, #12
   d59ce:	dc0e      	bgt.n	d59ee <__adddf3+0x1ba>
   d59d0:	f104 0414 	add.w	r4, r4, #20
   d59d4:	f1c4 0220 	rsb	r2, r4, #32
   d59d8:	fa20 f004 	lsr.w	r0, r0, r4
   d59dc:	fa01 f302 	lsl.w	r3, r1, r2
   d59e0:	ea40 0003 	orr.w	r0, r0, r3
   d59e4:	fa21 f304 	lsr.w	r3, r1, r4
   d59e8:	ea45 0103 	orr.w	r1, r5, r3
   d59ec:	bd30      	pop	{r4, r5, pc}
   d59ee:	f1c4 040c 	rsb	r4, r4, #12
   d59f2:	f1c4 0220 	rsb	r2, r4, #32
   d59f6:	fa20 f002 	lsr.w	r0, r0, r2
   d59fa:	fa01 f304 	lsl.w	r3, r1, r4
   d59fe:	ea40 0003 	orr.w	r0, r0, r3
   d5a02:	4629      	mov	r1, r5
   d5a04:	bd30      	pop	{r4, r5, pc}
   d5a06:	fa21 f004 	lsr.w	r0, r1, r4
   d5a0a:	4629      	mov	r1, r5
   d5a0c:	bd30      	pop	{r4, r5, pc}
   d5a0e:	f094 0f00 	teq	r4, #0
   d5a12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5a16:	bf06      	itte	eq
   d5a18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5a1c:	3401      	addeq	r4, #1
   d5a1e:	3d01      	subne	r5, #1
   d5a20:	e74e      	b.n	d58c0 <__adddf3+0x8c>
   d5a22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a26:	bf18      	it	ne
   d5a28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5a2c:	d029      	beq.n	d5a82 <__adddf3+0x24e>
   d5a2e:	ea94 0f05 	teq	r4, r5
   d5a32:	bf08      	it	eq
   d5a34:	ea90 0f02 	teqeq	r0, r2
   d5a38:	d005      	beq.n	d5a46 <__adddf3+0x212>
   d5a3a:	ea54 0c00 	orrs.w	ip, r4, r0
   d5a3e:	bf04      	itt	eq
   d5a40:	4619      	moveq	r1, r3
   d5a42:	4610      	moveq	r0, r2
   d5a44:	bd30      	pop	{r4, r5, pc}
   d5a46:	ea91 0f03 	teq	r1, r3
   d5a4a:	bf1e      	ittt	ne
   d5a4c:	2100      	movne	r1, #0
   d5a4e:	2000      	movne	r0, #0
   d5a50:	bd30      	popne	{r4, r5, pc}
   d5a52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5a56:	d105      	bne.n	d5a64 <__adddf3+0x230>
   d5a58:	0040      	lsls	r0, r0, #1
   d5a5a:	4149      	adcs	r1, r1
   d5a5c:	bf28      	it	cs
   d5a5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5a62:	bd30      	pop	{r4, r5, pc}
   d5a64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5a68:	bf3c      	itt	cc
   d5a6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5a6e:	bd30      	popcc	{r4, r5, pc}
   d5a70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5a78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5a7c:	f04f 0000 	mov.w	r0, #0
   d5a80:	bd30      	pop	{r4, r5, pc}
   d5a82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a86:	bf1a      	itte	ne
   d5a88:	4619      	movne	r1, r3
   d5a8a:	4610      	movne	r0, r2
   d5a8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a90:	bf1c      	itt	ne
   d5a92:	460b      	movne	r3, r1
   d5a94:	4602      	movne	r2, r0
   d5a96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a9a:	bf06      	itte	eq
   d5a9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5aa0:	ea91 0f03 	teqeq	r1, r3
   d5aa4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5aa8:	bd30      	pop	{r4, r5, pc}
   d5aaa:	bf00      	nop

000d5aac <__aeabi_ui2d>:
   d5aac:	f090 0f00 	teq	r0, #0
   d5ab0:	bf04      	itt	eq
   d5ab2:	2100      	moveq	r1, #0
   d5ab4:	4770      	bxeq	lr
   d5ab6:	b530      	push	{r4, r5, lr}
   d5ab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5abc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ac0:	f04f 0500 	mov.w	r5, #0
   d5ac4:	f04f 0100 	mov.w	r1, #0
   d5ac8:	e750      	b.n	d596c <__adddf3+0x138>
   d5aca:	bf00      	nop

000d5acc <__aeabi_i2d>:
   d5acc:	f090 0f00 	teq	r0, #0
   d5ad0:	bf04      	itt	eq
   d5ad2:	2100      	moveq	r1, #0
   d5ad4:	4770      	bxeq	lr
   d5ad6:	b530      	push	{r4, r5, lr}
   d5ad8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5adc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ae0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ae4:	bf48      	it	mi
   d5ae6:	4240      	negmi	r0, r0
   d5ae8:	f04f 0100 	mov.w	r1, #0
   d5aec:	e73e      	b.n	d596c <__adddf3+0x138>
   d5aee:	bf00      	nop

000d5af0 <__aeabi_f2d>:
   d5af0:	0042      	lsls	r2, r0, #1
   d5af2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5af6:	ea4f 0131 	mov.w	r1, r1, rrx
   d5afa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5afe:	bf1f      	itttt	ne
   d5b00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5b04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5b08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5b0c:	4770      	bxne	lr
   d5b0e:	f092 0f00 	teq	r2, #0
   d5b12:	bf14      	ite	ne
   d5b14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5b18:	4770      	bxeq	lr
   d5b1a:	b530      	push	{r4, r5, lr}
   d5b1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5b20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5b24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5b28:	e720      	b.n	d596c <__adddf3+0x138>
   d5b2a:	bf00      	nop

000d5b2c <__aeabi_ul2d>:
   d5b2c:	ea50 0201 	orrs.w	r2, r0, r1
   d5b30:	bf08      	it	eq
   d5b32:	4770      	bxeq	lr
   d5b34:	b530      	push	{r4, r5, lr}
   d5b36:	f04f 0500 	mov.w	r5, #0
   d5b3a:	e00a      	b.n	d5b52 <__aeabi_l2d+0x16>

000d5b3c <__aeabi_l2d>:
   d5b3c:	ea50 0201 	orrs.w	r2, r0, r1
   d5b40:	bf08      	it	eq
   d5b42:	4770      	bxeq	lr
   d5b44:	b530      	push	{r4, r5, lr}
   d5b46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5b4a:	d502      	bpl.n	d5b52 <__aeabi_l2d+0x16>
   d5b4c:	4240      	negs	r0, r0
   d5b4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5b5e:	f43f aedc 	beq.w	d591a <__adddf3+0xe6>
   d5b62:	f04f 0203 	mov.w	r2, #3
   d5b66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b6a:	bf18      	it	ne
   d5b6c:	3203      	addne	r2, #3
   d5b6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b72:	bf18      	it	ne
   d5b74:	3203      	addne	r2, #3
   d5b76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5b7a:	f1c2 0320 	rsb	r3, r2, #32
   d5b7e:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b82:	fa20 f002 	lsr.w	r0, r0, r2
   d5b86:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b8a:	ea40 000e 	orr.w	r0, r0, lr
   d5b8e:	fa21 f102 	lsr.w	r1, r1, r2
   d5b92:	4414      	add	r4, r2
   d5b94:	e6c1      	b.n	d591a <__adddf3+0xe6>
   d5b96:	bf00      	nop

000d5b98 <__aeabi_dmul>:
   d5b98:	b570      	push	{r4, r5, r6, lr}
   d5b9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5b9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5ba2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5ba6:	bf1d      	ittte	ne
   d5ba8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5bac:	ea94 0f0c 	teqne	r4, ip
   d5bb0:	ea95 0f0c 	teqne	r5, ip
   d5bb4:	f000 f8de 	bleq	d5d74 <__aeabi_dmul+0x1dc>
   d5bb8:	442c      	add	r4, r5
   d5bba:	ea81 0603 	eor.w	r6, r1, r3
   d5bbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5bc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5bc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5bca:	bf18      	it	ne
   d5bcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5bd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5bd8:	d038      	beq.n	d5c4c <__aeabi_dmul+0xb4>
   d5bda:	fba0 ce02 	umull	ip, lr, r0, r2
   d5bde:	f04f 0500 	mov.w	r5, #0
   d5be2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5be6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5bea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5bee:	f04f 0600 	mov.w	r6, #0
   d5bf2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5bf6:	f09c 0f00 	teq	ip, #0
   d5bfa:	bf18      	it	ne
   d5bfc:	f04e 0e01 	orrne.w	lr, lr, #1
   d5c00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5c04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5c08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5c0c:	d204      	bcs.n	d5c18 <__aeabi_dmul+0x80>
   d5c0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5c12:	416d      	adcs	r5, r5
   d5c14:	eb46 0606 	adc.w	r6, r6, r6
   d5c18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5c1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5c20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5c24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5c28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5c2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5c30:	bf88      	it	hi
   d5c32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5c36:	d81e      	bhi.n	d5c76 <__aeabi_dmul+0xde>
   d5c38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5c3c:	bf08      	it	eq
   d5c3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5c42:	f150 0000 	adcs.w	r0, r0, #0
   d5c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c4a:	bd70      	pop	{r4, r5, r6, pc}
   d5c4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5c50:	ea46 0101 	orr.w	r1, r6, r1
   d5c54:	ea40 0002 	orr.w	r0, r0, r2
   d5c58:	ea81 0103 	eor.w	r1, r1, r3
   d5c5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5c60:	bfc2      	ittt	gt
   d5c62:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5c66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5c6a:	bd70      	popgt	{r4, r5, r6, pc}
   d5c6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c70:	f04f 0e00 	mov.w	lr, #0
   d5c74:	3c01      	subs	r4, #1
   d5c76:	f300 80ab 	bgt.w	d5dd0 <__aeabi_dmul+0x238>
   d5c7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5c7e:	bfde      	ittt	le
   d5c80:	2000      	movle	r0, #0
   d5c82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5c86:	bd70      	pople	{r4, r5, r6, pc}
   d5c88:	f1c4 0400 	rsb	r4, r4, #0
   d5c8c:	3c20      	subs	r4, #32
   d5c8e:	da35      	bge.n	d5cfc <__aeabi_dmul+0x164>
   d5c90:	340c      	adds	r4, #12
   d5c92:	dc1b      	bgt.n	d5ccc <__aeabi_dmul+0x134>
   d5c94:	f104 0414 	add.w	r4, r4, #20
   d5c98:	f1c4 0520 	rsb	r5, r4, #32
   d5c9c:	fa00 f305 	lsl.w	r3, r0, r5
   d5ca0:	fa20 f004 	lsr.w	r0, r0, r4
   d5ca4:	fa01 f205 	lsl.w	r2, r1, r5
   d5ca8:	ea40 0002 	orr.w	r0, r0, r2
   d5cac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5cb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5cb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5cb8:	fa21 f604 	lsr.w	r6, r1, r4
   d5cbc:	eb42 0106 	adc.w	r1, r2, r6
   d5cc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5cc4:	bf08      	it	eq
   d5cc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cca:	bd70      	pop	{r4, r5, r6, pc}
   d5ccc:	f1c4 040c 	rsb	r4, r4, #12
   d5cd0:	f1c4 0520 	rsb	r5, r4, #32
   d5cd4:	fa00 f304 	lsl.w	r3, r0, r4
   d5cd8:	fa20 f005 	lsr.w	r0, r0, r5
   d5cdc:	fa01 f204 	lsl.w	r2, r1, r4
   d5ce0:	ea40 0002 	orr.w	r0, r0, r2
   d5ce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ce8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5cec:	f141 0100 	adc.w	r1, r1, #0
   d5cf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5cf4:	bf08      	it	eq
   d5cf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cfa:	bd70      	pop	{r4, r5, r6, pc}
   d5cfc:	f1c4 0520 	rsb	r5, r4, #32
   d5d00:	fa00 f205 	lsl.w	r2, r0, r5
   d5d04:	ea4e 0e02 	orr.w	lr, lr, r2
   d5d08:	fa20 f304 	lsr.w	r3, r0, r4
   d5d0c:	fa01 f205 	lsl.w	r2, r1, r5
   d5d10:	ea43 0302 	orr.w	r3, r3, r2
   d5d14:	fa21 f004 	lsr.w	r0, r1, r4
   d5d18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d1c:	fa21 f204 	lsr.w	r2, r1, r4
   d5d20:	ea20 0002 	bic.w	r0, r0, r2
   d5d24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5d28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5d2c:	bf08      	it	eq
   d5d2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5d32:	bd70      	pop	{r4, r5, r6, pc}
   d5d34:	f094 0f00 	teq	r4, #0
   d5d38:	d10f      	bne.n	d5d5a <__aeabi_dmul+0x1c2>
   d5d3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5d3e:	0040      	lsls	r0, r0, #1
   d5d40:	eb41 0101 	adc.w	r1, r1, r1
   d5d44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d48:	bf08      	it	eq
   d5d4a:	3c01      	subeq	r4, #1
   d5d4c:	d0f7      	beq.n	d5d3e <__aeabi_dmul+0x1a6>
   d5d4e:	ea41 0106 	orr.w	r1, r1, r6
   d5d52:	f095 0f00 	teq	r5, #0
   d5d56:	bf18      	it	ne
   d5d58:	4770      	bxne	lr
   d5d5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5d5e:	0052      	lsls	r2, r2, #1
   d5d60:	eb43 0303 	adc.w	r3, r3, r3
   d5d64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5d68:	bf08      	it	eq
   d5d6a:	3d01      	subeq	r5, #1
   d5d6c:	d0f7      	beq.n	d5d5e <__aeabi_dmul+0x1c6>
   d5d6e:	ea43 0306 	orr.w	r3, r3, r6
   d5d72:	4770      	bx	lr
   d5d74:	ea94 0f0c 	teq	r4, ip
   d5d78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d7c:	bf18      	it	ne
   d5d7e:	ea95 0f0c 	teqne	r5, ip
   d5d82:	d00c      	beq.n	d5d9e <__aeabi_dmul+0x206>
   d5d84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d88:	bf18      	it	ne
   d5d8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d8e:	d1d1      	bne.n	d5d34 <__aeabi_dmul+0x19c>
   d5d90:	ea81 0103 	eor.w	r1, r1, r3
   d5d94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d98:	f04f 0000 	mov.w	r0, #0
   d5d9c:	bd70      	pop	{r4, r5, r6, pc}
   d5d9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5da2:	bf06      	itte	eq
   d5da4:	4610      	moveq	r0, r2
   d5da6:	4619      	moveq	r1, r3
   d5da8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5dac:	d019      	beq.n	d5de2 <__aeabi_dmul+0x24a>
   d5dae:	ea94 0f0c 	teq	r4, ip
   d5db2:	d102      	bne.n	d5dba <__aeabi_dmul+0x222>
   d5db4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5db8:	d113      	bne.n	d5de2 <__aeabi_dmul+0x24a>
   d5dba:	ea95 0f0c 	teq	r5, ip
   d5dbe:	d105      	bne.n	d5dcc <__aeabi_dmul+0x234>
   d5dc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5dc4:	bf1c      	itt	ne
   d5dc6:	4610      	movne	r0, r2
   d5dc8:	4619      	movne	r1, r3
   d5dca:	d10a      	bne.n	d5de2 <__aeabi_dmul+0x24a>
   d5dcc:	ea81 0103 	eor.w	r1, r1, r3
   d5dd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5dd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5dd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5ddc:	f04f 0000 	mov.w	r0, #0
   d5de0:	bd70      	pop	{r4, r5, r6, pc}
   d5de2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5de6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5dea:	bd70      	pop	{r4, r5, r6, pc}

000d5dec <__aeabi_ddiv>:
   d5dec:	b570      	push	{r4, r5, r6, lr}
   d5dee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5df2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5df6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5dfa:	bf1d      	ittte	ne
   d5dfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5e00:	ea94 0f0c 	teqne	r4, ip
   d5e04:	ea95 0f0c 	teqne	r5, ip
   d5e08:	f000 f8a7 	bleq	d5f5a <__aeabi_ddiv+0x16e>
   d5e0c:	eba4 0405 	sub.w	r4, r4, r5
   d5e10:	ea81 0e03 	eor.w	lr, r1, r3
   d5e14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5e18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5e1c:	f000 8088 	beq.w	d5f30 <__aeabi_ddiv+0x144>
   d5e20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5e24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5e28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5e2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5e30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5e34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5e38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5e3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5e40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5e44:	429d      	cmp	r5, r3
   d5e46:	bf08      	it	eq
   d5e48:	4296      	cmpeq	r6, r2
   d5e4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5e4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5e52:	d202      	bcs.n	d5e5a <__aeabi_ddiv+0x6e>
   d5e54:	085b      	lsrs	r3, r3, #1
   d5e56:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e5a:	1ab6      	subs	r6, r6, r2
   d5e5c:	eb65 0503 	sbc.w	r5, r5, r3
   d5e60:	085b      	lsrs	r3, r3, #1
   d5e62:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5e6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5e6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e76:	bf22      	ittt	cs
   d5e78:	1ab6      	subcs	r6, r6, r2
   d5e7a:	4675      	movcs	r5, lr
   d5e7c:	ea40 000c 	orrcs.w	r0, r0, ip
   d5e80:	085b      	lsrs	r3, r3, #1
   d5e82:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e86:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e8e:	bf22      	ittt	cs
   d5e90:	1ab6      	subcs	r6, r6, r2
   d5e92:	4675      	movcs	r5, lr
   d5e94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5e98:	085b      	lsrs	r3, r3, #1
   d5e9a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e9e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5ea2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5ea6:	bf22      	ittt	cs
   d5ea8:	1ab6      	subcs	r6, r6, r2
   d5eaa:	4675      	movcs	r5, lr
   d5eac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5eb0:	085b      	lsrs	r3, r3, #1
   d5eb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d5eb6:	ebb6 0e02 	subs.w	lr, r6, r2
   d5eba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5ebe:	bf22      	ittt	cs
   d5ec0:	1ab6      	subcs	r6, r6, r2
   d5ec2:	4675      	movcs	r5, lr
   d5ec4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5ec8:	ea55 0e06 	orrs.w	lr, r5, r6
   d5ecc:	d018      	beq.n	d5f00 <__aeabi_ddiv+0x114>
   d5ece:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5ed2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5ed6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5eda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5ede:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5ee2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5ee6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5eea:	d1c0      	bne.n	d5e6e <__aeabi_ddiv+0x82>
   d5eec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ef0:	d10b      	bne.n	d5f0a <__aeabi_ddiv+0x11e>
   d5ef2:	ea41 0100 	orr.w	r1, r1, r0
   d5ef6:	f04f 0000 	mov.w	r0, #0
   d5efa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5efe:	e7b6      	b.n	d5e6e <__aeabi_ddiv+0x82>
   d5f00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5f04:	bf04      	itt	eq
   d5f06:	4301      	orreq	r1, r0
   d5f08:	2000      	moveq	r0, #0
   d5f0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5f0e:	bf88      	it	hi
   d5f10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5f14:	f63f aeaf 	bhi.w	d5c76 <__aeabi_dmul+0xde>
   d5f18:	ebb5 0c03 	subs.w	ip, r5, r3
   d5f1c:	bf04      	itt	eq
   d5f1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5f22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5f26:	f150 0000 	adcs.w	r0, r0, #0
   d5f2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f2e:	bd70      	pop	{r4, r5, r6, pc}
   d5f30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5f34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5f38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5f3c:	bfc2      	ittt	gt
   d5f3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5f46:	bd70      	popgt	{r4, r5, r6, pc}
   d5f48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f4c:	f04f 0e00 	mov.w	lr, #0
   d5f50:	3c01      	subs	r4, #1
   d5f52:	e690      	b.n	d5c76 <__aeabi_dmul+0xde>
   d5f54:	ea45 0e06 	orr.w	lr, r5, r6
   d5f58:	e68d      	b.n	d5c76 <__aeabi_dmul+0xde>
   d5f5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5f5e:	ea94 0f0c 	teq	r4, ip
   d5f62:	bf08      	it	eq
   d5f64:	ea95 0f0c 	teqeq	r5, ip
   d5f68:	f43f af3b 	beq.w	d5de2 <__aeabi_dmul+0x24a>
   d5f6c:	ea94 0f0c 	teq	r4, ip
   d5f70:	d10a      	bne.n	d5f88 <__aeabi_ddiv+0x19c>
   d5f72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f76:	f47f af34 	bne.w	d5de2 <__aeabi_dmul+0x24a>
   d5f7a:	ea95 0f0c 	teq	r5, ip
   d5f7e:	f47f af25 	bne.w	d5dcc <__aeabi_dmul+0x234>
   d5f82:	4610      	mov	r0, r2
   d5f84:	4619      	mov	r1, r3
   d5f86:	e72c      	b.n	d5de2 <__aeabi_dmul+0x24a>
   d5f88:	ea95 0f0c 	teq	r5, ip
   d5f8c:	d106      	bne.n	d5f9c <__aeabi_ddiv+0x1b0>
   d5f8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5f92:	f43f aefd 	beq.w	d5d90 <__aeabi_dmul+0x1f8>
   d5f96:	4610      	mov	r0, r2
   d5f98:	4619      	mov	r1, r3
   d5f9a:	e722      	b.n	d5de2 <__aeabi_dmul+0x24a>
   d5f9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5fa0:	bf18      	it	ne
   d5fa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5fa6:	f47f aec5 	bne.w	d5d34 <__aeabi_dmul+0x19c>
   d5faa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5fae:	f47f af0d 	bne.w	d5dcc <__aeabi_dmul+0x234>
   d5fb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5fb6:	f47f aeeb 	bne.w	d5d90 <__aeabi_dmul+0x1f8>
   d5fba:	e712      	b.n	d5de2 <__aeabi_dmul+0x24a>

000d5fbc <__gedf2>:
   d5fbc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d5fc0:	e006      	b.n	d5fd0 <__cmpdf2+0x4>
   d5fc2:	bf00      	nop

000d5fc4 <__ledf2>:
   d5fc4:	f04f 0c01 	mov.w	ip, #1
   d5fc8:	e002      	b.n	d5fd0 <__cmpdf2+0x4>
   d5fca:	bf00      	nop

000d5fcc <__cmpdf2>:
   d5fcc:	f04f 0c01 	mov.w	ip, #1
   d5fd0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5fdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5fe0:	bf18      	it	ne
   d5fe2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5fe6:	d01b      	beq.n	d6020 <__cmpdf2+0x54>
   d5fe8:	b001      	add	sp, #4
   d5fea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5fee:	bf0c      	ite	eq
   d5ff0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5ff4:	ea91 0f03 	teqne	r1, r3
   d5ff8:	bf02      	ittt	eq
   d5ffa:	ea90 0f02 	teqeq	r0, r2
   d5ffe:	2000      	moveq	r0, #0
   d6000:	4770      	bxeq	lr
   d6002:	f110 0f00 	cmn.w	r0, #0
   d6006:	ea91 0f03 	teq	r1, r3
   d600a:	bf58      	it	pl
   d600c:	4299      	cmppl	r1, r3
   d600e:	bf08      	it	eq
   d6010:	4290      	cmpeq	r0, r2
   d6012:	bf2c      	ite	cs
   d6014:	17d8      	asrcs	r0, r3, #31
   d6016:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d601a:	f040 0001 	orr.w	r0, r0, #1
   d601e:	4770      	bx	lr
   d6020:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6024:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6028:	d102      	bne.n	d6030 <__cmpdf2+0x64>
   d602a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d602e:	d107      	bne.n	d6040 <__cmpdf2+0x74>
   d6030:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6038:	d1d6      	bne.n	d5fe8 <__cmpdf2+0x1c>
   d603a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d603e:	d0d3      	beq.n	d5fe8 <__cmpdf2+0x1c>
   d6040:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6044:	4770      	bx	lr
   d6046:	bf00      	nop

000d6048 <__aeabi_cdrcmple>:
   d6048:	4684      	mov	ip, r0
   d604a:	4610      	mov	r0, r2
   d604c:	4662      	mov	r2, ip
   d604e:	468c      	mov	ip, r1
   d6050:	4619      	mov	r1, r3
   d6052:	4663      	mov	r3, ip
   d6054:	e000      	b.n	d6058 <__aeabi_cdcmpeq>
   d6056:	bf00      	nop

000d6058 <__aeabi_cdcmpeq>:
   d6058:	b501      	push	{r0, lr}
   d605a:	f7ff ffb7 	bl	d5fcc <__cmpdf2>
   d605e:	2800      	cmp	r0, #0
   d6060:	bf48      	it	mi
   d6062:	f110 0f00 	cmnmi.w	r0, #0
   d6066:	bd01      	pop	{r0, pc}

000d6068 <__aeabi_dcmpeq>:
   d6068:	f84d ed08 	str.w	lr, [sp, #-8]!
   d606c:	f7ff fff4 	bl	d6058 <__aeabi_cdcmpeq>
   d6070:	bf0c      	ite	eq
   d6072:	2001      	moveq	r0, #1
   d6074:	2000      	movne	r0, #0
   d6076:	f85d fb08 	ldr.w	pc, [sp], #8
   d607a:	bf00      	nop

000d607c <__aeabi_dcmplt>:
   d607c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6080:	f7ff ffea 	bl	d6058 <__aeabi_cdcmpeq>
   d6084:	bf34      	ite	cc
   d6086:	2001      	movcc	r0, #1
   d6088:	2000      	movcs	r0, #0
   d608a:	f85d fb08 	ldr.w	pc, [sp], #8
   d608e:	bf00      	nop

000d6090 <__aeabi_dcmple>:
   d6090:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6094:	f7ff ffe0 	bl	d6058 <__aeabi_cdcmpeq>
   d6098:	bf94      	ite	ls
   d609a:	2001      	movls	r0, #1
   d609c:	2000      	movhi	r0, #0
   d609e:	f85d fb08 	ldr.w	pc, [sp], #8
   d60a2:	bf00      	nop

000d60a4 <__aeabi_dcmpge>:
   d60a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d60a8:	f7ff ffce 	bl	d6048 <__aeabi_cdrcmple>
   d60ac:	bf94      	ite	ls
   d60ae:	2001      	movls	r0, #1
   d60b0:	2000      	movhi	r0, #0
   d60b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d60b6:	bf00      	nop

000d60b8 <__aeabi_dcmpgt>:
   d60b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d60bc:	f7ff ffc4 	bl	d6048 <__aeabi_cdrcmple>
   d60c0:	bf34      	ite	cc
   d60c2:	2001      	movcc	r0, #1
   d60c4:	2000      	movcs	r0, #0
   d60c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d60ca:	bf00      	nop

000d60cc <__aeabi_dcmpun>:
   d60cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d60d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d60d4:	d102      	bne.n	d60dc <__aeabi_dcmpun+0x10>
   d60d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d60da:	d10a      	bne.n	d60f2 <__aeabi_dcmpun+0x26>
   d60dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d60e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d60e4:	d102      	bne.n	d60ec <__aeabi_dcmpun+0x20>
   d60e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d60ea:	d102      	bne.n	d60f2 <__aeabi_dcmpun+0x26>
   d60ec:	f04f 0000 	mov.w	r0, #0
   d60f0:	4770      	bx	lr
   d60f2:	f04f 0001 	mov.w	r0, #1
   d60f6:	4770      	bx	lr

000d60f8 <__aeabi_d2iz>:
   d60f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d60fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6100:	d215      	bcs.n	d612e <__aeabi_d2iz+0x36>
   d6102:	d511      	bpl.n	d6128 <__aeabi_d2iz+0x30>
   d6104:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6108:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d610c:	d912      	bls.n	d6134 <__aeabi_d2iz+0x3c>
   d610e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6116:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d611a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d611e:	fa23 f002 	lsr.w	r0, r3, r2
   d6122:	bf18      	it	ne
   d6124:	4240      	negne	r0, r0
   d6126:	4770      	bx	lr
   d6128:	f04f 0000 	mov.w	r0, #0
   d612c:	4770      	bx	lr
   d612e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6132:	d105      	bne.n	d6140 <__aeabi_d2iz+0x48>
   d6134:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6138:	bf08      	it	eq
   d613a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d613e:	4770      	bx	lr
   d6140:	f04f 0000 	mov.w	r0, #0
   d6144:	4770      	bx	lr
   d6146:	bf00      	nop

000d6148 <__aeabi_d2uiz>:
   d6148:	004a      	lsls	r2, r1, #1
   d614a:	d211      	bcs.n	d6170 <__aeabi_d2uiz+0x28>
   d614c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6150:	d211      	bcs.n	d6176 <__aeabi_d2uiz+0x2e>
   d6152:	d50d      	bpl.n	d6170 <__aeabi_d2uiz+0x28>
   d6154:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6158:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d615c:	d40e      	bmi.n	d617c <__aeabi_d2uiz+0x34>
   d615e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6166:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d616a:	fa23 f002 	lsr.w	r0, r3, r2
   d616e:	4770      	bx	lr
   d6170:	f04f 0000 	mov.w	r0, #0
   d6174:	4770      	bx	lr
   d6176:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d617a:	d102      	bne.n	d6182 <__aeabi_d2uiz+0x3a>
   d617c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6180:	4770      	bx	lr
   d6182:	f04f 0000 	mov.w	r0, #0
   d6186:	4770      	bx	lr

000d6188 <__aeabi_d2f>:
   d6188:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d618c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6190:	bf24      	itt	cs
   d6192:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6196:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d619a:	d90d      	bls.n	d61b8 <__aeabi_d2f+0x30>
   d619c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d61a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d61a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d61a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d61ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d61b0:	bf08      	it	eq
   d61b2:	f020 0001 	biceq.w	r0, r0, #1
   d61b6:	4770      	bx	lr
   d61b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d61bc:	d121      	bne.n	d6202 <__aeabi_d2f+0x7a>
   d61be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d61c2:	bfbc      	itt	lt
   d61c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d61c8:	4770      	bxlt	lr
   d61ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d61d2:	f1c2 0218 	rsb	r2, r2, #24
   d61d6:	f1c2 0c20 	rsb	ip, r2, #32
   d61da:	fa10 f30c 	lsls.w	r3, r0, ip
   d61de:	fa20 f002 	lsr.w	r0, r0, r2
   d61e2:	bf18      	it	ne
   d61e4:	f040 0001 	orrne.w	r0, r0, #1
   d61e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d61ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d61f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d61f4:	ea40 000c 	orr.w	r0, r0, ip
   d61f8:	fa23 f302 	lsr.w	r3, r3, r2
   d61fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6200:	e7cc      	b.n	d619c <__aeabi_d2f+0x14>
   d6202:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6206:	d107      	bne.n	d6218 <__aeabi_d2f+0x90>
   d6208:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d620c:	bf1e      	ittt	ne
   d620e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6212:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6216:	4770      	bxne	lr
   d6218:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d621c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6220:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6224:	4770      	bx	lr
   d6226:	bf00      	nop

000d6228 <__cxa_atexit>:
   d6228:	b510      	push	{r4, lr}
   d622a:	4c05      	ldr	r4, [pc, #20]	; (d6240 <__cxa_atexit+0x18>)
   d622c:	4613      	mov	r3, r2
   d622e:	b12c      	cbz	r4, d623c <__cxa_atexit+0x14>
   d6230:	460a      	mov	r2, r1
   d6232:	4601      	mov	r1, r0
   d6234:	2002      	movs	r0, #2
   d6236:	f3af 8000 	nop.w
   d623a:	bd10      	pop	{r4, pc}
   d623c:	4620      	mov	r0, r4
   d623e:	bd10      	pop	{r4, pc}
   d6240:	00000000 	.word	0x00000000

000d6244 <memcpy>:
   d6244:	b510      	push	{r4, lr}
   d6246:	1e43      	subs	r3, r0, #1
   d6248:	440a      	add	r2, r1
   d624a:	4291      	cmp	r1, r2
   d624c:	d004      	beq.n	d6258 <memcpy+0x14>
   d624e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6252:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6256:	e7f8      	b.n	d624a <memcpy+0x6>
   d6258:	bd10      	pop	{r4, pc}

000d625a <memset>:
   d625a:	4402      	add	r2, r0
   d625c:	4603      	mov	r3, r0
   d625e:	4293      	cmp	r3, r2
   d6260:	d002      	beq.n	d6268 <memset+0xe>
   d6262:	f803 1b01 	strb.w	r1, [r3], #1
   d6266:	e7fa      	b.n	d625e <memset+0x4>
   d6268:	4770      	bx	lr
	...

000d626c <srand>:
   d626c:	b538      	push	{r3, r4, r5, lr}
   d626e:	4b12      	ldr	r3, [pc, #72]	; (d62b8 <srand+0x4c>)
   d6270:	681c      	ldr	r4, [r3, #0]
   d6272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6274:	4605      	mov	r5, r0
   d6276:	b9d3      	cbnz	r3, d62ae <srand+0x42>
   d6278:	2018      	movs	r0, #24
   d627a:	f7fe fb0b 	bl	d4894 <malloc>
   d627e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6282:	63a0      	str	r0, [r4, #56]	; 0x38
   d6284:	8003      	strh	r3, [r0, #0]
   d6286:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d628a:	8043      	strh	r3, [r0, #2]
   d628c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6290:	8083      	strh	r3, [r0, #4]
   d6292:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6296:	80c3      	strh	r3, [r0, #6]
   d6298:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d629c:	8103      	strh	r3, [r0, #8]
   d629e:	2305      	movs	r3, #5
   d62a0:	8143      	strh	r3, [r0, #10]
   d62a2:	230b      	movs	r3, #11
   d62a4:	8183      	strh	r3, [r0, #12]
   d62a6:	2201      	movs	r2, #1
   d62a8:	2300      	movs	r3, #0
   d62aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d62ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d62b0:	2200      	movs	r2, #0
   d62b2:	611d      	str	r5, [r3, #16]
   d62b4:	615a      	str	r2, [r3, #20]
   d62b6:	bd38      	pop	{r3, r4, r5, pc}
   d62b8:	2003e3a0 	.word	0x2003e3a0

000d62bc <strlen>:
   d62bc:	4603      	mov	r3, r0
   d62be:	f813 2b01 	ldrb.w	r2, [r3], #1
   d62c2:	2a00      	cmp	r2, #0
   d62c4:	d1fb      	bne.n	d62be <strlen+0x2>
   d62c6:	1a18      	subs	r0, r3, r0
   d62c8:	3801      	subs	r0, #1
   d62ca:	4770      	bx	lr

000d62cc <dynalib_user>:
   d62cc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d62dc:	0000 0000 7543 7272 6e65 2074 203d 4c00     ....Current = .L
   d62ec:	6e69 2065 7246 7165 6575 636e 2079 203d     ine Frequency = 
   d62fc:	4100 616e 6f6c 2067 6e49 7570 2074 6f56     .Analog Input Vo
   d630c:	746c 6761 2065 203d 5000 776f 7265 4620     ltage = .Power F
   d631c:	6361 6f74 2072 203d 4100 7463 7669 2065     actor = .Active 
   d632c:	6f50 6577 2072 203d 5200 6165 7463 7669     Power = .Reactiv
   d633c:	2065 6f50 6577 2072 203d 4100 7070 7261     e Power = .Appar
   d634c:	6e65 2074 6f50 6577 2072 203d 4900 4332     ent Power = .I2C
   d635c:	6220 7375 5320 6174 7574 2073 7553 6363      bus Status Succ
   d636c:	7365 2073 203d 4200 7375 2079 6974 656d     ess = .Busy time
   d637c:	756f 2074 7075 6e6f 6520 746e 7265 6e69     out upon enterin
   d638c:	2067 6e65 5464 6172 736e 696d 7373 6f69     g endTransmissio
   d639c:	286e 2029 203d 5300 6174 7472 6220 7469     n() = .Start bit
   d63ac:	6720 6e65 7265 7461 6f69 206e 6974 656d      generation time
   d63bc:	756f 2074 203d 6500 646e 6f20 2066 6461     out = .end of ad
   d63cc:	7264 7365 2073 7274 6e61 6d73 7369 6973     dress transmissi
   d63dc:	6e6f 7420 6d69 6f65 7475 3d20 0020 6144     on timeout = .Da
   d63ec:	6174 6220 7479 2065 7274 6e61 6673 7265     ta byte transfer
   d63fc:	7420 6d69 6f65 7475 3d20 0020 6144 6174      timeout = .Data
   d640c:	6220 7479 2065 7274 6e61 6673 7265 7320      byte transfer s
   d641c:	6375 6563 6465 6465 202c 7562 7973 7420     ucceeded, busy t
   d642c:	6d69 6f65 7475 6920 6d6d 6465 6169 6574     imeout immediate
   d643c:	796c 6120 7466 7265 3d20 0020 6843 6365     ly after = .Chec
   d644c:	736b 6d75 3d20 0020                         ksum = .

000d6454 <_ZTVN5spark13EthernetClassE>:
	...
   d645c:	4965 000d 495b 000d 4951 000d 4947 000d     eI..[I..QI..GI..
   d646c:	493b 000d 492f 000d 4923 000d 491b 000d     ;I../I..#I...I..
   d647c:	4911 000d 4907 000d 4d61 000d               .I...I..aM..

000d6488 <_ZTV7TwoWire>:
	...
   d6490:	4985 000d 49cf 000d 49a7 000d 4987 000d     .I...I...I...I..
   d64a0:	49af 000d 49b7 000d 49bf 000d 49c7 000d     .I...I...I...I..

000d64b0 <_ZTV9IPAddress>:
	...
   d64b8:	4a97 000d 4a87 000d 4a89 000d 6162 6475     .J...J...J..baud
   d64c8:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d64d8:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d64e8:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d64f8:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6508:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6518:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6528:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6538:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d6548:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6558:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6568:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d6578:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d6588:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d6598:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d65a4 <_ZTVN5spark9MeshClassE>:
	...
   d65ac:	4bdb 000d 4bd1 000d 4bc7 000d 4bbd 000d     .K...K...K...K..
   d65bc:	4bb1 000d 4ba5 000d 4b99 000d 4b91 000d     .K...K...K...K..
   d65cc:	4b87 000d 4b7d 000d 4d61 000d               .K..}K..aM..

000d65d8 <_ZTVN5spark12NetworkClassE>:
	...
   d65e0:	4cf9 000d 4d03 000d 4d0d 000d 4d17 000d     .L...M...M...M..
   d65f0:	4d21 000d 4d2d 000d 4d39 000d 4d45 000d     !M..-M..9M..EM..
   d6600:	4d4d 000d 4d57 000d 4d61 000d 616e 006e     MM..WM..aM..nan.
   d6610:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
   d6620:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d6630:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d6640:	656d 0000                                   me..

000d6644 <_ZTV11USARTSerial>:
	...
   d664c:	513d 000d 518d 000d 519b 000d 4e41 000d     =Q...Q...Q..AN..
   d665c:	5151 000d 5173 000d 515f 000d 5187 000d     QQ..sQ.._Q...Q..
   d666c:	513f 000d 5143 000d                         ?Q..CQ..

000d6674 <_ZTV9USBSerial>:
	...
   d667c:	523d 000d 528d 000d 529b 000d 4e41 000d     =R...R...R..AN..
   d668c:	5279 000d 523f 000d 5255 000d 5287 000d     yR..?R..UR...R..
   d669c:	526b 000d 5239 000d                         kR..9R..

000d66a4 <_ZTVN5spark9WiFiClassE>:
	...
   d66ac:	53a7 000d 539d 000d 5393 000d 5349 000d     .S...S...S..IS..
   d66bc:	5387 000d 537b 000d 536f 000d 5367 000d     .S..{S..oS..gS..
   d66cc:	535d 000d 5353 000d 4d61 000d               ]S..SS..aM..

000d66d8 <_ZSt7nothrow>:
   d66d8:	0000 0000                                   ....

000d66dc <__sf_fake_stdin>:
	...

000d66fc <__sf_fake_stdout>:
	...

000d671c <__sf_fake_stderr>:
	...
   d673c:	0043                                        C.

000d673e <link_const_variable_data_end>:
	...

000d6740 <link_constructors_location>:
   d6740:	000d4559 	.word	0x000d4559
   d6744:	000d48cd 	.word	0x000d48cd
   d6748:	000d4971 	.word	0x000d4971
   d674c:	000d4b6d 	.word	0x000d4b6d
   d6750:	000d4ca9 	.word	0x000d4ca9
   d6754:	000d4e2d 	.word	0x000d4e2d
   d6758:	000d50b9 	.word	0x000d50b9
   d675c:	000d50f5 	.word	0x000d50f5
   d6760:	000d5129 	.word	0x000d5129
   d6764:	000d53b1 	.word	0x000d53b1
   d6768:	000d5599 	.word	0x000d5599
   d676c:	000d565d 	.word	0x000d565d
   d6770:	000d56e1 	.word	0x000d56e1
   d6774:	000d5765 	.word	0x000d5765

000d6778 <link_constructors_end>:
	...
